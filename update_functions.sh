# =============================================================================
# FUNCI√ìN PARA CONFIGURAR SISTEMA DE ACTUALIZACI√ìN AUTOM√ÅTICA
# =============================================================================

configure_update_system() {
    log_message "STEP" "=== CONFIGURANDO SISTEMA DE ACTUALIZACI√ìN AUTOM√ÅTICA ==="
    
    print_banner
    printf "${WHITE} üîÑ Configurando sistema de actualizaci√≥n autom√°tica...${GRAY_LIGHT}\n\n"

    sleep 2

    # Verificar que estamos en el directorio correcto
    if [ ! -d "$PROJECT_ROOT" ]; then
        register_error "No se puede acceder al directorio del proyecto"
        return 1
    fi

    cd "$PROJECT_ROOT"

    # Verificar que el script check-updates.sh existe
    if [ ! -f "check-updates.sh" ]; then
        log_message "WARNING" "Script check-updates.sh no encontrado, descargando desde GitHub..."
        
        # Intentar descargar el script desde el repositorio
        if command -v curl &> /dev/null; then
            curl -o check-updates.sh https://raw.githubusercontent.com/leopoldohuacasiv/watoolxoficial/main/check-updates.sh
        elif command -v wget &> /dev/null; then
            wget -O check-updates.sh https://raw.githubusercontent.com/leopoldohuacasiv/watoolxoficial/main/check-updates.sh
        else
            log_message "ERROR" "No se pudo descargar check-updates.sh"
            return 1
        fi
    fi

    # Dar permisos de ejecuci√≥n al script
    if [ -f "check-updates.sh" ]; then
        chmod +x check-updates.sh
        log_message "SUCCESS" "‚úÖ Script check-updates.sh configurado correctamente"
    else
        log_message "ERROR" "‚ùå No se pudo configurar check-updates.sh"
        return 1
    fi

    # Verificar que los archivos del sistema de actualizaci√≥n existen
    local required_files=(
        "backend/src/controllers/SystemController.ts"
        "backend/src/routes/systemRoutes.ts"
        "frontend/src/components/UpdateVersionModal/index.js"
        "frontend/src/translate/languages/es.js"
    )

    for file in "${required_files[@]}"; do
        if [ -f "$file" ]; then
            log_message "SUCCESS" "‚úÖ $file encontrado"
        else
            log_message "WARNING" "‚ö†Ô∏è $file no encontrado"
        fi
    done

    # Verificar permisos de Git
    if ! git status &> /dev/null; then
        log_message "WARNING" "‚ö†Ô∏è Git no est√° configurado correctamente"
        log_message "INFO" "El sistema de actualizaci√≥n requiere Git configurado"
    else
        log_message "SUCCESS" "‚úÖ Git configurado correctamente"
    fi

    log_message "SUCCESS" "‚úÖ Sistema de actualizaci√≥n autom√°tica configurado"
    sleep 2
    return 0
}

# =============================================================================
# FUNCI√ìN PARA VERIFICAR SISTEMA DE ACTUALIZACI√ìN
# =============================================================================

verify_update_system() {
    log_message "STEP" "=== VERIFICANDO SISTEMA DE ACTUALIZACI√ìN ==="
    
    print_banner
    printf "${WHITE} üîç Verificando sistema de actualizaci√≥n...${GRAY_LIGHT}\n\n"

    sleep 2

    cd "$PROJECT_ROOT"

    # Verificar script de actualizaci√≥n
    if [ -f "check-updates.sh" ]; then
        printf "${GREEN}‚úÖ Script check-updates.sh encontrado${NC}\n"
        
        # Probar script de verificaci√≥n
        printf "${BLUE}üîÑ Probando verificaci√≥n de actualizaciones...${NC}\n"
        if bash check-updates.sh &> /dev/null; then
            printf "${GREEN}‚úÖ Verificaci√≥n de actualizaciones funcionando${NC}\n"
        else
            printf "${YELLOW}‚ö†Ô∏è Verificaci√≥n de actualizaciones con advertencias${NC}\n"
        fi
    else
        printf "${RED}‚ùå Script check-updates.sh no encontrado${NC}\n"
    fi

    # Verificar archivos del sistema
    local system_files=(
        "backend/src/controllers/SystemController.ts"
        "backend/src/routes/systemRoutes.ts"
        "frontend/src/components/UpdateVersionModal/index.js"
    )

    for file in "${system_files[@]}"; do
        if [ -f "$file" ]; then
            printf "${GREEN}‚úÖ $file encontrado${NC}\n"
        else
            printf "${RED}‚ùå $file no encontrado${NC}\n"
        fi
    done

    printf "\n${WHITE}üìã Resumen del sistema de actualizaci√≥n:${NC}\n"
    printf "${CYAN}‚Ä¢ Verificaci√≥n autom√°tica de actualizaciones${NC}\n"
    printf "${CYAN}‚Ä¢ Actualizaci√≥n b√°sica (solo c√≥digo)${NC}\n"
    printf "${CYAN}‚Ä¢ Actualizaci√≥n completa (c√≥digo + dependencias + BD)${NC}\n"
    printf "${CYAN}‚Ä¢ Backup autom√°tico antes de actualizar${NC}\n"
    printf "${CYAN}‚Ä¢ Rollback autom√°tico en caso de error${NC}\n"
    printf "${CYAN}‚Ä¢ Interfaz web integrada${NC}\n"

    sleep 3
    return 0
}

