import { validateNotificaMeConfig } from "./notificame";
import { logger } from "../utils/logger";

// ‚úÖ Inicializar todas las configuraciones
export const initializeConfigurations = (): void => {
  try {
    logger.info("üîß Inicializando configuraciones del sistema...");

    // ‚úÖ Validar configuraci√≥n de NotificaMe
    validateNotificaMeConfig();

    // ‚úÖ Log de configuraci√≥n cargada
    logger.info("‚úÖ Configuraciones inicializadas correctamente");

    // ‚úÖ Log de variables cr√≠ticas (solo en desarrollo)
    if (process.env.NODE_ENV === "development") {
      logger.info("üîç Configuraci√≥n de desarrollo activada");
      logger.debug(`üì° API URL: ${process.env.NOTIFICAME_API_URL || "Valor por defecto"}`);
      logger.debug(`üîê Webhook habilitado: ${process.env.NOTIFICAME_WEBHOOK_ENABLED || "false"}`);
    }

  } catch (error) {
    logger.error(`‚ùå Error inicializando configuraciones: ${error}`);
    // No lanzar error para permitir que la aplicaci√≥n contin√∫e
  }
};

// ‚úÖ Verificar configuraci√≥n m√≠nima requerida
export const checkMinimumConfig = (): boolean => {
  try {
    const requiredConfigs = [
      { name: "NotificaMe", check: () => validateNotificaMeConfig() }
    ];

    let allValid = true;

    for (const config of requiredConfigs) {
      try {
        config.check();
        logger.info(`‚úÖ Configuraci√≥n ${config.name} v√°lida`);
      } catch (error) {
        logger.error(`‚ùå Configuraci√≥n ${config.name} inv√°lida: ${error}`);
        allValid = false;
      }
    }

    return allValid;
  } catch (error) {
    logger.error(`‚ùå Error verificando configuraci√≥n m√≠nima: ${error}`);
    return false;
  }
};
