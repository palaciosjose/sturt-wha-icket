{"ast":null,"code":"import * as e from \"react\";\nfunction n() {\n  return n = Object.assign ? Object.assign.bind() : function (e) {\n    for (var n = 1; n < arguments.length; n++) {\n      var r = arguments[n];\n      for (var t in r) Object.prototype.hasOwnProperty.call(r, t) && (e[t] = r[t]);\n    }\n    return e;\n  }, n.apply(this, arguments);\n}\nvar r,\n  t,\n  i = [\"children\", \"options\"];\n!function (e) {\n  e.blockQuote = \"0\", e.breakLine = \"1\", e.breakThematic = \"2\", e.codeBlock = \"3\", e.codeFenced = \"4\", e.codeInline = \"5\", e.footnote = \"6\", e.footnoteReference = \"7\", e.gfmTask = \"8\", e.heading = \"9\", e.headingSetext = \"10\", e.htmlBlock = \"11\", e.htmlComment = \"12\", e.htmlSelfClosing = \"13\", e.image = \"14\", e.link = \"15\", e.linkAngleBraceStyleDetector = \"16\", e.linkBareUrlDetector = \"17\", e.linkMailtoDetector = \"18\", e.newlineCoalescer = \"19\", e.orderedList = \"20\", e.paragraph = \"21\", e.ref = \"22\", e.refImage = \"23\", e.refLink = \"24\", e.table = \"25\", e.tableSeparator = \"26\", e.text = \"27\", e.textBolded = \"28\", e.textEmphasized = \"29\", e.textEscaped = \"30\", e.textMarked = \"31\", e.textStrikethroughed = \"32\", e.unorderedList = \"33\";\n}(r || (r = {})), function (e) {\n  e[e.MAX = 0] = \"MAX\", e[e.HIGH = 1] = \"HIGH\", e[e.MED = 2] = \"MED\", e[e.LOW = 3] = \"LOW\", e[e.MIN = 4] = \"MIN\";\n}(t || (t = {}));\nvar a = [\"allowFullScreen\", \"allowTransparency\", \"autoComplete\", \"autoFocus\", \"autoPlay\", \"cellPadding\", \"cellSpacing\", \"charSet\", \"className\", \"classId\", \"colSpan\", \"contentEditable\", \"contextMenu\", \"crossOrigin\", \"encType\", \"formAction\", \"formEncType\", \"formMethod\", \"formNoValidate\", \"formTarget\", \"frameBorder\", \"hrefLang\", \"inputMode\", \"keyParams\", \"keyType\", \"marginHeight\", \"marginWidth\", \"maxLength\", \"mediaGroup\", \"minLength\", \"noValidate\", \"radioGroup\", \"readOnly\", \"rowSpan\", \"spellCheck\", \"srcDoc\", \"srcLang\", \"srcSet\", \"tabIndex\", \"useMap\"].reduce(function (e, n) {\n    return e[n.toLowerCase()] = n, e;\n  }, {\n    for: \"htmlFor\"\n  }),\n  o = {\n    amp: \"&\",\n    apos: \"'\",\n    gt: \">\",\n    lt: \"<\",\n    nbsp: \" \",\n    quot: \"“\"\n  },\n  c = [\"style\", \"script\"],\n  l = /([-A-Z0-9_:]+)(?:\\s*=\\s*(?:(?:\"((?:\\\\.|[^\"])*)\")|(?:'((?:\\\\.|[^'])*)')|(?:\\{((?:\\\\.|{[^}]*?}|[^}])*)\\})))?/gi,\n  u = /mailto:/i,\n  s = /\\n{2,}$/,\n  f = /^(\\s*>[\\s\\S]*?)(?=\\n{2,})/,\n  d = /^ *> ?/gm,\n  p = /^ {2,}\\n/,\n  h = /^(?:( *[-*_])){3,} *(?:\\n *)+\\n/,\n  m = /^\\s*(`{3,}|~{3,}) *(\\S+)?([^\\n]*?)?\\n([\\s\\S]+?)\\s*\\1 *(?:\\n *)*\\n?/,\n  g = /^(?: {4}[^\\n]+\\n*)+(?:\\n *)+\\n?/,\n  y = /^(`+)\\s*([\\s\\S]*?[^`])\\s*\\1(?!`)/,\n  v = /^(?:\\n *)*\\n/,\n  k = /\\r\\n?/g,\n  x = /^\\[\\^([^\\]]+)](:(.*)((\\n+ {4,}.*)|(\\n(?!\\[\\^).+))*)/,\n  b = /^\\[\\^([^\\]]+)]/,\n  E = /\\f/g,\n  w = /^---[ \\t]*\\n(.|\\n)*\\n---[ \\t]*\\n/,\n  S = /^\\s*?\\[(x|\\s)\\]/,\n  C = /^ *(#{1,6}) *([^\\n]+?)(?: +#*)?(?:\\n *)*(?:\\n|$)/,\n  A = /^ *(#{1,6}) +([^\\n]+?)(?: +#*)?(?:\\n *)*(?:\\n|$)/,\n  O = /^([^\\n]+)\\n *(=|-){3,} *(?:\\n *)+\\n/,\n  $ = /^ *(?!<[a-z][^ >/]* ?\\/>)<([a-z][^ >/]*) ?((?:[^>]*[^/])?)>\\n?(\\s*(?:<\\1[^>]*?>[\\s\\S]*?<\\/\\1>|(?!<\\1\\b)[\\s\\S])*?)<\\/\\1>(?!<\\/\\1>)\\n*/i,\n  T = /&([a-z0-9]+|#[0-9]{1,6}|#x[0-9a-fA-F]{1,6});/gi,\n  L = /^<!--[\\s\\S]*?(?:-->)/,\n  R = /^(data|aria|x)-[a-z_][a-z\\d_.-]*$/,\n  z = /^ *<([a-z][a-z0-9:]*)(?:\\s+((?:<.*?>|[^>])*))?\\/?>(?!<\\/\\1>)(\\s*\\n)?/i,\n  M = /^\\{.*\\}$/,\n  I = /^(https?:\\/\\/[^\\s<]+[^<.,:;\"')\\]\\s])/,\n  U = /^<([^ >]+@[^ >]+)>/,\n  j = /^<([^ >]+:\\/[^ >]+)>/,\n  B = /-([a-z])?/gi,\n  N = /^(.*\\|.*)\\n(?: *(\\|? *[-:]+ *\\|[-| :]*)\\n((?:.*\\|.*\\n)*))?\\n?/,\n  H = /^\\[([^\\]]*)\\]:\\s+<?([^\\s>]+)>?\\s*(\"([^\"]*)\")?/,\n  D = /^!\\[([^\\]]*)\\] ?\\[([^\\]]*)\\]/,\n  P = /^\\[([^\\]]*)\\] ?\\[([^\\]]*)\\]/,\n  _ = /(\\[|\\])/g,\n  F = /(\\n|^[-*]\\s|^#|^ {2,}|^-{2,}|^>\\s)/,\n  W = /\\t/g,\n  G = /(^ *\\||\\| *$)/g,\n  Z = /^ *:-+: *$/,\n  q = /^ *:-+ *$/,\n  V = /^ *-+: *$/,\n  X = \"((?:\\\\[.*?\\\\][([].*?[)\\\\]]|<.*?>(?:.*?<.*?>)?|`.*?`|~~.*?~~|==.*?==|.|\\\\n)*?)\",\n  Q = new RegExp(\"^([*_])\\\\1\" + X + \"\\\\1\\\\1(?!\\\\1)\"),\n  J = new RegExp(\"^([*_])\" + X + \"\\\\1(?!\\\\1|\\\\w)\"),\n  K = new RegExp(\"^==\" + X + \"==\"),\n  Y = new RegExp(\"^~~\" + X + \"~~\"),\n  ee = /^\\\\([^0-9A-Za-z\\s])/,\n  ne = /^[\\s\\S]+?(?=[^0-9A-Z\\s\\u00c0-\\uffff&#;.()'\"]|\\d+\\.|\\n\\n| {2,}\\n|\\w+:\\S|$)/i,\n  re = /^\\n+/,\n  te = /^([ \\t]*)/,\n  ie = /\\\\([^\\\\])/g,\n  ae = / *\\n+$/,\n  oe = /(?:^|\\n)( *)$/,\n  ce = \"(?:\\\\d+\\\\.)\",\n  le = \"(?:[*+-])\";\nfunction ue(e) {\n  return \"( *)(\" + (1 === e ? ce : le) + \") +\";\n}\nvar se = ue(1),\n  fe = ue(2);\nfunction de(e) {\n  return new RegExp(\"^\" + (1 === e ? se : fe));\n}\nvar pe = de(1),\n  he = de(2);\nfunction me(e) {\n  return new RegExp(\"^\" + (1 === e ? se : fe) + \"[^\\\\n]*(?:\\\\n(?!\\\\1\" + (1 === e ? ce : le) + \" )[^\\\\n]*)*(\\\\n|$)\", \"gm\");\n}\nvar ge = me(1),\n  ye = me(2);\nfunction ve(e) {\n  var n = 1 === e ? ce : le;\n  return new RegExp(\"^( *)(\" + n + \") [\\\\s\\\\S]+?(?:\\\\n{2,}(?! )(?!\\\\1\" + n + \" (?!\" + n + \" ))\\\\n*|\\\\s*\\\\n*$)\");\n}\nvar ke = ve(1),\n  xe = ve(2);\nfunction be(e, n) {\n  var r = 1 === n,\n    t = r ? ke : xe,\n    i = r ? ge : ye,\n    a = r ? pe : he;\n  return {\n    match: function (e, n, r) {\n      var i = oe.exec(r);\n      return i && (n.list || !n.inline && !n.simple) ? t.exec(e = i[1] + e) : null;\n    },\n    order: 1,\n    parse: function (e, n, t) {\n      var o = r ? +e[2] : void 0,\n        c = e[0].replace(s, \"\\n\").match(i),\n        l = !1;\n      return {\n        items: c.map(function (e, r) {\n          var i = a.exec(e)[0].length,\n            o = new RegExp(\"^ {1,\" + i + \"}\", \"gm\"),\n            u = e.replace(o, \"\").replace(a, \"\"),\n            s = r === c.length - 1,\n            f = -1 !== u.indexOf(\"\\n\\n\") || s && l;\n          l = f;\n          var d,\n            p = t.inline,\n            h = t.list;\n          t.list = !0, f ? (t.inline = !1, d = u.replace(ae, \"\\n\\n\")) : (t.inline = !0, d = u.replace(ae, \"\"));\n          var m = n(d, t);\n          return t.inline = p, t.list = h, m;\n        }),\n        ordered: r,\n        start: o\n      };\n    },\n    render: function (n, r, t) {\n      return e(n.ordered ? \"ol\" : \"ul\", {\n        key: t.key,\n        start: \"20\" === n.type ? n.start : void 0\n      }, n.items.map(function (n, i) {\n        return e(\"li\", {\n          key: i\n        }, r(n, t));\n      }));\n    }\n  };\n}\nvar Ee = new RegExp(\"^\\\\[((?:\\\\[[^\\\\]]*\\\\]|[^\\\\[\\\\]]|\\\\](?=[^\\\\[]*\\\\]))*)\\\\]\\\\(\\\\s*<?((?:\\\\([^)]*\\\\)|[^\\\\s\\\\\\\\]|\\\\\\\\.)*?)>?(?:\\\\s+['\\\"]([\\\\s\\\\S]*?)['\\\"])?\\\\s*\\\\)\"),\n  we = /^!\\[(.*?)\\]\\( *((?:\\([^)]*\\)|[^() ])*) *\"?([^)\"]*)?\"?\\)/,\n  Se = [f, m, g, C, O, A, L, N, ge, ke, ye, xe],\n  Ce = [].concat(Se, [/^[^\\n]+(?:  \\n|\\n{2,})/, $, z]);\nfunction Ae(e) {\n  return e.replace(/[ÀÁÂÃÄÅàáâãäåæÆ]/g, \"a\").replace(/[çÇ]/g, \"c\").replace(/[ðÐ]/g, \"d\").replace(/[ÈÉÊËéèêë]/g, \"e\").replace(/[ÏïÎîÍíÌì]/g, \"i\").replace(/[Ññ]/g, \"n\").replace(/[øØœŒÕõÔôÓóÒò]/g, \"o\").replace(/[ÜüÛûÚúÙù]/g, \"u\").replace(/[ŸÿÝý]/g, \"y\").replace(/[^a-z0-9- ]/gi, \"\").replace(/ /gi, \"-\").toLowerCase();\n}\nfunction Oe(e) {\n  return V.test(e) ? \"right\" : Z.test(e) ? \"center\" : q.test(e) ? \"left\" : null;\n}\nfunction $e(e, n, r, t) {\n  var i = r.inTable;\n  r.inTable = !0;\n  var a = e.trim().split(/( *(?:`[^`]*`|<.*?>.*?<\\/.*?>(?!<\\/.*?>)|\\\\\\||\\|) *)/).reduce(function (e, i) {\n    return \"|\" === i.trim() ? e.push(t ? {\n      type: \"26\"\n    } : {\n      type: \"27\",\n      text: i\n    }) : \"\" !== i && e.push.apply(e, n(i, r)), e;\n  }, []);\n  r.inTable = i;\n  var o = [[]];\n  return a.forEach(function (e, n) {\n    \"26\" === e.type ? 0 !== n && n !== a.length - 1 && o.push([]) : (\"27\" !== e.type || null != a[n + 1] && \"26\" !== a[n + 1].type || (e.text = e.text.trimEnd()), o[o.length - 1].push(e));\n  }), o;\n}\nfunction Te(e, n, r) {\n  r.inline = !0;\n  var t = e[2] ? e[2].replace(G, \"\").split(\"|\").map(Oe) : [],\n    i = e[3] ? function (e, n, r) {\n      return e.trim().split(\"\\n\").map(function (e) {\n        return $e(e, n, r, !0);\n      });\n    }(e[3], n, r) : [],\n    a = $e(e[1], n, r, !!i.length);\n  return r.inline = !1, i.length ? {\n    align: t,\n    cells: i,\n    header: a,\n    type: \"25\"\n  } : {\n    children: a,\n    type: \"21\"\n  };\n}\nfunction Le(e, n) {\n  return null == e.align[n] ? {} : {\n    textAlign: e.align[n]\n  };\n}\nfunction Re(e) {\n  return function (n, r) {\n    return r.inline ? e.exec(n) : null;\n  };\n}\nfunction ze(e) {\n  return function (n, r) {\n    return r.inline || r.simple ? e.exec(n) : null;\n  };\n}\nfunction Me(e) {\n  return function (n, r) {\n    return r.inline || r.simple ? null : e.exec(n);\n  };\n}\nfunction Ie(e) {\n  return function (n) {\n    return e.exec(n);\n  };\n}\nfunction Ue(e, n, r) {\n  if (n.inline || n.simple) return null;\n  if (r && !r.endsWith(\"\\n\")) return null;\n  var t = \"\";\n  e.split(\"\\n\").every(function (e) {\n    return !Se.some(function (n) {\n      return n.test(e);\n    }) && (t += e + \"\\n\", e.trim());\n  });\n  var i = t.trimEnd();\n  return \"\" == i ? null : [t, i];\n}\nfunction je(e) {\n  try {\n    if (decodeURIComponent(e).replace(/[^A-Za-z0-9/:]/g, \"\").match(/^\\s*(javascript|vbscript|data(?!:image)):/i)) return;\n  } catch (e) {\n    return null;\n  }\n  return e;\n}\nfunction Be(e) {\n  return e.replace(ie, \"$1\");\n}\nfunction Ne(e, n, r) {\n  var t = r.inline || !1,\n    i = r.simple || !1;\n  r.inline = !0, r.simple = !0;\n  var a = e(n, r);\n  return r.inline = t, r.simple = i, a;\n}\nfunction He(e, n, r) {\n  var t = r.inline || !1,\n    i = r.simple || !1;\n  r.inline = !1, r.simple = !0;\n  var a = e(n, r);\n  return r.inline = t, r.simple = i, a;\n}\nfunction De(e, n, r) {\n  var t = r.inline || !1;\n  r.inline = !1;\n  var i = e(n, r);\n  return r.inline = t, i;\n}\nvar Pe = function (e, n, r) {\n  return {\n    children: Ne(n, e[1], r)\n  };\n};\nfunction _e() {\n  return {};\n}\nfunction Fe() {\n  return null;\n}\nfunction We() {\n  return [].slice.call(arguments).filter(Boolean).join(\" \");\n}\nfunction Ge(e, n, r) {\n  for (var t = e, i = n.split(\".\"); i.length && void 0 !== (t = t[i[0]]);) i.shift();\n  return t || r;\n}\nfunction Ze(e, n) {\n  var r = Ge(n, e);\n  return r ? \"function\" == typeof r || \"object\" == typeof r && \"render\" in r ? r : Ge(n, e + \".component\", e) : e;\n}\nfunction qe(r, t) {\n  var i;\n  void 0 === r && (r = \"\"), void 0 === t && (t = {}), t.overrides = t.overrides || {}, t.slugify = t.slugify || Ae, t.namedCodesToUnicode = t.namedCodesToUnicode ? n({}, o, t.namedCodesToUnicode) : o;\n  var s = t.createElement || e.createElement;\n  function G(e, r) {\n    var i = Ge(t.overrides, e + \".props\", {});\n    return s.apply(void 0, [Ze(e, t.overrides), n({}, r, i, {\n      className: We(null == r ? void 0 : r.className, i.className) || void 0\n    })].concat([].slice.call(arguments, 2)));\n  }\n  function Z(n) {\n    n = n.replace(w, \"\");\n    var r = !1;\n    t.forceInline ? r = !0 : t.forceBlock || (r = !1 === F.test(n));\n    for (var i = ce(oe(r ? n : n.trimEnd().replace(re, \"\") + \"\\n\\n\", {\n      inline: r\n    })); \"string\" == typeof i[i.length - 1] && !i[i.length - 1].trim();) i.pop();\n    if (null === t.wrapper) return i;\n    var a,\n      o = t.wrapper || (r ? \"span\" : \"div\");\n    if (i.length > 1 || t.forceWrapper) a = i;else {\n      if (1 === i.length) return \"string\" == typeof (a = i[0]) ? G(\"span\", {\n        key: \"outer\"\n      }, a) : a;\n      a = null;\n    }\n    return e.createElement(o, {\n      key: \"outer\"\n    }, a);\n  }\n  function q(n) {\n    var r = n.match(l);\n    return r ? r.reduce(function (n, r, t) {\n      var i = r.indexOf(\"=\");\n      if (-1 !== i) {\n        var o = function (e) {\n            return -1 !== e.indexOf(\"-\") && null === e.match(R) && (e = e.replace(B, function (e, n) {\n              return n.toUpperCase();\n            })), e;\n          }(r.slice(0, i)).trim(),\n          c = function (e) {\n            var n = e[0];\n            return ('\"' === n || \"'\" === n) && e.length >= 2 && e[e.length - 1] === n ? e.slice(1, -1) : e;\n          }(r.slice(i + 1).trim()),\n          l = a[o] || o,\n          u = n[l] = function (e, n) {\n            return \"style\" === e ? n.split(/;\\s?/).reduce(function (e, n) {\n              var r = n.slice(0, n.indexOf(\":\"));\n              return e[r.trim().replace(/(-[a-z])/g, function (e) {\n                return e[1].toUpperCase();\n              })] = n.slice(r.length + 1).trim(), e;\n            }, {}) : \"href\" === e || \"src\" === e ? je(n) : (n.match(M) && (n = n.slice(1, n.length - 1)), \"true\" === n || \"false\" !== n && n);\n          }(o, c);\n        \"string\" == typeof u && ($.test(u) || z.test(u)) && (n[l] = e.cloneElement(Z(u.trim()), {\n          key: t\n        }));\n      } else \"style\" !== r && (n[a[r] || r] = !0);\n      return n;\n    }, {}) : null;\n  }\n  var V = [],\n    X = {},\n    ie = ((i = {})[0] = {\n      match: Me(f),\n      order: 1,\n      parse: function (e, n, r) {\n        return {\n          children: n(e[0].replace(d, \"\"), r)\n        };\n      },\n      render: function (e, n, r) {\n        return G(\"blockquote\", {\n          key: r.key\n        }, n(e.children, r));\n      }\n    }, i[1] = {\n      match: Ie(p),\n      order: 1,\n      parse: _e,\n      render: function (e, n, r) {\n        return G(\"br\", {\n          key: r.key\n        });\n      }\n    }, i[2] = {\n      match: Me(h),\n      order: 1,\n      parse: _e,\n      render: function (e, n, r) {\n        return G(\"hr\", {\n          key: r.key\n        });\n      }\n    }, i[3] = {\n      match: Me(g),\n      order: 0,\n      parse: function (e) {\n        return {\n          lang: void 0,\n          text: e[0].replace(/^ {4}/gm, \"\").replace(/\\n+$/, \"\")\n        };\n      },\n      render: function (e, r, t) {\n        return G(\"pre\", {\n          key: t.key\n        }, G(\"code\", n({}, e.attrs, {\n          className: e.lang ? \"lang-\" + e.lang : \"\"\n        }), e.text));\n      }\n    }, i[4] = {\n      match: Me(m),\n      order: 0,\n      parse: function (e) {\n        return {\n          attrs: q(e[3] || \"\"),\n          lang: e[2] || void 0,\n          text: e[4],\n          type: \"3\"\n        };\n      }\n    }, i[5] = {\n      match: ze(y),\n      order: 3,\n      parse: function (e) {\n        return {\n          text: e[2]\n        };\n      },\n      render: function (e, n, r) {\n        return G(\"code\", {\n          key: r.key\n        }, e.text);\n      }\n    }, i[6] = {\n      match: Me(x),\n      order: 0,\n      parse: function (e) {\n        return V.push({\n          footnote: e[2],\n          identifier: e[1]\n        }), {};\n      },\n      render: Fe\n    }, i[7] = {\n      match: Re(b),\n      order: 1,\n      parse: function (e) {\n        return {\n          target: \"#\" + t.slugify(e[1]),\n          text: e[1]\n        };\n      },\n      render: function (e, n, r) {\n        return G(\"a\", {\n          key: r.key,\n          href: je(e.target)\n        }, G(\"sup\", {\n          key: r.key\n        }, e.text));\n      }\n    }, i[8] = {\n      match: Re(S),\n      order: 1,\n      parse: function (e) {\n        return {\n          completed: \"x\" === e[1].toLowerCase()\n        };\n      },\n      render: function (e, n, r) {\n        return G(\"input\", {\n          checked: e.completed,\n          key: r.key,\n          readOnly: !0,\n          type: \"checkbox\"\n        });\n      }\n    }, i[9] = {\n      match: Me(t.enforceAtxHeadings ? A : C),\n      order: 1,\n      parse: function (e, n, r) {\n        return {\n          children: Ne(n, e[2], r),\n          id: t.slugify(e[2]),\n          level: e[1].length\n        };\n      },\n      render: function (e, n, r) {\n        return G(\"h\" + e.level, {\n          id: e.id,\n          key: r.key\n        }, n(e.children, r));\n      }\n    }, i[10] = {\n      match: Me(O),\n      order: 0,\n      parse: function (e, n, r) {\n        return {\n          children: Ne(n, e[1], r),\n          level: \"=\" === e[2] ? 1 : 2,\n          type: \"9\"\n        };\n      }\n    }, i[11] = {\n      match: Ie($),\n      order: 1,\n      parse: function (e, n, r) {\n        var t,\n          i = e[3].match(te),\n          a = new RegExp(\"^\" + i[1], \"gm\"),\n          o = e[3].replace(a, \"\"),\n          l = (t = o, Ce.some(function (e) {\n            return e.test(t);\n          }) ? De : Ne),\n          u = e[1].toLowerCase(),\n          s = -1 !== c.indexOf(u),\n          f = {\n            attrs: q(e[2]),\n            noInnerParse: s,\n            tag: (s ? u : e[1]).trim()\n          };\n        return r.inAnchor = r.inAnchor || \"a\" === u, s ? f.text = e[3] : f.children = l(n, o, r), r.inAnchor = !1, f;\n      },\n      render: function (e, r, t) {\n        return G(e.tag, n({\n          key: t.key\n        }, e.attrs), e.text || r(e.children, t));\n      }\n    }, i[13] = {\n      match: Ie(z),\n      order: 1,\n      parse: function (e) {\n        return {\n          attrs: q(e[2] || \"\"),\n          tag: e[1].trim()\n        };\n      },\n      render: function (e, r, t) {\n        return G(e.tag, n({}, e.attrs, {\n          key: t.key\n        }));\n      }\n    }, i[12] = {\n      match: Ie(L),\n      order: 1,\n      parse: function () {\n        return {};\n      },\n      render: Fe\n    }, i[14] = {\n      match: ze(we),\n      order: 1,\n      parse: function (e) {\n        return {\n          alt: e[1],\n          target: Be(e[2]),\n          title: e[3]\n        };\n      },\n      render: function (e, n, r) {\n        return G(\"img\", {\n          key: r.key,\n          alt: e.alt || void 0,\n          title: e.title || void 0,\n          src: je(e.target)\n        });\n      }\n    }, i[15] = {\n      match: Re(Ee),\n      order: 3,\n      parse: function (e, n, r) {\n        return {\n          children: He(n, e[1], r),\n          target: Be(e[2]),\n          title: e[3]\n        };\n      },\n      render: function (e, n, r) {\n        return G(\"a\", {\n          key: r.key,\n          href: je(e.target),\n          title: e.title\n        }, n(e.children, r));\n      }\n    }, i[16] = {\n      match: Re(j),\n      order: 0,\n      parse: function (e) {\n        return {\n          children: [{\n            text: e[1],\n            type: \"27\"\n          }],\n          target: e[1],\n          type: \"15\"\n        };\n      }\n    }, i[17] = {\n      match: function (e, n) {\n        return n.inAnchor ? null : Re(I)(e, n);\n      },\n      order: 0,\n      parse: function (e) {\n        return {\n          children: [{\n            text: e[1],\n            type: \"27\"\n          }],\n          target: e[1],\n          title: void 0,\n          type: \"15\"\n        };\n      }\n    }, i[18] = {\n      match: Re(U),\n      order: 0,\n      parse: function (e) {\n        var n = e[1],\n          r = e[1];\n        return u.test(r) || (r = \"mailto:\" + r), {\n          children: [{\n            text: n.replace(\"mailto:\", \"\"),\n            type: \"27\"\n          }],\n          target: r,\n          type: \"15\"\n        };\n      }\n    }, i[20] = be(G, 1), i[33] = be(G, 2), i[19] = {\n      match: Me(v),\n      order: 3,\n      parse: _e,\n      render: function () {\n        return \"\\n\";\n      }\n    }, i[21] = {\n      match: Ue,\n      order: 3,\n      parse: Pe,\n      render: function (e, n, r) {\n        return G(\"p\", {\n          key: r.key\n        }, n(e.children, r));\n      }\n    }, i[22] = {\n      match: Re(H),\n      order: 0,\n      parse: function (e) {\n        return X[e[1]] = {\n          target: e[2],\n          title: e[4]\n        }, {};\n      },\n      render: Fe\n    }, i[23] = {\n      match: ze(D),\n      order: 0,\n      parse: function (e) {\n        return {\n          alt: e[1] || void 0,\n          ref: e[2]\n        };\n      },\n      render: function (e, n, r) {\n        return X[e.ref] ? G(\"img\", {\n          key: r.key,\n          alt: e.alt,\n          src: je(X[e.ref].target),\n          title: X[e.ref].title\n        }) : null;\n      }\n    }, i[24] = {\n      match: Re(P),\n      order: 0,\n      parse: function (e, n, r) {\n        return {\n          children: n(e[1], r),\n          fallbackChildren: n(e[0].replace(_, \"\\\\$1\"), r),\n          ref: e[2]\n        };\n      },\n      render: function (e, n, r) {\n        return X[e.ref] ? G(\"a\", {\n          key: r.key,\n          href: je(X[e.ref].target),\n          title: X[e.ref].title\n        }, n(e.children, r)) : G(\"span\", {\n          key: r.key\n        }, n(e.fallbackChildren, r));\n      }\n    }, i[25] = {\n      match: Me(N),\n      order: 1,\n      parse: Te,\n      render: function (e, n, r) {\n        var t = e;\n        return G(\"table\", {\n          key: r.key\n        }, G(\"thead\", null, G(\"tr\", null, t.header.map(function (e, i) {\n          return G(\"th\", {\n            key: i,\n            style: Le(t, i)\n          }, n(e, r));\n        }))), G(\"tbody\", null, t.cells.map(function (e, i) {\n          return G(\"tr\", {\n            key: i\n          }, e.map(function (e, i) {\n            return G(\"td\", {\n              key: i,\n              style: Le(t, i)\n            }, n(e, r));\n          }));\n        })));\n      }\n    }, i[27] = {\n      match: Ie(ne),\n      order: 4,\n      parse: function (e) {\n        return {\n          text: e[0].replace(T, function (e, n) {\n            return t.namedCodesToUnicode[n] ? t.namedCodesToUnicode[n] : e;\n          })\n        };\n      },\n      render: function (e) {\n        return e.text;\n      }\n    }, i[28] = {\n      match: ze(Q),\n      order: 2,\n      parse: function (e, n, r) {\n        return {\n          children: n(e[2], r)\n        };\n      },\n      render: function (e, n, r) {\n        return G(\"strong\", {\n          key: r.key\n        }, n(e.children, r));\n      }\n    }, i[29] = {\n      match: ze(J),\n      order: 3,\n      parse: function (e, n, r) {\n        return {\n          children: n(e[2], r)\n        };\n      },\n      render: function (e, n, r) {\n        return G(\"em\", {\n          key: r.key\n        }, n(e.children, r));\n      }\n    }, i[30] = {\n      match: ze(ee),\n      order: 1,\n      parse: function (e) {\n        return {\n          text: e[1],\n          type: \"27\"\n        };\n      }\n    }, i[31] = {\n      match: ze(K),\n      order: 3,\n      parse: Pe,\n      render: function (e, n, r) {\n        return G(\"mark\", {\n          key: r.key\n        }, n(e.children, r));\n      }\n    }, i[32] = {\n      match: ze(Y),\n      order: 3,\n      parse: Pe,\n      render: function (e, n, r) {\n        return G(\"del\", {\n          key: r.key\n        }, n(e.children, r));\n      }\n    }, i);\n  !0 === t.disableParsingRawHTML && (delete ie[11], delete ie[13]);\n  var ae,\n    oe = function (e) {\n      var n = Object.keys(e);\n      function r(t, i) {\n        for (var a = [], o = \"\"; t;) for (var c = 0; c < n.length;) {\n          var l = n[c],\n            u = e[l],\n            s = u.match(t, i, o);\n          if (s) {\n            var f = s[0];\n            t = t.substring(f.length);\n            var d = u.parse(s, r, i);\n            null == d.type && (d.type = l), a.push(d), o = f;\n            break;\n          }\n          c++;\n        }\n        return a;\n      }\n      return n.sort(function (n, r) {\n        var t = e[n].order,\n          i = e[r].order;\n        return t !== i ? t - i : n < r ? -1 : 1;\n      }), function (e, n) {\n        return r(function (e) {\n          return e.replace(k, \"\\n\").replace(E, \"\").replace(W, \"    \");\n        }(e), n);\n      };\n    }(ie),\n    ce = (ae = function (e, n) {\n      return function (r, t, i) {\n        var a = e[r.type].render;\n        return n ? n(function () {\n          return a(r, t, i);\n        }, r, t, i) : a(r, t, i);\n      };\n    }(ie, t.renderRule), function e(n, r) {\n      if (void 0 === r && (r = {}), Array.isArray(n)) {\n        for (var t = r.key, i = [], a = !1, o = 0; o < n.length; o++) {\n          r.key = o;\n          var c = e(n[o], r),\n            l = \"string\" == typeof c;\n          l && a ? i[i.length - 1] += c : null !== c && i.push(c), a = l;\n        }\n        return r.key = t, i;\n      }\n      return ae(n, e, r);\n    }),\n    le = Z(r);\n  return V.length ? G(\"div\", null, le, G(\"footer\", {\n    key: \"footer\"\n  }, V.map(function (e) {\n    return G(\"div\", {\n      id: t.slugify(e.identifier),\n      key: e.identifier\n    }, e.identifier, ce(oe(e.footnote, {\n      inline: !0\n    })));\n  }))) : le;\n}\nexport default function (n) {\n  var r = n.children,\n    t = void 0 === r ? \"\" : r,\n    a = n.options,\n    o = function (e, n) {\n      if (null == e) return {};\n      var r,\n        t,\n        i = {},\n        a = Object.keys(e);\n      for (t = 0; t < a.length; t++) n.indexOf(r = a[t]) >= 0 || (i[r] = e[r]);\n      return i;\n    }(n, i);\n  return e.cloneElement(qe(t, a), o);\n}\nexport { r as RuleType, qe as compiler, Ae as slugify };","map":{"version":3,"sources":["../index.tsx"],"names":["RuleType","Priority","ATTRIBUTE_TO_JSX_PROP_MAP","reduce","obj","x","toLowerCase","for","namedCodesToUnicode","amp","apos","gt","lt","nbsp","quot","DO_NOT_PROCESS_HTML_ELEMENTS","ATTR_EXTRACTOR_R","AUTOLINK_MAILTO_CHECK_R","BLOCK_END_R","BLOCKQUOTE_R","BLOCKQUOTE_TRIM_LEFT_MULTILINE_R","BREAK_LINE_R","BREAK_THEMATIC_R","CODE_BLOCK_FENCED_R","CODE_BLOCK_R","CODE_INLINE_R","CONSECUTIVE_NEWLINE_R","CR_NEWLINE_R","FOOTNOTE_R","FOOTNOTE_REFERENCE_R","FORMFEED_R","FRONT_MATTER_R","GFM_TASK_R","HEADING_R","HEADING_ATX_COMPLIANT_R","HEADING_SETEXT_R","HTML_BLOCK_ELEMENT_R","HTML_CHAR_CODE_R","HTML_COMMENT_R","HTML_CUSTOM_ATTR_R","HTML_SELF_CLOSING_ELEMENT_R","INTERPOLATION_R","LINK_AUTOLINK_BARE_URL_R","LINK_AUTOLINK_MAILTO_R","LINK_AUTOLINK_R","CAPTURE_LETTER_AFTER_HYPHEN","NP_TABLE_R","REFERENCE_IMAGE_OR_LINK","REFERENCE_IMAGE_R","REFERENCE_LINK_R","SQUARE_BRACKETS_R","SHOULD_RENDER_AS_BLOCK_R","TAB_R","TABLE_TRIM_PIPES","TABLE_CENTER_ALIGN","TABLE_LEFT_ALIGN","TABLE_RIGHT_ALIGN","INLINE_SKIP_R","TEXT_BOLD_R","RegExp","TEXT_EMPHASIZED_R","TEXT_MARKED_R","TEXT_STRIKETHROUGHED_R","TEXT_ESCAPED_R","TEXT_PLAIN_R","TRIM_STARTING_NEWLINES","HTML_LEFT_TRIM_AMOUNT_R","UNESCAPE_URL_R","LIST_ITEM_END_R","LIST_LOOKBEHIND_R","ORDERED_LIST_BULLET","UNORDERED_LIST_BULLET","generateListItemPrefix","type","ORDERED_LIST_ITEM_PREFIX","UNORDERED_LIST_ITEM_PREFIX","generateListItemPrefixRegex","ORDERED_LIST_ITEM_PREFIX_R","UNORDERED_LIST_ITEM_PREFIX_R","generateListItemRegex","ORDERED_LIST_ITEM_R","UNORDERED_LIST_ITEM_R","generateListRegex","bullet","ORDERED_LIST_R","UNORDERED_LIST_R","generateListRule","h","ordered","LIST_R","LIST_ITEM_R","LIST_ITEM_PREFIX_R","match","source","state","prevCapture","isStartOfLine","exec","list","inline","simple","order","parse","capture","start","undefined","items","replace","lastItemWasAParagraph","map","item","i","space","length","spaceRegex","content","isLastItem","indexOf","thisItemIsAParagraph","oldStateInline","oldStateList","adjustedContent","result","render","node","output","key","LINK_R","IMAGE_R","NON_PARAGRAPH_BLOCK_SYNTAXES","BLOCK_SYNTAXES","concat","input","some","r","test","str","first","slice","slugify","parseTableAlignCapture","alignCapture","parseTableRow","tableOutput","prevInTable","inTable","tableRow","trim","split","nodes","fragment","push","text","apply","cells","forEach","trimEnd","rowText","parseTable","align","parseTableCells","header","children","getTableStyle","colIndex","textAlign","_","letter","toUpperCase","value","styles","kvPair","substr","sanitizeUrl","rules","ruleList","Object","keys","sort","typeA","typeB","orderA","orderB","nestedParse","ruleType","rule","currCaptureString","substring","parsed","normalizeWhitespace","inlineRegex","regex","simpleInlineRegex","blockRegex","anyScopeRegex","matchParagraph","prevCapturedString","endsWith","every","line","captured","url","decodeURIComponent","e","unescapeUrl","rawUrlString","parseInline","isCurrentlyInline","isCurrentlySimple","parseSimpleInline","parseBlock","parseCaptureInline","captureNothing","renderNothing","patchedRender","ast","Array","isArray","oldKey","lastWasString","nodeOut","isString","userRender","renderer","cx","filter","Boolean","join","get","src","path","fb","ptr","frags","shift","getTag","tag","overrides","override","compiler","markdown","options","_extends","createElementFn","createElement","React","props","overrideProps","className","compile","forceInline","forceBlock","arr","emitter","parser","pop","wrapper","jsx","forceWrapper","attrStringToMap","attributes","raw","index","delimiterIdx","normalizeAttributeKey","unquote","mappedKey","normalizedValue","attributeValueToJSXPropValue","cloneElement","footnotes","refs","_rules","__","lang","attrs","footnote","identifier","target","href","completed","checked","readOnly","enforceAtxHeadings","id","level","_capture$3$match","trimmer","trimmed","parseFunc","tagName","noInnerParse","inAnchor","alt","title","address","ref","fallbackChildren","table","style","row","c","full","inner","disableParsingRawHTML","parserFor","createRenderer","renderRule","def","_ref","_ref$children","_objectWithoutPropertiesLoose"],"mappings":";;;;;;;;;;IAckBA,CAAAA;EA0CPC,CAAAA;EAAAA,CAAAA,GAAAA,CAAAA,UAAAA,EAAAA,SAAAA,CAAAA;AAAAA,CA1CX,UAAkBD,CAAAA,EAAAA;EAChBA,CAAAA,CAAAA,UAAAA,GAAAA,GAAAA,EACAA,CAAAA,CAAAA,SAAAA,GAAAA,GAAAA,EACAA,CAAAA,CAAAA,aAAAA,GAAAA,GAAAA,EACAA,CAAAA,CAAAA,SAAAA,GAAAA,GAAAA,EACAA,CAAAA,CAAAA,UAAAA,GAAAA,GAAAA,EACAA,CAAAA,CAAAA,UAAAA,GAAAA,GAAAA,EACAA,CAAAA,CAAAA,QAAAA,GAAAA,GAAAA,EACAA,CAAAA,CAAAA,iBAAAA,GAAAA,GAAAA,EACAA,CAAAA,CAAAA,OAAAA,GAAAA,GAAAA,EACAA,CAAAA,CAAAA,OAAAA,GAAAA,GAAAA,EACAA,CAAAA,CAAAA,aAAAA,GAAAA,IAAAA,EAEAA,CAAAA,CAAAA,SAAAA,GAAAA,IAAAA,EACAA,CAAAA,CAAAA,WAAAA,GAAAA,IAAAA,EAEAA,CAAAA,CAAAA,eAAAA,GAAAA,IAAAA,EACAA,CAAAA,CAAAA,KAAAA,GAAAA,IAAAA,EACAA,CAAAA,CAAAA,IAAAA,GAAAA,IAAAA,EAEAA,CAAAA,CAAAA,2BAAAA,GAAAA,IAAAA,EAEAA,CAAAA,CAAAA,mBAAAA,GAAAA,IAAAA,EAEAA,CAAAA,CAAAA,kBAAAA,GAAAA,IAAAA,EACAA,CAAAA,CAAAA,gBAAAA,GAAAA,IAAAA,EACAA,CAAAA,CAAAA,WAAAA,GAAAA,IAAAA,EACAA,CAAAA,CAAAA,SAAAA,GAAAA,IAAAA,EACAA,CAAAA,CAAAA,GAAAA,GAAAA,IAAAA,EACAA,CAAAA,CAAAA,QAAAA,GAAAA,IAAAA,EACAA,CAAAA,CAAAA,OAAAA,GAAAA,IAAAA,EACAA,CAAAA,CAAAA,KAAAA,GAAAA,IAAAA,EACAA,CAAAA,CAAAA,cAAAA,GAAAA,IAAAA,EACAA,CAAAA,CAAAA,IAAAA,GAAAA,IAAAA,EACAA,CAAAA,CAAAA,UAAAA,GAAAA,IAAAA,EACAA,CAAAA,CAAAA,cAAAA,GAAAA,IAAAA,EACAA,CAAAA,CAAAA,WAAAA,GAAAA,IAAAA,EACAA,CAAAA,CAAAA,UAAAA,GAAAA,IAAAA,EACAA,CAAAA,CAAAA,mBAAAA,GAAAA,IAAAA,EACAA,CAAAA,CAAAA,aAAAA,GAAAA,IACD;AAAA,CAxCD,CAAkBA,CAAAA,KAAAA,CAAAA,GAAAA,CAAAA,CAAAA,CAAAA,CAAAA,EA0ClB,UAAWC,CAAAA,EAAAA;EAITA,CAAAA,CAAAA,CAAAA,CAAAA,GAAAA,GAAAA,CAAAA,CAAAA,GAAAA,KAAAA,EAIAA,CAAAA,CAAAA,CAAAA,CAAAA,IAAAA,GAAAA,CAAAA,CAAAA,GAAAA,MAAAA,EAIAA,CAAAA,CAAAA,CAAAA,CAAAA,GAAAA,GAAAA,CAAAA,CAAAA,GAAAA,KAAAA,EAIAA,CAAAA,CAAAA,CAAAA,CAAAA,GAAAA,GAAAA,CAAAA,CAAAA,GAAAA,KAAAA,EAIAA,CAAAA,CAAAA,CAAAA,CAAAA,GAAAA,GAAAA,CAAAA,CAAAA,GAAAA,KACD;AAAA,CArBD,CAAWA,CAAAA,KAAAA,CAAAA,GAAAA,CAAAA,CAAAA,CAAAA,CAAAA;AAwBX,IAAMC,CAAAA,GAA4B,CAChC,iBAAA,EACA,mBAAA,EACA,cAAA,EACA,WAAA,EACA,UAAA,EACA,aAAA,EACA,aAAA,EACA,SAAA,EACA,WAAA,EACA,SAAA,EACA,SAAA,EACA,iBAAA,EACA,aAAA,EACA,aAAA,EACA,SAAA,EACA,YAAA,EACA,aAAA,EACA,YAAA,EACA,gBAAA,EACA,YAAA,EACA,aAAA,EACA,UAAA,EACA,WAAA,EACA,WAAA,EACA,SAAA,EACA,cAAA,EACA,aAAA,EACA,WAAA,EACA,YAAA,EACA,WAAA,EACA,YAAA,EACA,YAAA,EACA,UAAA,EACA,SAAA,EACA,YAAA,EACA,QAAA,EACA,SAAA,EACA,QAAA,EACA,UAAA,EACA,QAAA,CAAA,CACAC,MAAAA,CACA,UAACC,CAAAA,EAAKC,CAAAA,EAAAA;IAEJ,OADAD,CAAAA,CAAIC,CAAAA,CAAEC,WAAAA,CAAAA,CAAAA,CAAAA,GAAiBD,CAAAA,EAChBD,CACT;EAAA,CAAA,EACA;IAAEG,GAAAA,EAAK;EAAA,CAAA,CAAA;EAGHC,CAAAA,GAAsB;IAC1BC,GAAAA,EAAK,GAAA;IACLC,IAAAA,EAAM,GAAA;IACNC,EAAAA,EAAI,GAAA;IACJC,EAAAA,EAAI,GAAA;IACJC,IAAAA,EAAM,GAAA;IACNC,IAAAA,EAAM;EAAA,CAAA;EAGFC,CAAAA,GAA+B,CAAC,OAAA,EAAS,QAAA,CAAA;EAkCzCC,CAAAA,GACJ,8GAAA;EAIIC,CAAAA,GAA0B,UAAA;EAC1BC,CAAAA,GAAc,SAAA;EACdC,CAAAA,GAAe,2BAAA;EACfC,CAAAA,GAAmC,UAAA;EACnCC,CAAAA,GAAe,UAAA;EACfC,CAAAA,GAAmB,iCAAA;EACnBC,CAAAA,GACJ,oEAAA;EACIC,CAAAA,GAAe,iCAAA;EACfC,CAAAA,GAAgB,kCAAA;EAChBC,CAAAA,GAAwB,cAAA;EACxBC,CAAAA,GAAe,QAAA;EAkCfC,CAAAA,GAAa,qDAAA;EAEbC,CAAAA,GAAuB,gBAAA;EACvBC,CAAAA,GAAa,KAAA;EACbC,CAAAA,GAAiB,kCAAA;EACjBC,CAAAA,GAAa,iBAAA;EACbC,CAAAA,GAAY,kDAAA;EACZC,CAAAA,GACJ,kDAAA;EACIC,CAAAA,GAAmB,qCAAA;EAwBnBC,CAAAA,GACJ,uIAAA;EAEIC,CAAAA,GAAmB,gDAAA;EAEnBC,CAAAA,GAAiB,sBAAA;EAKjBC,CAAAA,GAAqB,mCAAA;EAErBC,CAAAA,GACJ,uEAAA;EACIC,CAAAA,GAAkB,UAAA;EAClBC,CAAAA,GAA2B,sCAAA;EAC3BC,CAAAA,GAAyB,oBAAA;EACzBC,CAAAA,GAAkB,sBAAA;EAClBC,CAAAA,GAA8B,aAAA;EAC9BC,CAAAA,GACJ,+DAAA;EAEIC,CAAAA,GAA0B,+CAAA;EAC1BC,CAAAA,GAAoB,8BAAA;EACpBC,CAAAA,GAAmB,6BAAA;EACnBC,CAAAA,GAAoB,UAAA;EACpBC,CAAAA,GAA2B,oCAAA;EAC3BC,CAAAA,GAAQ,KAAA;EACRC,CAAAA,GAAmB,gBAAA;EACnBC,CAAAA,GAAqB,YAAA;EACrBC,CAAAA,GAAmB,WAAA;EACnBC,CAAAA,GAAoB,WAAA;EAOpBC,CAAAA,GACJ,+EAAA;EAMIC,CAAAA,GAAc,IAAIC,MAAAA,CAAAA,YAAAA,GAAoBF,CAAAA,GAAAA,eAAAA,CAAAA;EAKtCG,CAAAA,GAAoB,IAAID,MAAAA,CAAAA,SAAAA,GAAiBF,CAAAA,GAAAA,gBAAAA,CAAAA;EAKzCI,CAAAA,GAAgB,IAAIF,MAAAA,CAAAA,KAAAA,GAAaF,CAAAA,GAAAA,IAAAA,CAAAA;EAKjCK,CAAAA,GAAyB,IAAIH,MAAAA,CAAAA,KAAAA,GAAaF,CAAAA,GAAAA,IAAAA,CAAAA;EAE1CM,EAAAA,GAAiB,qBAAA;EAEjBC,EAAAA,GACJ,4EAAA;EAEIC,EAAAA,GAAyB,MAAA;EAEzBC,EAAAA,GAA0B,WAAA;EAE1BC,EAAAA,GAAiB,YAAA;EAMjBC,EAAAA,GAAkB,QAAA;EAClBC,EAAAA,GAAoB,eAAA;EAGpBC,EAAAA,GAAsB,aAAA;EACtBC,EAAAA,GAAwB,WAAA;AAE9B,SAASC,EAAAA,CAAuBC,CAAAA,EAAAA;EAC9B,OACE,OAAA,IAZuB,CAAA,KAatBA,CAAAA,GAAmBH,EAAAA,GAAsBC,EAAAA,CAAAA,GAC1C,KAEJ;AAAA;AAIA,IAAMG,EAAAA,GAA2BF,EAAAA,CApBN,CAAA,CAAA;EAqBrBG,EAAAA,GAA6BH,EAAAA,CApBN,CAAA,CAAA;AAsB7B,SAASI,EAAAA,CAA4BH,CAAAA,EAAAA;EACnC,OAAA,IAAWd,MAAAA,CACT,GAAA,IAzBuB,CAAA,KA0BpBc,CAAAA,GAAmBC,EAAAA,GAA2BC,EAAAA,CAAAA,CAErD;AAAA;AAEA,IAAME,EAAAA,GAA6BD,EAAAA,CA9BR,CAAA,CAAA;EA+BrBE,EAAAA,GAA+BF,EAAAA,CA9BR,CAAA,CAAA;AAgC7B,SAASG,EAAAA,CAAsBN,CAAAA,EAAAA;EAQ7B,OAAA,IAAWd,MAAAA,CACT,GAAA,IA1CuB,CAAA,KA2CpBc,CAAAA,GACGC,EAAAA,GACAC,EAAAA,CAAAA,GAHN,qBAAA,IA1CuB,CAAA,KAgDpBF,CAAAA,GAAmBH,EAAAA,GAAsBC,EAAAA,CAAAA,GAC1C,oBAAA,EACF,IAAA,CAEJ;AAAA;AAEA,IAAMS,EAAAA,GAAsBD,EAAAA,CAtDD,CAAA,CAAA;EAuDrBE,EAAAA,GAAwBF,EAAAA,CAtDD,CAAA,CAAA;AA0D7B,SAASG,EAAAA,CAAkBT,CAAAA,EAAAA;EACzB,IAAMU,CAAAA,GA5DmB,CAAA,KA4DVV,CAAAA,GAAmBH,EAAAA,GAAsBC,EAAAA;EAExD,OAAA,IAAWZ,MAAAA,CACT,QAAA,GACEwB,CAAAA,GADF,mCAAA,GAKEA,CAAAA,GACA,MAAA,GACAA,CAAAA,GAPF,oBAAA,CAaJ;AAAA;AAEA,IAAMC,EAAAA,GAAiBF,EAAAA,CA9EI,CAAA,CAAA;EA+ErBG,EAAAA,GAAmBH,EAAAA,CA9EI,CAAA,CAAA;AAgF7B,SAASI,EAAAA,CACPC,CAAAA,EACAd,CAAAA,EAAAA;EAIA,IAAMe,CAAAA,GAvFmB,CAAA,KAuFTf,CAAAA;IACVgB,CAAAA,GAASD,CAAAA,GAAUJ,EAAAA,GAAiBC,EAAAA;IACpCK,CAAAA,GAAcF,CAAAA,GAAUR,EAAAA,GAAsBC,EAAAA;IAC9CU,CAAAA,GAAqBH,CAAAA,GACvBX,EAAAA,GACAC,EAAAA;EAEJ,OAAO;IACLc,KAAAA,EAAAA,SAAAA,CAAMC,CAAAA,EAAQC,CAAAA,EAAOC,CAAAA,EAAAA;MASnB,IAAMC,CAAAA,GAAgB3B,EAAAA,CAAkB4B,IAAAA,CAAKF,CAAAA,CAAAA;MAG7C,OAAIC,CAAAA,KAFgBF,CAAAA,CAAMI,IAAAA,IAAAA,CAAUJ,CAAAA,CAAMK,MAAAA,IAAAA,CAAWL,CAAAA,CAAMM,MAAAA,CAAAA,GAKlDX,CAAAA,CAAOQ,IAAAA,CAFdJ,CAAAA,GAASG,CAAAA,CAAc,CAAA,CAAA,GAAKH,CAAAA,CAAAA,GAAAA,IAMhC;IAAA,CAAA;IACAQ,KAAAA,EAAAA,CAAAA;IACAC,KAAAA,EAAAA,SAAAA,CAAMC,CAAAA,EAASD,CAAAA,EAAOR,CAAAA,EAAAA;MACpB,IACMU,CAAAA,GAAQhB,CAAAA,GAAAA,CADCe,CAAAA,CAAQ,CAAA,CAAA,GAAA,KACWE,CAAAA;QAC5BC,CAAAA,GAAQH,CAAAA,CAAQ,CAAA,CAAA,CAGnBI,OAAAA,CAAQzF,CAAAA,EAAa,IAAA,CAAA,CACrB0E,KAAAA,CAAMF,CAAAA,CAAAA;QAELkB,CAAAA,GAAAA,CAAwB,CAAA;MA+D5B,OAAO;QACLF,KAAAA,EA/DkBA,CAAAA,CAAMG,GAAAA,CAAI,UAAUC,CAAAA,EAAMC,CAAAA,EAAAA;UAE5C,IAAMC,CAAAA,GAAQrB,CAAAA,CAAmBM,IAAAA,CAAKa,CAAAA,CAAAA,CAAM,CAAA,CAAA,CAAGG,MAAAA;YAIzCC,CAAAA,GAAa,IAAIvD,MAAAA,CAAO,OAAA,GAAUqD,CAAAA,GAAQ,GAAA,EAAK,IAAA,CAAA;YAG/CG,CAAAA,GAAUL,CAAAA,CAEbH,OAAAA,CAAQO,CAAAA,EAAY,EAAA,CAAA,CAEpBP,OAAAA,CAAQhB,CAAAA,EAAoB,EAAA,CAAA;YASzByB,CAAAA,GAAaL,CAAAA,KAAML,CAAAA,CAAMO,MAAAA,GAAS,CAAA;YASlCK,CAAAA,GAAAA,CAR8C,CAAA,KAA7BH,CAAAA,CAAQE,OAAAA,CAAQ,MAAA,CAAA,IASlBD,CAAAA,IAAcR,CAAAA;UACnCA,CAAAA,GAAwBU,CAAAA;UAKxB,IAMIG,CAAAA;YANEF,CAAAA,GAAiBzB,CAAAA,CAAMK,MAAAA;YACvBqB,CAAAA,GAAe1B,CAAAA,CAAMI,IAAAA;UAC3BJ,CAAAA,CAAMI,IAAAA,GAAAA,CAAO,CAAA,EAKToB,CAAAA,IACFxB,CAAAA,CAAMK,MAAAA,GAAAA,CAAS,CAAA,EACfsB,CAAAA,GAAkBN,CAAAA,CAAQR,OAAAA,CAAQvC,EAAAA,EAAiB,MAAA,CAAA,KAEnD0B,CAAAA,CAAMK,MAAAA,GAAAA,CAAS,CAAA,EACfsB,CAAAA,GAAkBN,CAAAA,CAAQR,OAAAA,CAAQvC,EAAAA,EAAiB,EAAA,CAAA,CAAA;UAGrD,IAAMsD,CAAAA,GAASpB,CAAAA,CAAMmB,CAAAA,EAAiB3B,CAAAA,CAAAA;UAMtC,OAHAA,CAAAA,CAAMK,MAAAA,GAASoB,CAAAA,EACfzB,CAAAA,CAAMI,IAAAA,GAAOsB,CAAAA,EAENE,CACT;QAAA,CAAA,CAAA;QAIElC,OAAAA,EAASA,CAAAA;QACTgB,KAAAA,EAAOA;MAAAA,CAEX;IAAA,CAAA;IACAmB,MAAAA,EAAAA,SAAAA,CAAOC,CAAAA,EAAMC,CAAAA,EAAQ/B,CAAAA,EAAAA;MAGnB,OACEP,CAAAA,CAHUqC,CAAAA,CAAKpC,OAAAA,GAAU,IAAA,GAAO,IAAA,EAAA;QAI9BsC,GAAAA,EAAKhC,CAAAA,CAAMgC,GAAAA;QACXtB,KAAAA,EAAAA,IAAAA,KAAOoB,CAAAA,CAAKnD,IAAAA,GAAgCmD,CAAAA,CAAKpB,KAAAA,GAAAA,KAAQC;MAAAA,CAAAA,EAExDmB,CAAAA,CAAKlB,KAAAA,CAAMG,GAAAA,CAAI,UAA0BC,CAAAA,EAAMC,CAAAA,EAAAA;QAC9C,OAAOxB,CAAAA,CAAAA,IAAAA,EAAAA;UAAIuC,GAAAA,EAAKf;QAAAA,CAAAA,EAAIc,CAAAA,CAAOf,CAAAA,EAAMhB,CAAAA,CAAAA,CACnC;MAAA,CAAA,CAAA,CAGN;IAAA;EAAA,CAEJ;AAAA;AAEA,IAGMiC,EAAAA,GAAS,IAAIpE,MAAAA,CACjB,8IAAA,CAAA;EAEIqE,EAAAA,GAAU,yDAAA;EAEVC,EAAAA,GAA+B,CACnC9G,CAAAA,EACAI,CAAAA,EACAC,CAAAA,EACAS,CAAAA,EACAE,CAAAA,EACAD,CAAAA,EACAI,CAAAA,EACAQ,CAAAA,EACAkC,EAAAA,EACAI,EAAAA,EACAH,EAAAA,EACAI,EAAAA,CAAAA;EAGI6C,EAAAA,GAAAA,EAAAA,CAAcC,MAAAA,CACfF,EAAAA,EAAAA,CAhSe,wBAAA,EAkSlB7F,CAAAA,EACAI,CAAAA,CAAAA,CAAAA;AAAAA,SAsBcmG,EAAAA,CAAQH,CAAAA,EAAAA;EACtB,OAAOA,CAAAA,CACJ7B,OAAAA,CAAQ,mBAAA,EAAqB,GAAA,CAAA,CAC7BA,OAAAA,CAAQ,OAAA,EAAS,GAAA,CAAA,CACjBA,OAAAA,CAAQ,OAAA,EAAS,GAAA,CAAA,CACjBA,OAAAA,CAAQ,aAAA,EAAe,GAAA,CAAA,CACvBA,OAAAA,CAAQ,aAAA,EAAe,GAAA,CAAA,CACvBA,OAAAA,CAAQ,OAAA,EAAS,GAAA,CAAA,CACjBA,OAAAA,CAAQ,iBAAA,EAAmB,GAAA,CAAA,CAC3BA,OAAAA,CAAQ,aAAA,EAAe,GAAA,CAAA,CACvBA,OAAAA,CAAQ,SAAA,EAAW,GAAA,CAAA,CACnBA,OAAAA,CAAQ,eAAA,EAAiB,EAAA,CAAA,CACzBA,OAAAA,CAAQ,KAAA,EAAO,GAAA,CAAA,CACfrG,WAAAA,CAAAA,CACL;AAAA;AAEA,SAASsI,EAAAA,CAAuBC,CAAAA,EAAAA;EAC9B,OAAIrF,CAAAA,CAAkB+E,IAAAA,CAAKM,CAAAA,CAAAA,GAClB,OAAA,GACEvF,CAAAA,CAAmBiF,IAAAA,CAAKM,CAAAA,CAAAA,GAC1B,QAAA,GACEtF,CAAAA,CAAiBgF,IAAAA,CAAKM,CAAAA,CAAAA,GACxB,MAAA,GAAA,IAIX;AAAA;AAEA,SAASC,EAAAA,CACPjD,CAAAA,EACAS,CAAAA,EACAR,CAAAA,EACAiD,CAAAA,EAAAA;EAEA,IAAMC,CAAAA,GAAclD,CAAAA,CAAMmD,OAAAA;EAC1BnD,CAAAA,CAAMmD,OAAAA,GAAAA,CAAU,CAAA;EAChB,IAAIC,CAAAA,GAAWrD,CAAAA,CACZsD,IAAAA,CAAAA,CAAAA,CAEAC,KAAAA,CAAM,sDAAA,CAAA,CACNjJ,MAAAA,CAAO,UAACkJ,CAAAA,EAAOC,CAAAA,EAAAA;IAQd,OAPwB,GAAA,KAApBA,CAAAA,CAASH,IAAAA,CAAAA,CAAAA,GACXE,CAAAA,CAAME,IAAAA,CACJR,CAAAA,GACI;MAAEtE,IAAAA,EAAAA;IAAAA,CAAAA,GACF;MAAEA,IAAAA,EAAAA,IAAAA;MAAqB+E,IAAAA,EAAMF;IAAAA,CAAAA,CAAAA,GAEf,EAAA,KAAbA,CAAAA,IAAiBD,CAAAA,CAAME,IAAAA,CAAKE,KAAAA,CAAMJ,CAAAA,EAAO/C,CAAAA,CAAMgD,CAAAA,EAAUxD,CAAAA,CAAAA,CAAAA,EAC3DuD,CACT;EAAA,CAAA,EAAG,EAAA,CAAA;EACLvD,CAAAA,CAAMmD,OAAAA,GAAUD,CAAAA;EAEhB,IAAIU,CAAAA,GAAQ,CAAC,EAAA,CAAA;EAmBb,OAlBAR,CAAAA,CAASS,OAAAA,CAAQ,UAAU/B,CAAAA,EAAMb,CAAAA,EAAAA;IAAAA,IAAAA,KAC3Ba,CAAAA,CAAKnD,IAAAA,GAEG,CAAA,KAANsC,CAAAA,IAAWA,CAAAA,KAAMmC,CAAAA,CAASjC,MAAAA,GAAS,CAAA,IAErCyC,CAAAA,CAAMH,IAAAA,CAAK,EAAA,CAAA,IAAA,IAAA,KAIX3B,CAAAA,CAAKnD,IAAAA,IACe,IAAA,IAAnByE,CAAAA,CAASnC,CAAAA,GAAI,CAAA,CAAA,IAAA,IAAA,KACZmC,CAAAA,CAASnC,CAAAA,GAAI,CAAA,CAAA,CAAGtC,IAAAA,KAElBmD,CAAAA,CAAK4B,IAAAA,GAAO5B,CAAAA,CAAK4B,IAAAA,CAAKI,OAAAA,CAAAA,CAAAA,CAAAA,EAExBF,CAAAA,CAAMA,CAAAA,CAAMzC,MAAAA,GAAS,CAAA,CAAA,CAAGsC,IAAAA,CAAK3B,CAAAA,CAAAA,CAEjC;EAAA,CAAA,CAAA,EACO8B,CACT;AAAA;AAoBA,SAASI,EAAAA,CACPvD,CAAAA,EACAD,CAAAA,EACAR,CAAAA,EAAAA;EAMAA,CAAAA,CAAMK,MAAAA,GAAAA,CAAS,CAAA;EACf,IAAM4D,CAAAA,GAAQxD,CAAAA,CAAQ,CAAA,CAAA,GAAqBA,CAAAA,CAAQ,CAAA,CAAA,CA3B1BI,OAAAA,CAAQtD,CAAAA,EAAkB,EAAA,CAAA,CAAI+F,KAAAA,CAAM,GAAA,CAAA,CAE5CvC,GAAAA,CAAI+B,EAAAA,CAAAA,GAyBoC,EAAA;IACnDc,CAAAA,GAAQnD,CAAAA,CAAQ,CAAA,CAAA,GAvBxB,UACEV,CAAAA,EACAS,CAAAA,EACAR,CAAAA,EAAAA;MAIA,OAFiBD,CAAAA,CAAOsD,IAAAA,CAAAA,CAAAA,CAAOC,KAAAA,CAAM,IAAA,CAAA,CAErBvC,GAAAA,CAAI,UAAUgD,CAAAA,EAAAA;QAC5B,OAAOf,EAAAA,CAAce,CAAAA,EAASvD,CAAAA,EAAOR,CAAAA,EAAAA,CAAO,CAAA,CAC9C;MAAA,CAAA,CACF;IAAA,CAa6BkE,CAAgBzD,CAAAA,CAAQ,CAAA,CAAA,EAAID,CAAAA,EAAOR,CAAAA,CAAAA,GAAS,EAAA;IACjEmE,CAAAA,GAASnB,EAAAA,CAAcvC,CAAAA,CAAQ,CAAA,CAAA,EAAID,CAAAA,EAAOR,CAAAA,EAAAA,CAAAA,CAAS4D,CAAAA,CAAMzC,MAAAA,CAAAA;EAG/D,OAFAnB,CAAAA,CAAMK,MAAAA,GAAAA,CAAS,CAAA,EAERuD,CAAAA,CAAMzC,MAAAA,GACT;IACE8C,KAAAA,EAAOA,CAAAA;IACPL,KAAAA,EAAOA,CAAAA;IACPO,MAAAA,EAAQA,CAAAA;IACRxF,IAAAA,EAAAA;EAAAA,CAAAA,GAEF;IACEyF,QAAAA,EAAUD,CAAAA;IACVxF,IAAAA,EAAAA;EAAAA,CAER;AAAA;AAEA,SAAS0F,EAAAA,CAAcvC,CAAAA,EAAMwC,CAAAA,EAAAA;EAC3B,OAA+B,IAAA,IAAxBxC,CAAAA,CAAKmC,KAAAA,CAAMK,CAAAA,CAAAA,GACd,CAAA,CAAA,GACA;IACEC,SAAAA,EAAWzC,CAAAA,CAAKmC,KAAAA,CAAMK,CAAAA;EAAAA,CAE9B;AAAA;AAoKA,SAAS0B,EAAAA,CAAYC,CAAAA,EAAAA;EACnB,OAAA,UAAsBlG,CAAAA,EAAQC,CAAAA,EAAAA;IAC5B,OAAIA,CAAAA,CAAMK,MAAAA,GACD4F,CAAAA,CAAM9F,IAAAA,CAAKJ,CAAAA,CAAAA,GAAAA,IAItB;EAAA,CACF;AAAA;AAGA,SAASmG,EAAAA,CAAkBD,CAAAA,EAAAA;EACzB,OAAA,UAAsBlG,CAAAA,EAAgBC,CAAAA,EAAAA;IACpC,OAAIA,CAAAA,CAAMK,MAAAA,IAAUL,CAAAA,CAAMM,MAAAA,GACjB2F,CAAAA,CAAM9F,IAAAA,CAAKJ,CAAAA,CAAAA,GAAAA,IAItB;EAAA,CACF;AAAA;AAGA,SAASoG,EAAAA,CAAWF,CAAAA,EAAAA;EAClB,OAAA,UAAsBlG,CAAAA,EAAgBC,CAAAA,EAAAA;IACpC,OAAIA,CAAAA,CAAMK,MAAAA,IAAUL,CAAAA,CAAMM,MAAAA,GAAAA,IAAAA,GAGjB2F,CAAAA,CAAM9F,IAAAA,CAAKJ,CAAAA,CAEtB;EAAA,CACF;AAAA;AAGA,SAASqG,EAAAA,CAAcH,CAAAA,EAAAA;EACrB,OAAA,UAAsBlG,CAAAA,EAAAA;IACpB,OAAOkG,CAAAA,CAAM9F,IAAAA,CAAKJ,CAAAA,CACpB;EAAA,CACF;AAAA;AAEA,SAASsG,EAAAA,CACPtG,CAAAA,EACAC,CAAAA,EACAsG,CAAAA,EAAAA;EAEA,IAAItG,CAAAA,CAAMK,MAAAA,IAAUL,CAAAA,CAAMM,MAAAA,EACxB,OAAA,IAAA;EAGF,IAAIgG,CAAAA,IAAAA,CAAuBA,CAAAA,CAAmBC,QAAAA,CAAS,IAAA,CAAA,EAErD,OAAA,IAAA;EAGF,IAAIzG,CAAAA,GAAQ,EAAA;EAEZC,CAAAA,CAAOuD,KAAAA,CAAM,IAAA,CAAA,CAAMkD,KAAAA,CAAM,UAAA,CAAA,EAAA;IAEvB,OAAA,CAAIrE,EAAAA,CAA6BI,IAAAA,CAAK,UAAA,CAAA,EAAA;MAAA,OAAS0D,CAAAA,CAAMxD,IAAAA,CAAKgE,CAAAA,CAAK;IAAA,CAAA,CAAA,KAG/D3G,CAAAA,IAAS2G,CAAAA,GAAO,IAAA,EACTA,CAAAA,CAAKpD,IAAAA,CAAAA,CAAAA,CACd;EAAA,CAAA,CAAA;EAEA,IAAMqD,CAAAA,GAAW5G,CAAAA,CAAMgE,OAAAA,CAAAA,CAAAA;EACvB,OAAgB,EAAA,IAAZ4C,CAAAA,GAAAA,IAAAA,GAIG,CAAC5G,CAAAA,EAAO4G,CAAAA,CACjB;AAAA;AAEA,SAAS3B,EAAAA,CAAY4B,CAAAA,EAAAA;EACnB,IAAA;IAGE,IAFgBC,kBAAAA,CAAmBD,CAAAA,CAAAA,CAAK9F,OAAAA,CAAQ,iBAAA,EAAmB,EAAA,CAAA,CAEvDf,KAAAA,CAAM,4CAAA,CAAA,EAQhB;EAcJ,CAZE,QAAO+G,CAAAA,EAAAA;IAWP,OAAA,IACF;EAAA;EAEA,OAAOF,CACT;AAAA;AAEA,SAASG,EAAAA,CAAYC,CAAAA,EAAAA;EACnB,OAAOA,CAAAA,CAAalG,OAAAA,CAAQxC,EAAAA,EAAgB,IAAA,CAC9C;AAAA;AAKA,SAAS2I,EAAAA,CACPxG,CAAAA,EACA4D,CAAAA,EACApE,CAAAA,EAAAA;EAEA,IAAMiH,CAAAA,GAAoBjH,CAAAA,CAAMK,MAAAA,IAAAA,CAAU,CAAA;IACpC6G,CAAAA,GAAoBlH,CAAAA,CAAMM,MAAAA,IAAAA,CAAU,CAAA;EAC1CN,CAAAA,CAAMK,MAAAA,GAAAA,CAAS,CAAA,EACfL,CAAAA,CAAMM,MAAAA,GAAAA,CAAS,CAAA;EACf,IAAMsB,CAAAA,GAASpB,CAAAA,CAAM4D,CAAAA,EAAUpE,CAAAA,CAAAA;EAG/B,OAFAA,CAAAA,CAAMK,MAAAA,GAAS4G,CAAAA,EACfjH,CAAAA,CAAMM,MAAAA,GAAS4G,CAAAA,EACRtF,CACT;AAAA;AAKA,SAASuF,EAAAA,CACP3G,CAAAA,EACA4D,CAAAA,EACApE,CAAAA,EAAAA;EAEA,IAAMiH,CAAAA,GAAoBjH,CAAAA,CAAMK,MAAAA,IAAAA,CAAU,CAAA;IACpC6G,CAAAA,GAAoBlH,CAAAA,CAAMM,MAAAA,IAAAA,CAAU,CAAA;EAC1CN,CAAAA,CAAMK,MAAAA,GAAAA,CAAS,CAAA,EACfL,CAAAA,CAAMM,MAAAA,GAAAA,CAAS,CAAA;EACf,IAAMsB,CAAAA,GAASpB,CAAAA,CAAM4D,CAAAA,EAAUpE,CAAAA,CAAAA;EAG/B,OAFAA,CAAAA,CAAMK,MAAAA,GAAS4G,CAAAA,EACfjH,CAAAA,CAAMM,MAAAA,GAAS4G,CAAAA,EACRtF,CACT;AAAA;AAEA,SAASwF,EAAAA,CACP5G,CAAAA,EACA4D,CAAAA,EACApE,CAAAA,EAAAA;EAEA,IAAMiH,CAAAA,GAAoBjH,CAAAA,CAAMK,MAAAA,IAAAA,CAAU,CAAA;EAC1CL,CAAAA,CAAMK,MAAAA,GAAAA,CAAS,CAAA;EACf,IAAMuB,CAAAA,GAASpB,CAAAA,CAAM4D,CAAAA,EAAUpE,CAAAA,CAAAA;EAE/B,OADAA,CAAAA,CAAMK,MAAAA,GAAS4G,CAAAA,EACRrF,CACT;AAAA;AAEA,IAAMyF,EAAAA,GAED,SAAA,CAAC5G,CAAAA,EAASD,CAAAA,EAAOR,CAAAA,EAAAA;EACpB,OAAO;IACLoE,QAAAA,EAAU4C,EAAAA,CAAYxG,CAAAA,EAAOC,CAAAA,CAAQ,CAAA,CAAA,EAAIT,CAAAA;EAAAA,CAE7C;AAAA,CAAA;AAEA,SAASsH,EAAAA,CAAAA,EAAAA;EACP,OAAO,CAAA,CACT;AAAA;AAEA,SAASC,EAAAA,CAAAA,EAAAA;EACP,OAAA,IACF;AAAA;AAwDA,SAASW,EAAAA,CAAAA,EAAAA;EACP,OAAO,EAAA,CAAA,KAAA,CAAA,IAAA,CAAA,SAAA,CAAA,CAAKC,MAAAA,CAAOC,OAAAA,CAAAA,CAASC,IAAAA,CAAK,GAAA,CACnC;AAAA;AAEA,SAASC,EAAAA,CAAIC,CAAAA,EAAaC,CAAAA,EAAcC,CAAAA,EAAAA;EAItC,KAHA,IAAIC,CAAAA,GAAMH,CAAAA,EACJI,CAAAA,GAAQH,CAAAA,CAAKlF,KAAAA,CAAM,GAAA,CAAA,EAElBqF,CAAAA,CAAMxH,MAAAA,IAAAA,KAGCR,CAAAA,MAFZ+H,CAAAA,GAAMA,CAAAA,CAAIC,CAAAA,CAAM,CAAA,CAAA,CAAA,CAAA,GAGXA,CAAAA,CAAMC,KAAAA,CAAAA,CAAAA;EAGb,OAAOF,CAAAA,IAAOD,CAChB;AAAA;AAEA,SAASI,EAAAA,CAAOC,CAAAA,EAAaC,CAAAA,EAAAA;EAC3B,IAAMC,CAAAA,GAAWV,EAAAA,CAAIS,CAAAA,EAAWD,CAAAA,CAAAA;EAEhC,OAAKE,CAAAA,GAEsB,UAAA,IAAA,OAAbA,CAAAA,IACS,QAAA,IAAA,OAAbA,CAAAA,IAAyB,QAAA,IAAYA,CAAAA,GAC3CA,CAAAA,GACAV,EAAAA,CAAIS,CAAAA,EAAcD,CAAAA,GAAAA,YAAAA,EAAiBA,CAAAA,CAAAA,GALjBA,CAMxB;AAAA;AAAA,SAEgBG,EAAAA,CACdC,CAAAA,EACAC,CAAAA,EAAAA;EAAAA,IAAAA,CAAAA;EAAAA,KAAAA,CAAAA,KADAD,CAAAA,KAAAA,CAAAA,GAAmB,EAAA,CAAA,EAAA,KAAA,CAAA,KACnBC,CAAAA,KAAAA,CAAAA,GAAiC,CAAA,CAAA,CAAA,EAEjCA,CAAAA,CAAQJ,SAAAA,GAAYI,CAAAA,CAAQJ,SAAAA,IAAa,CAAA,CAAA,EACzCI,CAAAA,CAAQtG,OAAAA,GAAUsG,CAAAA,CAAQtG,OAAAA,IAAWA,EAAAA,EACrCsG,CAAAA,CAAQzO,mBAAAA,GAAsByO,CAAAA,CAAQzO,mBAAAA,GAAmB0O,CAAAA,CAAAA,CAAAA,CAAAA,EAChD1O,CAAAA,EAAwByO,CAAAA,CAAQzO,mBAAAA,CAAAA,GACrCA,CAAAA;EAEJ,IAAM2O,CAAAA,GAAkBF,CAAAA,CAAQG,aAAAA,IAAiBC,CAAAA,CAAMD,aAAAA;EAIvD,SAAS7J,CAAAA,CAEPqJ,CAAAA,EACAU,CAAAA,EAAAA;IAMA,IAAMC,CAAAA,GAAgBnB,EAAAA,CAAIa,CAAAA,CAAQJ,SAAAA,EAAcD,CAAAA,GAAAA,QAAAA,EAAa,CAAA,CAAA,CAAA;IAE7D,OAAOO,CAAAA,CAAe1F,KAAAA,CAAAA,KAAAA,CAAAA,EAAAA,CACpBkF,EAAAA,CAAOC,CAAAA,EAAKK,CAAAA,CAAQJ,SAAAA,CAAAA,EAAUK,CAAAA,CAAAA,CAAAA,CAAAA,EAEzBI,CAAAA,EACAC,CAAAA,EAAAA;MACHC,SAAAA,EAAWxB,EAAAA,CAAAA,IAAAA,IAAGsB,CAAAA,GAAAA,KAAAA,CAAAA,GAAAA,CAAAA,CAAOE,SAAAA,EAAWD,CAAAA,CAAcC,SAAAA,CAAAA,IAAAA,KAAc/I;IAAAA,CAAAA,CAAAA,CAAAA,CAAS0B,MAAAA,CAAAA,EAAAA,CAAAA,KAAAA,CAAAA,IAAAA,CAAAA,SAAAA,EAAAA,CAAAA,CAAAA,CAAAA,CAI3E;EAAA;EAEA,SAASsH,CAAAA,CAAQrH,CAAAA,EAAAA;IACfA,CAAAA,GAAQA,CAAAA,CAAMzB,OAAAA,CAAQ5E,CAAAA,EAAgB,EAAA,CAAA;IAEtC,IAAIoE,CAAAA,GAAAA,CAAS,CAAA;IAET8I,CAAAA,CAAQS,WAAAA,GACVvJ,CAAAA,GAAAA,CAAS,CAAA,GACC8I,CAAAA,CAAQU,UAAAA,KAKlBxJ,CAAAA,GAAAA,CAAkD,CAAA,KAAzChD,CAAAA,CAAyBoF,IAAAA,CAAKH,CAAAA,CAAAA,CAAAA;IAczC,KAXA,IAAMwH,CAAAA,GAAMC,EAAAA,CACVC,EAAAA,CACE3J,CAAAA,GACIiC,CAAAA,GACGA,CAAAA,CAAMwB,OAAAA,CAAAA,CAAAA,CAAUjD,OAAAA,CAAQ1C,EAAAA,EAAwB,EAAA,CAAA,GAAA,MAAA,EACvD;MACEkC,MAAAA,EAAAA;IAAAA,CAAAA,CAAAA,CAAAA,EAM2B,QAAA,IAAA,OAAxByJ,CAAAA,CAAIA,CAAAA,CAAI3I,MAAAA,GAAS,CAAA,CAAA,IAAA,CACvB2I,CAAAA,CAAIA,CAAAA,CAAI3I,MAAAA,GAAS,CAAA,CAAA,CAAGkC,IAAAA,CAAAA,CAAAA,GAErByG,CAAAA,CAAIG,GAAAA,CAAAA,CAAAA;IAGN,IAAwB,IAAA,KAApBd,CAAAA,CAAQe,OAAAA,EACV,OAAOJ,CAAAA;IAGT,IACIK,CAAAA;MADED,CAAAA,GAAUf,CAAAA,CAAQe,OAAAA,KAAY7J,CAAAA,GAAS,MAAA,GAAS,KAAA,CAAA;IAGtD,IAAIyJ,CAAAA,CAAI3I,MAAAA,GAAS,CAAA,IAAKgI,CAAAA,CAAQiB,YAAAA,EAC5BD,CAAAA,GAAML,CAAAA,CAAAA,KAAAA;MAAAA,IACkB,CAAA,KAAfA,CAAAA,CAAI3I,MAAAA,EAIb,OAAmB,QAAA,IAAA,QAHnBgJ,CAAAA,GAAML,CAAAA,CAAI,CAAA,CAAA,CAAA,GAIDrK,CAAAA,CAAAA,MAAAA,EAAAA;QAAMuC,GAAAA,EAAI;MAAA,CAAA,EAASmI,CAAAA,CAAAA,GAEnBA,CAAAA;MAITA,CAAAA,GAAM,IACR;IAAA;IAEA,OAAOZ,CAAAA,CAAMD,aAAAA,CAAcY,CAAAA,EAAS;MAAElI,GAAAA,EAAK;IAAA,CAAA,EAAWmI,CAAAA,CACxD;EAAA;EAEA,SAASE,CAAAA,CAAgB3H,CAAAA,EAAAA;IACvB,IAAM4H,CAAAA,GAAa5H,CAAAA,CAAI5C,KAAAA,CAAM5E,CAAAA,CAAAA;IAC7B,OAAKoP,CAAAA,GAIEA,CAAAA,CAAWjQ,MAAAA,CAAO,UAAU0G,CAAAA,EAAKwJ,CAAAA,EAAKC,CAAAA,EAAAA;MAC3C,IAAMC,CAAAA,GAAeF,CAAAA,CAAIhJ,OAAAA,CAAQ,GAAA,CAAA;MAEjC,IAAA,CAAsB,CAAA,KAAlBkJ,CAAAA,EAAqB;QACvB,IAAMzI,CAAAA,GAxgBd,UAA+BA,CAAAA,EAAAA;YAS7B,OAAA,CANqB,CAAA,KAFDA,CAAAA,CAAIT,OAAAA,CAAQ,GAAA,CAAA,IAE4B,IAAA,KAAlCS,CAAAA,CAAIlC,KAAAA,CAAMrD,CAAAA,CAAAA,KAClCuF,CAAAA,GAAMA,CAAAA,CAAInB,OAAAA,CAAQ9D,CAAAA,EAA6B,UAAUyH,CAAAA,EAAGC,CAAAA,EAAAA;cAC1D,OAAOA,CAAAA,CAAOC,WAAAA,CAAAA,CAChB;YAAA,CAAA,CAAA,CAAA,EAGK1C,CACT;UAAA,CA8foB0I,CAAsBH,CAAAA,CAAI3H,KAAAA,CAAM,CAAA,EAAG6H,CAAAA,CAAAA,CAAAA,CAAepH,IAAAA,CAAAA,CAAAA;UACxDsB,CAAAA,GAxpBd,UAAiBjC,CAAAA,EAAAA;YACf,IAAMC,CAAAA,GAAQD,CAAAA,CAAI,CAAA,CAAA;YAClB,OAAA,CACa,GAAA,KAAVC,CAAAA,IAA2B,GAAA,KAAVA,CAAAA,KAClBD,CAAAA,CAAIvB,MAAAA,IAAU,CAAA,IACduB,CAAAA,CAAIA,CAAAA,CAAIvB,MAAAA,GAAS,CAAA,CAAA,KAAOwB,CAAAA,GAEjBD,CAAAA,CAAIE,KAAAA,CAAM,CAAA,EAAA,CAAI,CAAA,CAAA,GAEhBF,CACT;UAAA,CA8oBsBiI,CAAQJ,CAAAA,CAAI3H,KAAAA,CAAM6H,CAAAA,GAAe,CAAA,CAAA,CAAGpH,IAAAA,CAAAA,CAAAA,CAAAA;UAE5CuH,CAAAA,GAAYxQ,CAAAA,CAA0B4H,CAAAA,CAAAA,IAAQA,CAAAA;UAC9C6I,CAAAA,GAAmB9J,CAAAA,CAAI6J,CAAAA,CAAAA,GAhgBrC,UACE5I,CAAAA,EACA2C,CAAAA,EAAAA;YAEA,OAAY,OAAA,KAAR3C,CAAAA,GACK2C,CAAAA,CAAMrB,KAAAA,CAAM,MAAA,CAAA,CAAQjJ,MAAAA,CAAO,UAAUuK,CAAAA,EAAQC,CAAAA,EAAAA;cAClD,IAAM7C,CAAAA,GAAM6C,CAAAA,CAAOjC,KAAAA,CAAM,CAAA,EAAGiC,CAAAA,CAAOtD,OAAAA,CAAQ,GAAA,CAAA,CAAA;cAW3C,OAFAqD,CAAAA,CALsB5C,CAAAA,CACnBqB,IAAAA,CAAAA,CAAAA,CACAxC,OAAAA,CAAQ,WAAA,EAAa,UAAA,CAAA,EAAA;gBAAA,OAAUiE,CAAAA,CAAO,CAAA,CAAA,CAAGJ,WAAAA,CAAAA,CAAa;cAAA,CAAA,CAAA,CAAA,GAGjCG,CAAAA,CAAOjC,KAAAA,CAAMZ,CAAAA,CAAIb,MAAAA,GAAS,CAAA,CAAA,CAAGkC,IAAAA,CAAAA,CAAAA,EAE9CuB,CACT;YAAA,CAAA,EAAG,CAAA,CAAA,CAAA,GACc,MAAA,KAAR5C,CAAAA,IAA0B,KAAA,KAARA,CAAAA,GACpB+C,EAAAA,CAAYJ,CAAAA,CAAAA,IACVA,CAAAA,CAAM7E,KAAAA,CAAMnD,CAAAA,CAAAA,KAErBgI,CAAAA,GAAQA,CAAAA,CAAM/B,KAAAA,CAAM,CAAA,EAAG+B,CAAAA,CAAMxD,MAAAA,GAAS,CAAA,CAAA,CAAA,EAG1B,MAAA,KAAVwD,CAAAA,IAEiB,OAAA,KAAVA,CAAAA,IAIJA,CAAAA,CACT;UAAA,CA+dkDmG,CACxC9I,CAAAA,EACA2C,CAAAA,CAAAA;QAI2B,QAAA,IAAA,OAApBkG,CAAAA,KACNvO,CAAAA,CAAqBmG,IAAAA,CAAKoI,CAAAA,CAAAA,IACzBnO,CAAAA,CAA4B+F,IAAAA,CAAKoI,CAAAA,CAAAA,CAAAA,KAEnC9J,CAAAA,CAAI6J,CAAAA,CAAAA,GAAarB,CAAAA,CAAMwB,YAAAA,CAAapB,CAAAA,CAAQkB,CAAAA,CAAgBxH,IAAAA,CAAAA,CAAAA,CAAAA,EAAS;UACnErB,GAAAA,EAAKwI;QAAAA,CAAAA,CAAAA,CAGX;MAAA,CAAA,MAAmB,OAAA,KAARD,CAAAA,KACTxJ,CAAAA,CAAI3G,CAAAA,CAA0BmQ,CAAAA,CAAAA,IAAQA,CAAAA,CAAAA,GAAAA,CAAO,CAAA,CAAA;MAG/C,OAAOxJ,CACT;IAAA,CAAA,EAAG,CAAA,CAAA,CAAA,GAAA,IACL;EAAA;EAsBA,IAAMiK,CAAAA,GAAwD,EAAA;IACxDC,CAAAA,GAA6D,CAAA,CAAA;IAQ7DjG,EAAAA,IAAAA,CAAKkG,CAAAA,GAAAA,CAAAA,CAAAA,EAAAA,CAAAA,CAAAA,GACc;MACrBpL,KAAAA,EAAOqG,EAAAA,CAAW9K,CAAAA,CAAAA;MAClBkF,KAAAA,EAAAA,CAAAA;MACAC,KAAAA,EAAAA,SAAAA,CAAMC,CAAAA,EAASD,CAAAA,EAAOR,CAAAA,EAAAA;QACpB,OAAO;UACLoE,QAAAA,EAAU5D,CAAAA,CACRC,CAAAA,CAAQ,CAAA,CAAA,CAAGI,OAAAA,CAAQvF,CAAAA,EAAkC,EAAA,CAAA,EACrD0E,CAAAA;QAAAA,CAGN;MAAA,CAAA;MACA6B,MAAAA,EAAAA,SAAAA,CAAOC,CAAAA,EAAMC,CAAAA,EAAQ/B,CAAAA,EAAAA;QACnB,OACEP,CAAAA,CAAAA,YAAAA,EAAAA;UAAYuC,GAAAA,EAAKhC,CAAAA,CAAMgC;QAAAA,CAAAA,EACpBD,CAAAA,CAAOD,CAAAA,CAAKsC,QAAAA,EAAUpE,CAAAA,CAAAA,CAG7B;MAAA;IAAA,CAAA,EACDkL,CAAAA,CAAAA,CAAAA,CAAAA,GAEqB;MACpBpL,KAAAA,EAAOsG,EAAAA,CAAc7K,CAAAA,CAAAA;MACrBgF,KAAAA,EAAAA,CAAAA;MACAC,KAAAA,EAAO8G,EAAAA;MACPzF,MAAAA,EAAAA,SAAAA,CAAO2C,CAAAA,EAAG2G,CAAAA,EAAInL,CAAAA,EAAAA;QACZ,OAAOP,CAAAA,CAAAA,IAAAA,EAAAA;UAAIuC,GAAAA,EAAKhC,CAAAA,CAAMgC;QAAAA,CAAAA,CACxB;MAAA;IAAA,CAAA,EACDkJ,CAAAA,CAAAA,CAAAA,CAAAA,GAEyB;MACxBpL,KAAAA,EAAOqG,EAAAA,CAAW3K,CAAAA,CAAAA;MAClB+E,KAAAA,EAAAA,CAAAA;MACAC,KAAAA,EAAO8G,EAAAA;MACPzF,MAAAA,EAAAA,SAAAA,CAAO2C,CAAAA,EAAG2G,CAAAA,EAAInL,CAAAA,EAAAA;QACZ,OAAOP,CAAAA,CAAAA,IAAAA,EAAAA;UAAIuC,GAAAA,EAAKhC,CAAAA,CAAMgC;QAAAA,CAAAA,CACxB;MAAA;IAAA,CAAA,EACDkJ,CAAAA,CAAAA,CAAAA,CAAAA,GAEqB;MACpBpL,KAAAA,EAAOqG,EAAAA,CAAWzK,CAAAA,CAAAA;MAClB6E,KAAAA,EAAAA,CAAAA;MACAC,KAAAA,EAAAA,SAAAA,CAAMC,CAAAA,EAAAA;QACJ,OAAO;UACL2K,IAAAA,EAAAA,KAAMzK,CAAAA;UACN+C,IAAAA,EAAMjD,CAAAA,CAAQ,CAAA,CAAA,CAAGI,OAAAA,CAAQ,SAAA,EAAW,EAAA,CAAA,CAAIA,OAAAA,CAAQ,MAAA,EAAQ,EAAA;QAAA,CAE5D;MAAA,CAAA;MAEAgB,MAAAA,EAAAA,SAAAA,CAAOC,CAAAA,EAAMC,CAAAA,EAAQ/B,CAAAA,EAAAA;QACnB,OACEP,CAAAA,CAAAA,KAAAA,EAAAA;UAAKuC,GAAAA,EAAKhC,CAAAA,CAAMgC;QAAAA,CAAAA,EACdvC,CAAAA,CAAAA,MAAAA,EAAAA,CAAAA,CAAAA,CAAAA,CAAAA,EACMqC,CAAAA,CAAKuJ,KAAAA,EAAAA;UACT3B,SAAAA,EAAW5H,CAAAA,CAAKsJ,IAAAA,GAAAA,OAAAA,GAAetJ,CAAAA,CAAKsJ,IAAAA,GAAS;QAAA,CAAA,CAAA,EAE5CtJ,CAAAA,CAAK4B,IAAAA,CAAAA,CAId;MAAA;IAAA,CAAA,EAKAwH,CAAAA,CAAAA,CAAAA,CAAAA,GAEqB;MACrBpL,KAAAA,EAAOqG,EAAAA,CAAW1K,CAAAA,CAAAA;MAClB8E,KAAAA,EAAAA,CAAAA;MACAC,KAAAA,EAAAA,SAAAA,CAAMC,CAAAA,EAAAA;QACJ,OAAO;UAEL4K,KAAAA,EAAOhB,CAAAA,CAAgB5J,CAAAA,CAAQ,CAAA,CAAA,IAAM,EAAA,CAAA;UACrC2K,IAAAA,EAAM3K,CAAAA,CAAQ,CAAA,CAAA,IAAA,KAAME,CAAAA;UACpB+C,IAAAA,EAAMjD,CAAAA,CAAQ,CAAA,CAAA;UACd9B,IAAAA,EAAAA;QAAAA,CAEJ;MAAA;IAAA,CAAA,EACDuM,CAAAA,CAAAA,CAAAA,CAAAA,GAEsB;MACrBpL,KAAAA,EAAOoG,EAAAA,CAAkBvK,CAAAA,CAAAA;MACzB4E,KAAAA,EAAAA,CAAAA;MACAC,KAAAA,EAAAA,SAAAA,CAAMC,CAAAA,EAAAA;QACJ,OAAO;UACLiD,IAAAA,EAAMjD,CAAAA,CAAQ,CAAA;QAAA,CAElB;MAAA,CAAA;MACAoB,MAAAA,EAAAA,SAAAA,CAAOC,CAAAA,EAAMC,CAAAA,EAAQ/B,CAAAA,EAAAA;QACnB,OAAOP,CAAAA,CAAAA,MAAAA,EAAAA;UAAMuC,GAAAA,EAAKhC,CAAAA,CAAMgC;QAAAA,CAAAA,EAAMF,CAAAA,CAAK4B,IAAAA,CACrC;MAAA;IAAA,CAAA,EACDwH,CAAAA,CAAAA,CAAAA,CAAAA,GAKoB;MACnBpL,KAAAA,EAAOqG,EAAAA,CAAWrK,CAAAA,CAAAA;MAClByE,KAAAA,EAAAA,CAAAA;MACAC,KAAAA,EAAAA,SAAAA,CAAMC,CAAAA,EAAAA;QAMJ,OALAuK,CAAAA,CAAUvH,IAAAA,CAAK;UACb6H,QAAAA,EAAU7K,CAAAA,CAAQ,CAAA,CAAA;UAClB8K,UAAAA,EAAY9K,CAAAA,CAAQ,CAAA;QAAA,CAAA,CAAA,EAGf,CAAA,CACT;MAAA,CAAA;MACAoB,MAAAA,EAAQ0F;IAAAA,CAAAA,EACT2D,CAAAA,CAAAA,CAAAA,CAAAA,GAE6B;MAC5BpL,KAAAA,EAAOkG,EAAAA,CAAYjK,CAAAA,CAAAA;MACnBwE,KAAAA,EAAAA,CAAAA;MACAC,KAAAA,EAAAA,SAAAA,CAAMC,CAAAA,EAAAA;QACJ,OAAO;UACL+K,MAAAA,EAAAA,GAAAA,GAAYrC,CAAAA,CAAQtG,OAAAA,CAAQpC,CAAAA,CAAQ,CAAA,CAAA,CAAA;UACpCiD,IAAAA,EAAMjD,CAAAA,CAAQ,CAAA;QAAA,CAElB;MAAA,CAAA;MACAoB,MAAAA,EAAAA,SAAAA,CAAOC,CAAAA,EAAMC,CAAAA,EAAQ/B,CAAAA,EAAAA;QACnB,OACEP,CAAAA,CAAAA,GAAAA,EAAAA;UAAGuC,GAAAA,EAAKhC,CAAAA,CAAMgC,GAAAA;UAAKyJ,IAAAA,EAAM1G,EAAAA,CAAYjD,CAAAA,CAAK0J,MAAAA;QAAAA,CAAAA,EACxC/L,CAAAA,CAAAA,KAAAA,EAAAA;UAAKuC,GAAAA,EAAKhC,CAAAA,CAAMgC;QAAAA,CAAAA,EAAMF,CAAAA,CAAK4B,IAAAA,CAAAA,CAGjC;MAAA;IAAA,CAAA,EACuDwH,CAAAA,CAAAA,CAAAA,CAAAA,GAErC;MAClBpL,KAAAA,EAAOkG,EAAAA,CAAY9J,CAAAA,CAAAA;MACnBqE,KAAAA,EAAAA,CAAAA;MACAC,KAAAA,EAAAA,SAAAA,CAAMC,CAAAA,EAAAA;QACJ,OAAO;UACLiL,SAAAA,EAAwC,GAAA,KAA7BjL,CAAAA,CAAQ,CAAA,CAAA,CAAGjG,WAAAA,CAAAA;QAAAA,CAE1B;MAAA,CAAA;MACAqH,MAAAA,EAAAA,SAAAA,CAAOC,CAAAA,EAAMC,CAAAA,EAAQ/B,CAAAA,EAAAA;QACnB,OACEP,CAAAA,CAAAA,OAAAA,EAAAA;UACEkM,OAAAA,EAAS7J,CAAAA,CAAK4J,SAAAA;UACd1J,GAAAA,EAAKhC,CAAAA,CAAMgC,GAAAA;UACX4J,QAAAA,EAAAA,CAAAA,CAAAA;UACAjN,IAAAA,EAAK;QAAA,CAAA,CAGX;MAAA;IAAA,CAAA,EAC6CuM,CAAAA,CAAAA,CAAAA,CAAAA,GAE3B;MAClBpL,KAAAA,EAAOqG,EAAAA,CACLgD,CAAAA,CAAQ0C,kBAAAA,GAAqBzP,CAAAA,GAA0BD,CAAAA,CAAAA;MAEzDoE,KAAAA,EAAAA,CAAAA;MACAC,KAAAA,EAAAA,SAAAA,CAAMC,CAAAA,EAASD,CAAAA,EAAOR,CAAAA,EAAAA;QACpB,OAAO;UACLoE,QAAAA,EAAU4C,EAAAA,CAAYxG,CAAAA,EAAOC,CAAAA,CAAQ,CAAA,CAAA,EAAIT,CAAAA,CAAAA;UACzC8L,EAAAA,EAAI3C,CAAAA,CAAQtG,OAAAA,CAAQpC,CAAAA,CAAQ,CAAA,CAAA,CAAA;UAC5BsL,KAAAA,EAAOtL,CAAAA,CAAQ,CAAA,CAAA,CAAGU;QAAAA,CAEtB;MAAA,CAAA;MACAU,MAAAA,EAAAA,SAAAA,CAAOC,CAAAA,EAAMC,CAAAA,EAAQ/B,CAAAA,EAAAA;QACnB,OAAOP,CAAAA,CAAAA,GAAAA,GACDqC,CAAAA,CAAKiK,KAAAA,EACT;UAAED,EAAAA,EAAIhK,CAAAA,CAAKgK,EAAAA;UAAI9J,GAAAA,EAAKhC,CAAAA,CAAMgC;QAAAA,CAAAA,EAC1BD,CAAAA,CAAOD,CAAAA,CAAKsC,QAAAA,EAAUpE,CAAAA,CAAAA,CAE1B;MAAA;IAAA,CAAA,EACDkL,CAAAA,CAAAA,EAAAA,CAAAA,GAEyB;MACxBpL,KAAAA,EAAOqG,EAAAA,CAAW9J,CAAAA,CAAAA;MAClBkE,KAAAA,EAAAA,CAAAA;MACAC,KAAAA,EAAAA,SAAAA,CAAMC,CAAAA,EAASD,CAAAA,EAAOR,CAAAA,EAAAA;QACpB,OAAO;UACLoE,QAAAA,EAAU4C,EAAAA,CAAYxG,CAAAA,EAAOC,CAAAA,CAAQ,CAAA,CAAA,EAAIT,CAAAA,CAAAA;UACzC+L,KAAAA,EAAsB,GAAA,KAAftL,CAAAA,CAAQ,CAAA,CAAA,GAAa,CAAA,GAAI,CAAA;UAChC9B,IAAAA,EAAAA;QAAAA,CAEJ;MAAA;IAAA,CAAA,EACDuM,CAAAA,CAAAA,EAAAA,CAAAA,GAEqB;MAIpBpL,KAAAA,EAAOsG,EAAAA,CAAc9J,CAAAA,CAAAA;MACrBiE,KAAAA,EAAAA,CAAAA;MACAC,KAAAA,EAAAA,SAAAA,CAAMC,CAAAA,EAASD,CAAAA,EAAOR,CAAAA,EAAAA;QACpB,IAh5BqBsC,CAAAA;UAg5BrB,CAAA,GAAuB7B,CAAAA,CAAQ,CAAA,CAAA,CAAGX,KAAAA,CAAM1B,EAAAA,CAAAA;UAElC6N,CAAAA,GAAU,IAAIpO,MAAAA,CAAAA,GAAAA,GAFDmO,CAAAA,CAAAA,CAAAA,CAAAA,EAE0B,IAAA,CAAA;UACvCE,CAAAA,GAAUzL,CAAAA,CAAQ,CAAA,CAAA,CAAGI,OAAAA,CAAQoL,CAAAA,EAAS,EAAA,CAAA;UAEtCE,CAAAA,IAr5Be7J,CAAAA,GAq5BiB4J,CAAAA,EAp5BrC9J,EAAAA,CAAeG,IAAAA,CAAK,UAAA,CAAA,EAAA;YAAA,OAAKC,CAAAA,CAAEC,IAAAA,CAAKH,CAAAA,CAAM;UAAA,CAAA,CAAA,GAq5BnC8E,EAAAA,GACAJ,EAAAA,CAAAA;UAEEoF,CAAAA,GAAU3L,CAAAA,CAAQ,CAAA,CAAA,CAAGjG,WAAAA,CAAAA,CAAAA;UACrB6R,CAAAA,GAAAA,CAC+C,CAAA,KAAnDpR,CAAAA,CAA6BsG,OAAAA,CAAQ6K,CAAAA,CAAAA;UAEjC3E,CAAAA,GAAM;YACV4D,KAAAA,EAAOhB,CAAAA,CAAgB5J,CAAAA,CAAQ,CAAA,CAAA,CAAA;YAC/B4L,YAAAA,EAAcA,CAAAA;YACdvD,GAAAA,EAAAA,CAAMuD,CAAAA,GAAeD,CAAAA,GAAU3L,CAAAA,CAAQ,CAAA,CAAA,EAAI4C,IAAAA,CAAAA;UAAAA,CAAAA;QAuB7C,OAdArD,CAAAA,CAAMsM,QAAAA,GAAWtM,CAAAA,CAAMsM,QAAAA,IAAwB,GAAA,KAAZF,CAAAA,EAE/BC,CAAAA,GACF5E,CAAAA,CAAI/D,IAAAA,GAAOjD,CAAAA,CAAQ,CAAA,CAAA,GAEnBgH,CAAAA,CAAIrD,QAAAA,GAAW+H,CAAAA,CAAU3L,CAAAA,EAAO0L,CAAAA,EAASlM,CAAAA,CAAAA,EAO3CA,CAAAA,CAAMsM,QAAAA,GAAAA,CAAW,CAAA,EAEV7E,CACT;MAAA,CAAA;MACA5F,MAAAA,EAAAA,SAAAA,CAAOC,CAAAA,EAAMC,CAAAA,EAAQ/B,CAAAA,EAAAA;QACnB,OACEP,CAAAA,CAACqC,CAAAA,CAAKgH,GAAAA,EAAGM,CAAAA,CAAAA;UAACpH,GAAAA,EAAKhC,CAAAA,CAAMgC;QAAAA,CAAAA,EAASF,CAAAA,CAAKuJ,KAAAA,CAAAA,EAChCvJ,CAAAA,CAAK4B,IAAAA,IAAQ3B,CAAAA,CAAOD,CAAAA,CAAKsC,QAAAA,EAAUpE,CAAAA,CAAAA,CAG1C;MAAA;IAAA,CAAA,EACDkL,CAAAA,CAAAA,EAAAA,CAAAA,GAE2B;MAI1BpL,KAAAA,EAAOsG,EAAAA,CAAc1J,CAAAA,CAAAA;MACrB6D,KAAAA,EAAAA,CAAAA;MACAC,KAAAA,EAAAA,SAAAA,CAAMC,CAAAA,EAAAA;QACJ,OAAO;UACL4K,KAAAA,EAAOhB,CAAAA,CAAgB5J,CAAAA,CAAQ,CAAA,CAAA,IAAM,EAAA,CAAA;UACrCqI,GAAAA,EAAKrI,CAAAA,CAAQ,CAAA,CAAA,CAAG4C,IAAAA,CAAAA;QAAAA,CAEpB;MAAA,CAAA;MACAxB,MAAAA,EAAAA,SAAAA,CAAOC,CAAAA,EAAMC,CAAAA,EAAQ/B,CAAAA,EAAAA;QACnB,OAAOP,CAAAA,CAACqC,CAAAA,CAAKgH,GAAAA,EAAGM,CAAAA,CAAAA,CAAAA,CAAAA,EAAKtH,CAAAA,CAAKuJ,KAAAA,EAAAA;UAAOrJ,GAAAA,EAAKhC,CAAAA,CAAMgC;QAAAA,CAAAA,CAAAA,CAC9C;MAAA;IAAA,CAAA,EACDkJ,CAAAA,CAAAA,EAAAA,CAAAA,GAEuB;MACtBpL,KAAAA,EAAOsG,EAAAA,CAAc5J,CAAAA,CAAAA;MACrB+D,KAAAA,EAAAA,CAAAA;MACAC,KAAAA,EAAAA,SAAAA,CAAAA,EAAAA;QACE,OAAO,CAAA,CACT;MAAA,CAAA;MACAqB,MAAAA,EAAQ0F;IAAAA,CAAAA,EACT2D,CAAAA,CAAAA,EAAAA,CAAAA,GAEiB;MAChBpL,KAAAA,EAAOoG,EAAAA,CAAkBhE,EAAAA,CAAAA;MACzB3B,KAAAA,EAAAA,CAAAA;MACAC,KAAAA,EAAAA,SAAAA,CAAMC,CAAAA,EAAAA;QACJ,OAAO;UACL8L,GAAAA,EAAK9L,CAAAA,CAAQ,CAAA,CAAA;UACb+K,MAAAA,EAAQ1E,EAAAA,CAAYrG,CAAAA,CAAQ,CAAA,CAAA,CAAA;UAC5B+L,KAAAA,EAAO/L,CAAAA,CAAQ,CAAA;QAAA,CAEnB;MAAA,CAAA;MACAoB,MAAAA,EAAAA,SAAAA,CAAOC,CAAAA,EAAMC,CAAAA,EAAQ/B,CAAAA,EAAAA;QACnB,OACEP,CAAAA,CAAAA,KAAAA,EAAAA;UACEuC,GAAAA,EAAKhC,CAAAA,CAAMgC,GAAAA;UACXuK,GAAAA,EAAKzK,CAAAA,CAAKyK,GAAAA,IAAAA,KAAO5L,CAAAA;UACjB6L,KAAAA,EAAO1K,CAAAA,CAAK0K,KAAAA,IAAAA,KAAS7L,CAAAA;UACrB4H,GAAAA,EAAKxD,EAAAA,CAAYjD,CAAAA,CAAK0J,MAAAA;QAAAA,CAAAA,CAG5B;MAAA;IAAA,CAAA,EAKAN,CAAAA,CAAAA,EAAAA,CAAAA,GAEe;MACfpL,KAAAA,EAAOkG,EAAAA,CAAY/D,EAAAA,CAAAA;MACnB1B,KAAAA,EAAAA,CAAAA;MACAC,KAAAA,EAAAA,SAAAA,CAAMC,CAAAA,EAASD,CAAAA,EAAOR,CAAAA,EAAAA;QACpB,OAAO;UACLoE,QAAAA,EAAU+C,EAAAA,CAAkB3G,CAAAA,EAAOC,CAAAA,CAAQ,CAAA,CAAA,EAAIT,CAAAA,CAAAA;UAC/CwL,MAAAA,EAAQ1E,EAAAA,CAAYrG,CAAAA,CAAQ,CAAA,CAAA,CAAA;UAC5B+L,KAAAA,EAAO/L,CAAAA,CAAQ,CAAA;QAAA,CAEnB;MAAA,CAAA;MACAoB,MAAAA,EAAAA,SAAAA,CAAOC,CAAAA,EAAMC,CAAAA,EAAQ/B,CAAAA,EAAAA;QACnB,OACEP,CAAAA,CAAAA,GAAAA,EAAAA;UAAGuC,GAAAA,EAAKhC,CAAAA,CAAMgC,GAAAA;UAAKyJ,IAAAA,EAAM1G,EAAAA,CAAYjD,CAAAA,CAAK0J,MAAAA,CAAAA;UAASgB,KAAAA,EAAO1K,CAAAA,CAAK0K;QAAAA,CAAAA,EAC5DzK,CAAAA,CAAOD,CAAAA,CAAKsC,QAAAA,EAAUpE,CAAAA,CAAAA,CAG7B;MAAA;IAAA,CAAA,EACDkL,CAAAA,CAAAA,EAAAA,CAAAA,GAGuC;MACtCpL,KAAAA,EAAOkG,EAAAA,CAAYlJ,CAAAA,CAAAA;MACnByD,KAAAA,EAAAA,CAAAA;MACAC,KAAAA,EAAAA,SAAAA,CAAMC,CAAAA,EAAAA;QACJ,OAAO;UACL2D,QAAAA,EAAU,CACR;YACEV,IAAAA,EAAMjD,CAAAA,CAAQ,CAAA,CAAA;YACd9B,IAAAA,EAAAA;UAAAA,CAAAA,CAAAA;UAGJ6M,MAAAA,EAAQ/K,CAAAA,CAAQ,CAAA,CAAA;UAChB9B,IAAAA,EAAAA;QAAAA,CAEJ;MAAA;IAAA,CAAA,EACDuM,CAAAA,CAAAA,EAAAA,CAAAA,GAE+B;MAC9BpL,KAAAA,EAAO,SAAA,CAACC,CAAAA,EAAQC,CAAAA,EAAAA;QACd,OAAIA,CAAAA,CAAMsM,QAAAA,GAAAA,IAAAA,GAGHtG,EAAAA,CAAYpJ,CAAAA,CAAZoJ,CAAsCjG,CAAAA,EAAQC,CAAAA,CACvD;MAAA,CAAA;MACAO,KAAAA,EAAAA,CAAAA;MACAC,KAAAA,EAAAA,SAAAA,CAAMC,CAAAA,EAAAA;QACJ,OAAO;UACL2D,QAAAA,EAAU,CACR;YACEV,IAAAA,EAAMjD,CAAAA,CAAQ,CAAA,CAAA;YACd9B,IAAAA,EAAAA;UAAAA,CAAAA,CAAAA;UAGJ6M,MAAAA,EAAQ/K,CAAAA,CAAQ,CAAA,CAAA;UAChB+L,KAAAA,EAAAA,KAAO7L,CAAAA;UACPhC,IAAAA,EAAAA;QAAAA,CAEJ;MAAA;IAAA,CAAA,EACDuM,CAAAA,CAAAA,EAAAA,CAAAA,GAE8B;MAC7BpL,KAAAA,EAAOkG,EAAAA,CAAYnJ,CAAAA,CAAAA;MACnB0D,KAAAA,EAAAA,CAAAA;MACAC,KAAAA,EAAAA,SAAAA,CAAMC,CAAAA,EAAAA;QACJ,IAAIgM,CAAAA,GAAUhM,CAAAA,CAAQ,CAAA,CAAA;UAClB+K,CAAAA,GAAS/K,CAAAA,CAAQ,CAAA,CAAA;QAOrB,OAJKtF,CAAAA,CAAwBsH,IAAAA,CAAK+I,CAAAA,CAAAA,KAChCA,CAAAA,GAAS,SAAA,GAAYA,CAAAA,CAAAA,EAGhB;UACLpH,QAAAA,EAAU,CACR;YACEV,IAAAA,EAAM+I,CAAAA,CAAQ5L,OAAAA,CAAQ,SAAA,EAAW,EAAA,CAAA;YACjClC,IAAAA,EAAAA;UAAAA,CAAAA,CAAAA;UAGJ6M,MAAAA,EAAQA,CAAAA;UACR7M,IAAAA,EAAAA;QAAAA,CAEJ;MAAA;IAAA,CAAA,EACDuM,CAAAA,CAAAA,EAAAA,CAAAA,GAEuB1L,EAAAA,CACtBC,CAAAA,EA7zCqB,CAAA,CAAA,EA+zC+ByL,CAAAA,CAAAA,EAAAA,CAAAA,GAE5B1L,EAAAA,CACxBC,CAAAA,EAj0CuB,CAAA,CAAA,EAm0C+ByL,CAAAA,CAAAA,EAAAA,CAAAA,GAE3B;MAC3BpL,KAAAA,EAAOqG,EAAAA,CAAWvK,CAAAA,CAAAA;MAClB2E,KAAAA,EAAAA,CAAAA;MACAC,KAAAA,EAAO8G,EAAAA;MACPzF,MAAAA,EAAAA,SAAAA,CAAAA,EAAAA;QACE,OAAO,IACT;MAAA;IAAA,CAAA,EACDqJ,CAAAA,CAAAA,EAAAA,CAAAA,GAEqB;MACpBpL,KAAAA,EAAOuG,EAAAA;MACP9F,KAAAA,EAAAA,CAAAA;MACAC,KAAAA,EAAO6G,EAAAA;MACPxF,MAAAA,EAAAA,SAAAA,CAAOC,CAAAA,EAAMC,CAAAA,EAAQ/B,CAAAA,EAAAA;QACnB,OAAOP,CAAAA,CAAAA,GAAAA,EAAAA;UAAGuC,GAAAA,EAAKhC,CAAAA,CAAMgC;QAAAA,CAAAA,EAAMD,CAAAA,CAAOD,CAAAA,CAAKsC,QAAAA,EAAUpE,CAAAA,CAAAA,CACnD;MAAA;IAAA,CAAA,EAC4DkL,CAAAA,CAAAA,EAAAA,CAAAA,GAE9C;MACdpL,KAAAA,EAAOkG,EAAAA,CAAY/I,CAAAA,CAAAA;MACnBsD,KAAAA,EAAAA,CAAAA;MACAC,KAAAA,EAAAA,SAAAA,CAAMC,CAAAA,EAAAA;QAMJ,OALAwK,CAAAA,CAAKxK,CAAAA,CAAQ,CAAA,CAAA,CAAA,GAAM;UACjB+K,MAAAA,EAAQ/K,CAAAA,CAAQ,CAAA,CAAA;UAChB+L,KAAAA,EAAO/L,CAAAA,CAAQ,CAAA;QAAA,CAAA,EAGV,CAAA,CACT;MAAA,CAAA;MACAoB,MAAAA,EAAQ0F;IAAAA,CAAAA,EACT2D,CAAAA,CAAAA,EAAAA,CAAAA,GAEoB;MACnBpL,KAAAA,EAAOoG,EAAAA,CAAkBhJ,CAAAA,CAAAA;MACzBqD,KAAAA,EAAAA,CAAAA;MACAC,KAAAA,EAAAA,SAAAA,CAAMC,CAAAA,EAAAA;QACJ,OAAO;UACL8L,GAAAA,EAAK9L,CAAAA,CAAQ,CAAA,CAAA,IAAA,KAAME,CAAAA;UACnB+L,GAAAA,EAAKjM,CAAAA,CAAQ,CAAA;QAAA,CAEjB;MAAA,CAAA;MACAoB,MAAAA,EAAAA,SAAAA,CAAOC,CAAAA,EAAMC,CAAAA,EAAQ/B,CAAAA,EAAAA;QACnB,OAAOiL,CAAAA,CAAKnJ,CAAAA,CAAK4K,GAAAA,CAAAA,GACfjN,CAAAA,CAAAA,KAAAA,EAAAA;UACEuC,GAAAA,EAAKhC,CAAAA,CAAMgC,GAAAA;UACXuK,GAAAA,EAAKzK,CAAAA,CAAKyK,GAAAA;UACVhE,GAAAA,EAAKxD,EAAAA,CAAYkG,CAAAA,CAAKnJ,CAAAA,CAAK4K,GAAAA,CAAAA,CAAKlB,MAAAA,CAAAA;UAChCgB,KAAAA,EAAOvB,CAAAA,CAAKnJ,CAAAA,CAAK4K,GAAAA,CAAAA,CAAKF;QAAAA,CAAAA,CAAAA,GAEtB,IACN;MAAA;IAAA,CAAA,EACoDtB,CAAAA,CAAAA,EAAAA,CAAAA,GAElC;MAClBpL,KAAAA,EAAOkG,EAAAA,CAAY7I,CAAAA,CAAAA;MACnBoD,KAAAA,EAAAA,CAAAA;MACAC,KAAAA,EAAAA,SAAAA,CAAMC,CAAAA,EAASD,CAAAA,EAAOR,CAAAA,EAAAA;QACpB,OAAO;UACLoE,QAAAA,EAAU5D,CAAAA,CAAMC,CAAAA,CAAQ,CAAA,CAAA,EAAIT,CAAAA,CAAAA;UAC5B2M,gBAAAA,EAAkBnM,CAAAA,CAChBC,CAAAA,CAAQ,CAAA,CAAA,CAAGI,OAAAA,CAAQzD,CAAAA,EAAmB,MAAA,CAAA,EACtC4C,CAAAA,CAAAA;UAEF0M,GAAAA,EAAKjM,CAAAA,CAAQ,CAAA;QAAA,CAEjB;MAAA,CAAA;MACAoB,MAAAA,EAAAA,SAAAA,CAAOC,CAAAA,EAAMC,CAAAA,EAAQ/B,CAAAA,EAAAA;QACnB,OAAOiL,CAAAA,CAAKnJ,CAAAA,CAAK4K,GAAAA,CAAAA,GACfjN,CAAAA,CAAAA,GAAAA,EAAAA;UACEuC,GAAAA,EAAKhC,CAAAA,CAAMgC,GAAAA;UACXyJ,IAAAA,EAAM1G,EAAAA,CAAYkG,CAAAA,CAAKnJ,CAAAA,CAAK4K,GAAAA,CAAAA,CAAKlB,MAAAA,CAAAA;UACjCgB,KAAAA,EAAOvB,CAAAA,CAAKnJ,CAAAA,CAAK4K,GAAAA,CAAAA,CAAKF;QAAAA,CAAAA,EAErBzK,CAAAA,CAAOD,CAAAA,CAAKsC,QAAAA,EAAUpE,CAAAA,CAAAA,CAAAA,GAGzBP,CAAAA,CAAAA,MAAAA,EAAAA;UAAMuC,GAAAA,EAAKhC,CAAAA,CAAMgC;QAAAA,CAAAA,EAAMD,CAAAA,CAAOD,CAAAA,CAAK6K,gBAAAA,EAAkB3M,CAAAA,CAAAA,CAEzD;MAAA;IAAA,CAAA,EACDkL,CAAAA,CAAAA,EAAAA,CAAAA,GAEiB;MAChBpL,KAAAA,EAAOqG,EAAAA,CAAWnJ,CAAAA,CAAAA;MAClBuD,KAAAA,EAAAA,CAAAA;MACAC,KAAAA,EAAOwD,EAAAA;MACPnC,MAAAA,EAAAA,SAAAA,CAAOC,CAAAA,EAAMC,CAAAA,EAAQ/B,CAAAA,EAAAA;QACnB,IAAM4M,CAAAA,GAAQ9K,CAAAA;QACd,OACErC,CAAAA,CAAAA,OAAAA,EAAAA;UAAOuC,GAAAA,EAAKhC,CAAAA,CAAMgC;QAAAA,CAAAA,EAChBvC,CAAAA,CAAAA,OAAAA,EAAAA,IAAAA,EACEA,CAAAA,CAAAA,IAAAA,EAAAA,IAAAA,EACGmN,CAAAA,CAAMzI,MAAAA,CAAOpD,GAAAA,CAAI,UAA4BM,CAAAA,EAASJ,CAAAA,EAAAA;UACrD,OACExB,CAAAA,CAAAA,IAAAA,EAAAA;YAAIuC,GAAAA,EAAKf,CAAAA;YAAG4L,KAAAA,EAAOxI,EAAAA,CAAcuI,CAAAA,EAAO3L,CAAAA;UAAAA,CAAAA,EACrCc,CAAAA,CAAOV,CAAAA,EAASrB,CAAAA,CAAAA,CAGvB;QAAA,CAAA,CAAA,CAAA,CAAA,EAIJP,CAAAA,CAAAA,OAAAA,EAAAA,IAAAA,EACGmN,CAAAA,CAAMhJ,KAAAA,CAAM7C,GAAAA,CAAI,UAA0B+L,CAAAA,EAAK7L,CAAAA,EAAAA;UAC9C,OACExB,CAAAA,CAAAA,IAAAA,EAAAA;YAAIuC,GAAAA,EAAKf;UAAAA,CAAAA,EACN6L,CAAAA,CAAI/L,GAAAA,CAAI,UAA2BM,CAAAA,EAAS0L,CAAAA,EAAAA;YAC3C,OACEtN,CAAAA,CAAAA,IAAAA,EAAAA;cAAIuC,GAAAA,EAAK+K,CAAAA;cAAGF,KAAAA,EAAOxI,EAAAA,CAAcuI,CAAAA,EAAOG,CAAAA;YAAAA,CAAAA,EACrChL,CAAAA,CAAOV,CAAAA,EAASrB,CAAAA,CAAAA,CAGvB;UAAA,CAAA,CAAA,CAGN;QAAA,CAAA,CAAA,CAAA,CAIR;MAAA;IAAA,CAAA,EACDkL,CAAAA,CAAAA,EAAAA,CAAAA,GAEgB;MAKfpL,KAAAA,EAAOsG,EAAAA,CAAclI,EAAAA,CAAAA;MACrBqC,KAAAA,EAAAA,CAAAA;MACAC,KAAAA,EAAAA,SAAAA,CAAMC,CAAAA,EAAAA;QACJ,OAAO;UACLiD,IAAAA,EAAMjD,CAAAA,CAAQ,CAAA,CAAA,CAEXI,OAAAA,CAAQtE,CAAAA,EAAkB,UAACyQ,CAAAA,EAAMC,CAAAA,EAAAA;YAChC,OAAO9D,CAAAA,CAAQzO,mBAAAA,CAAoBuS,CAAAA,CAAAA,GAC/B9D,CAAAA,CAAQzO,mBAAAA,CAAoBuS,CAAAA,CAAAA,GAC5BD,CACN;UAAA,CAAA;QAAA,CAEN;MAAA,CAAA;MACAnL,MAAAA,EAAAA,SAAAA,CAAOC,CAAAA,EAAAA;QACL,OAAOA,CAAAA,CAAK4B,IACd;MAAA;IAAA,CAAA,EACDwH,CAAAA,CAAAA,EAAAA,CAAAA,GAEsB;MACrBpL,KAAAA,EAAOoG,EAAAA,CAAkBtI,CAAAA,CAAAA;MACzB2C,KAAAA,EAAAA,CAAAA;MACAC,KAAAA,EAAAA,SAAAA,CAAMC,CAAAA,EAASD,CAAAA,EAAOR,CAAAA,EAAAA;QACpB,OAAO;UAGLoE,QAAAA,EAAU5D,CAAAA,CAAMC,CAAAA,CAAQ,CAAA,CAAA,EAAIT,CAAAA;QAAAA,CAEhC;MAAA,CAAA;MACA6B,MAAAA,EAAAA,SAAAA,CAAOC,CAAAA,EAAMC,CAAAA,EAAQ/B,CAAAA,EAAAA;QACnB,OAAOP,CAAAA,CAAAA,QAAAA,EAAAA;UAAQuC,GAAAA,EAAKhC,CAAAA,CAAMgC;QAAAA,CAAAA,EAAMD,CAAAA,CAAOD,CAAAA,CAAKsC,QAAAA,EAAUpE,CAAAA,CAAAA,CACxD;MAAA;IAAA,CAAA,EACDkL,CAAAA,CAAAA,EAAAA,CAAAA,GAE0B;MACzBpL,KAAAA,EAAOoG,EAAAA,CAAkBpI,CAAAA,CAAAA;MACzByC,KAAAA,EAAAA,CAAAA;MACAC,KAAAA,EAAAA,SAAAA,CAAMC,CAAAA,EAASD,CAAAA,EAAOR,CAAAA,EAAAA;QACpB,OAAO;UAGLoE,QAAAA,EAAU5D,CAAAA,CAAMC,CAAAA,CAAQ,CAAA,CAAA,EAAIT,CAAAA;QAAAA,CAEhC;MAAA,CAAA;MACA6B,MAAAA,EAAAA,SAAAA,CAAOC,CAAAA,EAAMC,CAAAA,EAAQ/B,CAAAA,EAAAA;QACnB,OAAOP,CAAAA,CAAAA,IAAAA,EAAAA;UAAIuC,GAAAA,EAAKhC,CAAAA,CAAMgC;QAAAA,CAAAA,EAAMD,CAAAA,CAAOD,CAAAA,CAAKsC,QAAAA,EAAUpE,CAAAA,CAAAA,CACpD;MAAA;IAAA,CAAA,EACDkL,CAAAA,CAAAA,EAAAA,CAAAA,GAEuB;MAKtBpL,KAAAA,EAAOoG,EAAAA,CAAkBjI,EAAAA,CAAAA;MACzBsC,KAAAA,EAAAA,CAAAA;MACAC,KAAAA,EAAAA,SAAAA,CAAMC,CAAAA,EAAAA;QACJ,OAAO;UACLiD,IAAAA,EAAMjD,CAAAA,CAAQ,CAAA,CAAA;UACd9B,IAAAA,EAAAA;QAAAA,CAEJ;MAAA;IAAA,CAAA,EACDuM,CAAAA,CAAAA,EAAAA,CAAAA,GAEsB;MACrBpL,KAAAA,EAAOoG,EAAAA,CAAkBnI,CAAAA,CAAAA;MACzBwC,KAAAA,EAAAA,CAAAA;MACAC,KAAAA,EAAO6G,EAAAA;MACPxF,MAAAA,EAAAA,SAAAA,CAAOC,CAAAA,EAAMC,CAAAA,EAAQ/B,CAAAA,EAAAA;QACnB,OAAOP,CAAAA,CAAAA,MAAAA,EAAAA;UAAMuC,GAAAA,EAAKhC,CAAAA,CAAMgC;QAAAA,CAAAA,EAAMD,CAAAA,CAAOD,CAAAA,CAAKsC,QAAAA,EAAUpE,CAAAA,CAAAA,CACtD;MAAA;IAAA,CAAA,EACDkL,CAAAA,CAAAA,EAAAA,CAAAA,GAE+B;MAC9BpL,KAAAA,EAAOoG,EAAAA,CAAkBlI,CAAAA,CAAAA;MACzBuC,KAAAA,EAAAA,CAAAA;MACAC,KAAAA,EAAO6G,EAAAA;MACPxF,MAAAA,EAAAA,SAAAA,CAAOC,CAAAA,EAAMC,CAAAA,EAAQ/B,CAAAA,EAAAA;QACnB,OAAOP,CAAAA,CAAAA,KAAAA,EAAAA;UAAKuC,GAAAA,EAAKhC,CAAAA,CAAMgC;QAAAA,CAAAA,EAAMD,CAAAA,CAAOD,CAAAA,CAAKsC,QAAAA,EAAUpE,CAAAA,CAAAA,CACrD;MAAA;IAAA,CAAA,EACDkL,CAAAA,CAAAA;EAAAA,CAiCmC,CAAA,KAAlC/B,CAAAA,CAAQ+D,qBAAAA,KAAAA,OACHlI,EAAAA,CAAAA,EAAAA,CAAAA,EAAAA,OACAA,EAAAA,CAAAA,EAAAA,CAAAA,CAAAA;EAGT,IAx2BgBnD,EAAAA;IAw2BVmI,EAAAA,GA3mCR,UACEhF,CAAAA,EAAAA;MAOA,IAAIC,CAAAA,GAAWC,MAAAA,CAAOC,IAAAA,CAAKH,CAAAA,CAAAA;MA8B3B,SAASS,CAAAA,CACP1F,CAAAA,EACAC,CAAAA,EAAAA;QASA,KAPA,IAAI4B,CAAAA,GAAS,EAAA,EAMT3B,CAAAA,GAAc,EAAA,EACXF,CAAAA,GAEL,KADA,IAAIkB,CAAAA,GAAI,CAAA,EACDA,CAAAA,GAAIgE,CAAAA,CAAS9D,MAAAA,GAAQ;UAC1B,IAAMuE,CAAAA,GAAWT,CAAAA,CAAShE,CAAAA,CAAAA;YACpB0E,CAAAA,GAAOX,CAAAA,CAAMU,CAAAA,CAAAA;YACbjF,CAAAA,GAAUkF,CAAAA,CAAK7F,KAAAA,CAAMC,CAAAA,EAAQC,CAAAA,EAAOC,CAAAA,CAAAA;UAE1C,IAAIQ,CAAAA,EAAS;YACX,IAAMmF,CAAAA,GAAoBnF,CAAAA,CAAQ,CAAA,CAAA;YAClCV,CAAAA,GAASA,CAAAA,CAAO8F,SAAAA,CAAUD,CAAAA,CAAkBzE,MAAAA,CAAAA;YAC5C,IAAM2E,CAAAA,GAASH,CAAAA,CAAKnF,KAAAA,CAAMC,CAAAA,EAASgF,CAAAA,EAAazF,CAAAA,CAAAA;YAM7B,IAAA,IAAf8F,CAAAA,CAAOnH,IAAAA,KACTmH,CAAAA,CAAOnH,IAAAA,GAAO+G,CAAAA,CAAAA,EAGhB9D,CAAAA,CAAO6B,IAAAA,CAAKqC,CAAAA,CAAAA,EAEZ7F,CAAAA,GAAc2F,CAAAA;YACd;UACF;UAEA3E,CAAAA,EACF;QAAA;QAGF,OAAOW,CACT;MAAA;MAEA,OA1DAqD,CAAAA,CAASG,IAAAA,CAAK,UAAUC,CAAAA,EAAOC,CAAAA,EAAAA;QAC7B,IAAIC,CAAAA,GAASP,CAAAA,CAAMK,CAAAA,CAAAA,CAAO9E,KAAAA;UACtBiF,CAAAA,GAASR,CAAAA,CAAMM,CAAAA,CAAAA,CAAO/E,KAAAA;QAG1B,OAAIgF,CAAAA,KAAWC,CAAAA,GACND,CAAAA,GAASC,CAAAA,GACPH,CAAAA,GAAQC,CAAAA,GAAAA,CACT,CAAA,GAAA,CAIZ;MAAA,CAAA,CAAA,EAAA,UA8C2BvF,CAAAA,EAAQC,CAAAA,EAAAA;QACjC,OAAOyF,CAAAA,CA7GX,UAA6B1F,CAAAA,EAAAA;UAC3B,OAAOA,CAAAA,CACJc,OAAAA,CAAQhF,CAAAA,EAAc,IAAA,CAAA,CACtBgF,OAAAA,CAAQ7E,CAAAA,EAAY,EAAA,CAAA,CACpB6E,OAAAA,CAAQvD,CAAAA,EAAO,MAAA,CACpB;QAAA,CAwGuByI,CAAoBhG,CAAAA,CAAAA,EAASC,CAAAA,CAClD;MAAA,CACF;IAAA,CAshCiBmN,CAAUnI,EAAAA,CAAAA;IACnB+E,EAAAA,IAz2BUlI,EAAAA,GAqClB,UACEmD,CAAAA,EACAgD,CAAAA,EAAAA;MAEA,OAAA,UACEP,CAAAA,EACA5F,CAAAA,EACA7B,CAAAA,EAAAA;QAEA,IAAMiI,CAAAA,GAAWjD,CAAAA,CAAMyC,CAAAA,CAAI9I,IAAAA,CAAAA,CAAMkD,MAAAA;QAEjC,OAAOmG,CAAAA,GACHA,CAAAA,CAAW,YAAA;UAAA,OAAMC,CAAAA,CAASR,CAAAA,EAAK5F,CAAAA,EAAQ7B,CAAAA,CAAM;QAAA,CAAA,EAAEyH,CAAAA,EAAK5F,CAAAA,EAAQ7B,CAAAA,CAAAA,GAC5DiI,CAAAA,CAASR,CAAAA,EAAK5F,CAAAA,EAAQ7B,CAAAA,CAC5B;MAAA,CACF;IAAA,CAqzBqCoN,CAAepI,EAAAA,EAAOmE,CAAAA,CAAQkE,UAAAA,CAAAA,EAAAA,SAx2BjD7F,CAAAA,CACdC,CAAAA,EACAzH,CAAAA,EAAAA;MAEA,IAAA,KAAA,CAAA,KAFAA,CAAAA,KAAAA,CAAAA,GAA6B,CAAA,CAAA,CAAA,EAEzB0H,KAAAA,CAAMC,OAAAA,CAAQF,CAAAA,CAAAA,EAAM;QAQtB,KAPA,IAAMG,CAAAA,GAAS5H,CAAAA,CAAMgC,GAAAA,EACfJ,CAAAA,GAAS,EAAA,EAIXiG,CAAAA,GAAAA,CAAgB,CAAA,EAEX5G,CAAAA,GAAI,CAAA,EAAGA,CAAAA,GAAIwG,CAAAA,CAAItG,MAAAA,EAAQF,CAAAA,EAAAA,EAAK;UACnCjB,CAAAA,CAAMgC,GAAAA,GAAMf,CAAAA;UAEZ,IAAM6G,CAAAA,GAAUN,CAAAA,CAAcC,CAAAA,CAAIxG,CAAAA,CAAAA,EAAIjB,CAAAA,CAAAA;YAChC+H,CAAAA,GAA8B,QAAA,IAAA,OAAZD,CAAAA;UAEpBC,CAAAA,IAAYF,CAAAA,GACdjG,CAAAA,CAAOA,CAAAA,CAAOT,MAAAA,GAAS,CAAA,CAAA,IAAM2G,CAAAA,GACR,IAAA,KAAZA,CAAAA,IACTlG,CAAAA,CAAO6B,IAAAA,CAAKqE,CAAAA,CAAAA,EAGdD,CAAAA,GAAgBE,CAClB;QAAA;QAIA,OAFA/H,CAAAA,CAAMgC,GAAAA,GAAM4F,CAAAA,EAELhG,CACT;MAAA;MAEA,OAAOC,EAAAA,CAAO4F,CAAAA,EAAKD,CAAAA,EAAexH,CAAAA,CACpC;IAAA,CAAA,CAAA;IAy0BMmK,EAAAA,GAAMR,CAAAA,CAAQT,CAAAA,CAAAA;EAEpB,OAAI8B,CAAAA,CAAU7J,MAAAA,GAEV1B,CAAAA,CAAAA,KAAAA,EAAAA,IAAAA,EACG0K,EAAAA,EACD1K,CAAAA,CAAAA,QAAAA,EAAAA;IAAQuC,GAAAA,EAAI;EAAA,CAAA,EACTgJ,CAAAA,CAAUjK,GAAAA,CAAI,UAAwBuM,CAAAA,EAAAA;IACrC,OACE7N,CAAAA,CAAAA,KAAAA,EAAAA;MAAKqM,EAAAA,EAAI3C,CAAAA,CAAQtG,OAAAA,CAAQyK,CAAAA,CAAI/B,UAAAA,CAAAA;MAAavJ,GAAAA,EAAKsL,CAAAA,CAAI/B;IAAAA,CAAAA,EAChD+B,CAAAA,CAAI/B,UAAAA,EACJxB,EAAAA,CAAQC,EAAAA,CAAOsD,CAAAA,CAAIhC,QAAAA,EAAU;MAAEjL,MAAAA,EAAAA,CAAQ;IAAA,CAAA,CAAA,CAAA,CAG9C;EAAA,CAAA,CAAA,CAAA,CAAA,GAMD8J,EACT;AAAA;AAAA,eAUK,UAJSoD,CAAAA,EAAAA;EAAAA,IAAAA,CAAAA,GAAAA,CAAAA,CAINnJ,QAAAA;IAAAA,CAAAA,GAAAA,KAAAA,CAAAA,KAAQoJ,CAAAA,GAAG,EAAA,GAAEA,CAAAA;IAAErE,CAAAA,GAAOoE,CAAAA,CAAPpE,OAAAA;IAAYK,CAAAA,GAAAA,UAAAA,CAAAA,EAAAA,CAAAA,EAAAA;MAAAA,IAAAA,IAAAA,IAAAA,CAAAA,EAAAA,OAAAA,CAAAA,CAAAA;MAAAA,IAAAA,CAAAA;QAAAA,CAAAA;QAAAA,CAAAA,GAAAA,CAAAA,CAAAA;QAAAA,CAAAA,GAAAA,MAAAA,CAAAA,IAAAA,CAAAA,CAAAA,CAAAA;MAAAA,KAAAA,CAAAA,GAAAA,CAAAA,EAAAA,CAAAA,GAAAA,CAAAA,CAAAA,MAAAA,EAAAA,CAAAA,EAAAA,EAAAA,CAAAA,CAAAA,OAAAA,CAAAA,CAAAA,GAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,IAAAA,CAAAA,KAAAA,CAAAA,CAAAA,CAAAA,CAAAA,GAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA;MAAAA,OAAAA,CAAAA;IAAAA,CAAKiE,CAAAA,CAAAA,EAAAA,CAAAA,CAAAA;EAQtC,OAAOlE,CAAAA,CAAMwB,YAAAA,CACX9B,EAAAA,CAAS7E,CAAAA,EAAU+E,CAAAA,CAAAA,EACnBK,CAAAA,CAEJ;AAAA;AAAA,SAAA,CAAA,IAAA,QAAA,EAAA,EAAA,IAAA,QAAA,EAAA,EAAA,IAAA,OAAA","sourcesContent":["/* @jsx h */\n/**\n * markdown-to-jsx is a fork of\n * [simple-markdown v0.2.2](https://github.com/Khan/simple-markdown)\n * from Khan Academy. Thank you Khan devs for making such an awesome\n * and extensible parsing infra... without it, half of the\n * optimizations here wouldn't be feasible. 🙏🏼\n */\nimport * as React from 'react'\n\n/**\n * Analogous to `node.type`. Please note that the values here may change at any time,\n * so do not hard code against the value directly.\n */\nexport const enum RuleType {\n  blockQuote = '0',\n  breakLine = '1',\n  breakThematic = '2',\n  codeBlock = '3',\n  codeFenced = '4',\n  codeInline = '5',\n  footnote = '6',\n  footnoteReference = '7',\n  gfmTask = '8',\n  heading = '9',\n  headingSetext = '10',\n  /** only available if not `disableHTMLParsing` */\n  htmlBlock = '11',\n  htmlComment = '12',\n  /** only available if not `disableHTMLParsing` */\n  htmlSelfClosing = '13',\n  image = '14',\n  link = '15',\n  /** emits a `link` 'node', does not render directly */\n  linkAngleBraceStyleDetector = '16',\n  /** emits a `link` 'node', does not render directly */\n  linkBareUrlDetector = '17',\n  /** emits a `link` 'node', does not render directly */\n  linkMailtoDetector = '18',\n  newlineCoalescer = '19',\n  orderedList = '20',\n  paragraph = '21',\n  ref = '22',\n  refImage = '23',\n  refLink = '24',\n  table = '25',\n  tableSeparator = '26',\n  text = '27',\n  textBolded = '28',\n  textEmphasized = '29',\n  textEscaped = '30',\n  textMarked = '31',\n  textStrikethroughed = '32',\n  unorderedList = '33',\n}\n\nconst enum Priority {\n  /**\n   * anything that must scan the tree before everything else\n   */\n  MAX,\n  /**\n   * scans for block-level constructs\n   */\n  HIGH,\n  /**\n   * inline w/ more priority than other inline\n   */\n  MED,\n  /**\n   * inline elements\n   */\n  LOW,\n  /**\n   * bare text and stuff that is considered leftovers\n   */\n  MIN,\n}\n\n/** TODO: Drop for React 16? */\nconst ATTRIBUTE_TO_JSX_PROP_MAP = [\n  'allowFullScreen',\n  'allowTransparency',\n  'autoComplete',\n  'autoFocus',\n  'autoPlay',\n  'cellPadding',\n  'cellSpacing',\n  'charSet',\n  'className',\n  'classId',\n  'colSpan',\n  'contentEditable',\n  'contextMenu',\n  'crossOrigin',\n  'encType',\n  'formAction',\n  'formEncType',\n  'formMethod',\n  'formNoValidate',\n  'formTarget',\n  'frameBorder',\n  'hrefLang',\n  'inputMode',\n  'keyParams',\n  'keyType',\n  'marginHeight',\n  'marginWidth',\n  'maxLength',\n  'mediaGroup',\n  'minLength',\n  'noValidate',\n  'radioGroup',\n  'readOnly',\n  'rowSpan',\n  'spellCheck',\n  'srcDoc',\n  'srcLang',\n  'srcSet',\n  'tabIndex',\n  'useMap',\n].reduce(\n  (obj, x) => {\n    obj[x.toLowerCase()] = x\n    return obj\n  },\n  { for: 'htmlFor' }\n)\n\nconst namedCodesToUnicode = {\n  amp: '\\u0026',\n  apos: '\\u0027',\n  gt: '\\u003e',\n  lt: '\\u003c',\n  nbsp: '\\u00a0',\n  quot: '\\u201c',\n} as const\n\nconst DO_NOT_PROCESS_HTML_ELEMENTS = ['style', 'script']\n\n/**\n * the attribute extractor regex looks for a valid attribute name,\n * followed by an equal sign (whitespace around the equal sign is allowed), followed\n * by one of the following:\n *\n * 1. a single quote-bounded string, e.g. 'foo'\n * 2. a double quote-bounded string, e.g. \"bar\"\n * 3. an interpolation, e.g. {something}\n *\n * JSX can be be interpolated into itself and is passed through the compiler using\n * the same options and setup as the current run.\n *\n * <Something children={<SomeOtherThing />} />\n *                      ==================\n *                              ↳ children: [<SomeOtherThing />]\n *\n * Otherwise, interpolations are handled as strings or simple booleans\n * unless HTML syntax is detected.\n *\n * <Something color={green} disabled={true} />\n *                   =====            ====\n *                     ↓                ↳ disabled: true\n *                     ↳ color: \"green\"\n *\n * Numbers are not parsed at this time due to complexities around int, float,\n * and the upcoming bigint functionality that would make handling it unwieldy.\n * Parse the string in your component as desired.\n *\n * <Something someBigNumber={123456789123456789} />\n *                           ==================\n *                                   ↳ someBigNumber: \"123456789123456789\"\n */\nconst ATTR_EXTRACTOR_R =\n  /([-A-Z0-9_:]+)(?:\\s*=\\s*(?:(?:\"((?:\\\\.|[^\"])*)\")|(?:'((?:\\\\.|[^'])*)')|(?:\\{((?:\\\\.|{[^}]*?}|[^}])*)\\})))?/gi\n\n/** TODO: Write explainers for each of these */\n\nconst AUTOLINK_MAILTO_CHECK_R = /mailto:/i\nconst BLOCK_END_R = /\\n{2,}$/\nconst BLOCKQUOTE_R = /^(\\s*>[\\s\\S]*?)(?=\\n{2,})/\nconst BLOCKQUOTE_TRIM_LEFT_MULTILINE_R = /^ *> ?/gm\nconst BREAK_LINE_R = /^ {2,}\\n/\nconst BREAK_THEMATIC_R = /^(?:( *[-*_])){3,} *(?:\\n *)+\\n/\nconst CODE_BLOCK_FENCED_R =\n  /^\\s*(`{3,}|~{3,}) *(\\S+)?([^\\n]*?)?\\n([\\s\\S]+?)\\s*\\1 *(?:\\n *)*\\n?/\nconst CODE_BLOCK_R = /^(?: {4}[^\\n]+\\n*)+(?:\\n *)+\\n?/\nconst CODE_INLINE_R = /^(`+)\\s*([\\s\\S]*?[^`])\\s*\\1(?!`)/\nconst CONSECUTIVE_NEWLINE_R = /^(?:\\n *)*\\n/\nconst CR_NEWLINE_R = /\\r\\n?/g\n\n/**\n * Matches footnotes on the format:\n *\n * [^key]: value\n *\n * Matches multiline footnotes\n *\n * [^key]: row\n * row\n * row\n *\n * And empty lines in indented multiline footnotes\n *\n * [^key]: indented with\n *     row\n *\n *     row\n *\n * Explanation:\n *\n * 1. Look for the starting tag, eg: [^key]\n *    ^\\[\\^([^\\]]+)]\n *\n * 2. The first line starts with a colon, and continues for the rest of the line\n *   :(.*)\n *\n * 3. Parse as many additional lines as possible. Matches new non-empty lines that doesn't begin with a new footnote definition.\n *    (\\n(?!\\[\\^).+)\n *\n * 4. ...or allows for repeated newlines if the next line begins with at least four whitespaces.\n *    (\\n+ {4,}.*)\n */\nconst FOOTNOTE_R = /^\\[\\^([^\\]]+)](:(.*)((\\n+ {4,}.*)|(\\n(?!\\[\\^).+))*)/\n\nconst FOOTNOTE_REFERENCE_R = /^\\[\\^([^\\]]+)]/\nconst FORMFEED_R = /\\f/g\nconst FRONT_MATTER_R = /^---[ \\t]*\\n(.|\\n)*\\n---[ \\t]*\\n/\nconst GFM_TASK_R = /^\\s*?\\[(x|\\s)\\]/\nconst HEADING_R = /^ *(#{1,6}) *([^\\n]+?)(?: +#*)?(?:\\n *)*(?:\\n|$)/\nconst HEADING_ATX_COMPLIANT_R =\n  /^ *(#{1,6}) +([^\\n]+?)(?: +#*)?(?:\\n *)*(?:\\n|$)/\nconst HEADING_SETEXT_R = /^([^\\n]+)\\n *(=|-){3,} *(?:\\n *)+\\n/\n\n/**\n * Explanation:\n *\n * 1. Look for a starting tag, preceded by any amount of spaces\n *    ^ *<\n *\n * 2. Capture the tag name (capture 1)\n *    ([^ >/]+)\n *\n * 3. Ignore a space after the starting tag and capture the attribute portion of the tag (capture 2)\n *     ?([^>]*)>\n *\n * 4. Ensure a matching closing tag is present in the rest of the input string\n *    (?=[\\s\\S]*<\\/\\1>)\n *\n * 5. Capture everything until the matching closing tag -- this might include additional pairs\n *    of the same tag type found in step 2 (capture 3)\n *    ((?:[\\s\\S]*?(?:<\\1[^>]*>[\\s\\S]*?<\\/\\1>)*[\\s\\S]*?)*?)<\\/\\1>\n *\n * 6. Capture excess newlines afterward\n *    \\n*\n */\nconst HTML_BLOCK_ELEMENT_R =\n  /^ *(?!<[a-z][^ >/]* ?\\/>)<([a-z][^ >/]*) ?((?:[^>]*[^/])?)>\\n?(\\s*(?:<\\1[^>]*?>[\\s\\S]*?<\\/\\1>|(?!<\\1\\b)[\\s\\S])*?)<\\/\\1>(?!<\\/\\1>)\\n*/i\n\nconst HTML_CHAR_CODE_R = /&([a-z0-9]+|#[0-9]{1,6}|#x[0-9a-fA-F]{1,6});/gi\n\nconst HTML_COMMENT_R = /^<!--[\\s\\S]*?(?:-->)/\n\n/**\n * borrowed from React 15(https://github.com/facebook/react/blob/894d20744cba99383ffd847dbd5b6e0800355a5c/src/renderers/dom/shared/HTMLDOMPropertyConfig.js)\n */\nconst HTML_CUSTOM_ATTR_R = /^(data|aria|x)-[a-z_][a-z\\d_.-]*$/\n\nconst HTML_SELF_CLOSING_ELEMENT_R =\n  /^ *<([a-z][a-z0-9:]*)(?:\\s+((?:<.*?>|[^>])*))?\\/?>(?!<\\/\\1>)(\\s*\\n)?/i\nconst INTERPOLATION_R = /^\\{.*\\}$/\nconst LINK_AUTOLINK_BARE_URL_R = /^(https?:\\/\\/[^\\s<]+[^<.,:;\"')\\]\\s])/\nconst LINK_AUTOLINK_MAILTO_R = /^<([^ >]+@[^ >]+)>/\nconst LINK_AUTOLINK_R = /^<([^ >]+:\\/[^ >]+)>/\nconst CAPTURE_LETTER_AFTER_HYPHEN = /-([a-z])?/gi\nconst NP_TABLE_R =\n  /^(.*\\|.*)\\n(?: *(\\|? *[-:]+ *\\|[-| :]*)\\n((?:.*\\|.*\\n)*))?\\n?/\nconst PARAGRAPH_R = /^[^\\n]+(?:  \\n|\\n{2,})/\nconst REFERENCE_IMAGE_OR_LINK = /^\\[([^\\]]*)\\]:\\s+<?([^\\s>]+)>?\\s*(\"([^\"]*)\")?/\nconst REFERENCE_IMAGE_R = /^!\\[([^\\]]*)\\] ?\\[([^\\]]*)\\]/\nconst REFERENCE_LINK_R = /^\\[([^\\]]*)\\] ?\\[([^\\]]*)\\]/\nconst SQUARE_BRACKETS_R = /(\\[|\\])/g\nconst SHOULD_RENDER_AS_BLOCK_R = /(\\n|^[-*]\\s|^#|^ {2,}|^-{2,}|^>\\s)/\nconst TAB_R = /\\t/g\nconst TABLE_TRIM_PIPES = /(^ *\\||\\| *$)/g\nconst TABLE_CENTER_ALIGN = /^ *:-+: *$/\nconst TABLE_LEFT_ALIGN = /^ *:-+ *$/\nconst TABLE_RIGHT_ALIGN = /^ *-+: *$/\n\n/**\n * For inline formatting, this partial attempts to ignore characters that\n * may appear in nested formatting that could prematurely trigger detection\n * and therefore miss content that should have been included.\n */\nconst INLINE_SKIP_R =\n  '((?:\\\\[.*?\\\\][([].*?[)\\\\]]|<.*?>(?:.*?<.*?>)?|`.*?`|~~.*?~~|==.*?==|.|\\\\n)*?)'\n\n/**\n * Detect a sequence like **foo** or __foo__. Note that bold has a higher priority\n * than emphasized to support nesting of both since they share a delimiter.\n */\nconst TEXT_BOLD_R = new RegExp(`^([*_])\\\\1${INLINE_SKIP_R}\\\\1\\\\1(?!\\\\1)`)\n\n/**\n * Detect a sequence like *foo* or _foo_.\n */\nconst TEXT_EMPHASIZED_R = new RegExp(`^([*_])${INLINE_SKIP_R}\\\\1(?!\\\\1|\\\\w)`)\n\n/**\n * Detect a sequence like ==foo==.\n */\nconst TEXT_MARKED_R = new RegExp(`^==${INLINE_SKIP_R}==`)\n\n/**\n * Detect a sequence like ~~foo~~.\n */\nconst TEXT_STRIKETHROUGHED_R = new RegExp(`^~~${INLINE_SKIP_R}~~`)\n\nconst TEXT_ESCAPED_R = /^\\\\([^0-9A-Za-z\\s])/\n\nconst TEXT_PLAIN_R =\n  /^[\\s\\S]+?(?=[^0-9A-Z\\s\\u00c0-\\uffff&#;.()'\"]|\\d+\\.|\\n\\n| {2,}\\n|\\w+:\\S|$)/i\n\nconst TRIM_STARTING_NEWLINES = /^\\n+/\n\nconst HTML_LEFT_TRIM_AMOUNT_R = /^([ \\t]*)/\n\nconst UNESCAPE_URL_R = /\\\\([^\\\\])/g\n\ntype LIST_TYPE = 1 | 2\nconst ORDERED: LIST_TYPE = 1\nconst UNORDERED: LIST_TYPE = 2\n\nconst LIST_ITEM_END_R = / *\\n+$/\nconst LIST_LOOKBEHIND_R = /(?:^|\\n)( *)$/\n\n// recognize a `*` `-`, `+`, `1.`, `2.`... list bullet\nconst ORDERED_LIST_BULLET = '(?:\\\\d+\\\\.)'\nconst UNORDERED_LIST_BULLET = '(?:[*+-])'\n\nfunction generateListItemPrefix(type: LIST_TYPE) {\n  return (\n    '( *)(' +\n    (type === ORDERED ? ORDERED_LIST_BULLET : UNORDERED_LIST_BULLET) +\n    ') +'\n  )\n}\n\n// recognize the start of a list item:\n// leading space plus a bullet plus a space (`   * `)\nconst ORDERED_LIST_ITEM_PREFIX = generateListItemPrefix(ORDERED)\nconst UNORDERED_LIST_ITEM_PREFIX = generateListItemPrefix(UNORDERED)\n\nfunction generateListItemPrefixRegex(type: LIST_TYPE) {\n  return new RegExp(\n    '^' +\n      (type === ORDERED ? ORDERED_LIST_ITEM_PREFIX : UNORDERED_LIST_ITEM_PREFIX)\n  )\n}\n\nconst ORDERED_LIST_ITEM_PREFIX_R = generateListItemPrefixRegex(ORDERED)\nconst UNORDERED_LIST_ITEM_PREFIX_R = generateListItemPrefixRegex(UNORDERED)\n\nfunction generateListItemRegex(type: LIST_TYPE) {\n  // recognize an individual list item:\n  //  * hi\n  //    this is part of the same item\n  //\n  //    as is this, which is a new paragraph in the same item\n  //\n  //  * but this is not part of the same item\n  return new RegExp(\n    '^' +\n      (type === ORDERED\n        ? ORDERED_LIST_ITEM_PREFIX\n        : UNORDERED_LIST_ITEM_PREFIX) +\n      '[^\\\\n]*(?:\\\\n' +\n      '(?!\\\\1' +\n      (type === ORDERED ? ORDERED_LIST_BULLET : UNORDERED_LIST_BULLET) +\n      ' )[^\\\\n]*)*(\\\\n|$)',\n    'gm'\n  )\n}\n\nconst ORDERED_LIST_ITEM_R = generateListItemRegex(ORDERED)\nconst UNORDERED_LIST_ITEM_R = generateListItemRegex(UNORDERED)\n\n// check whether a list item has paragraphs: if it does,\n// we leave the newlines at the end\nfunction generateListRegex(type: LIST_TYPE) {\n  const bullet = type === ORDERED ? ORDERED_LIST_BULLET : UNORDERED_LIST_BULLET\n\n  return new RegExp(\n    '^( *)(' +\n      bullet +\n      ') ' +\n      '[\\\\s\\\\S]+?(?:\\\\n{2,}(?! )' +\n      '(?!\\\\1' +\n      bullet +\n      ' (?!' +\n      bullet +\n      ' ))\\\\n*' +\n      // the \\\\s*$ here is so that we can parse the inside of nested\n      // lists, where our content might end before we receive two `\\n`s\n      '|\\\\s*\\\\n*$)'\n  )\n}\n\nconst ORDERED_LIST_R = generateListRegex(ORDERED)\nconst UNORDERED_LIST_R = generateListRegex(UNORDERED)\n\nfunction generateListRule(\n  h: any,\n  type: LIST_TYPE\n): MarkdownToJSX.Rule<\n  MarkdownToJSX.OrderedListNode | MarkdownToJSX.UnorderedListNode\n> {\n  const ordered = type === ORDERED\n  const LIST_R = ordered ? ORDERED_LIST_R : UNORDERED_LIST_R\n  const LIST_ITEM_R = ordered ? ORDERED_LIST_ITEM_R : UNORDERED_LIST_ITEM_R\n  const LIST_ITEM_PREFIX_R = ordered\n    ? ORDERED_LIST_ITEM_PREFIX_R\n    : UNORDERED_LIST_ITEM_PREFIX_R\n\n  return {\n    match(source, state, prevCapture) {\n      // We only want to break into a list if we are at the start of a\n      // line. This is to avoid parsing \"hi * there\" with \"* there\"\n      // becoming a part of a list.\n      // You might wonder, \"but that's inline, so of course it wouldn't\n      // start a list?\". You would be correct! Except that some of our\n      // lists can be inline, because they might be inside another list,\n      // in which case we can parse with inline scope, but need to allow\n      // nested lists inside this inline scope.\n      const isStartOfLine = LIST_LOOKBEHIND_R.exec(prevCapture)\n      const isListBlock = state.list || (!state.inline && !state.simple)\n\n      if (isStartOfLine && isListBlock) {\n        source = isStartOfLine[1] + source\n\n        return LIST_R.exec(source)\n      } else {\n        return null\n      }\n    },\n    order: Priority.HIGH,\n    parse(capture, parse, state) {\n      const bullet = capture[2]\n      const start = ordered ? +bullet : undefined\n      const items = capture[0]\n        // recognize the end of a paragraph block inside a list item:\n        // two or more newlines at end end of the item\n        .replace(BLOCK_END_R, '\\n')\n        .match(LIST_ITEM_R)\n\n      let lastItemWasAParagraph = false\n      const itemContent = items.map(function (item, i) {\n        // We need to see how far indented the item is:\n        const space = LIST_ITEM_PREFIX_R.exec(item)[0].length\n\n        // And then we construct a regex to \"unindent\" the subsequent\n        // lines of the items by that amount:\n        const spaceRegex = new RegExp('^ {1,' + space + '}', 'gm')\n\n        // Before processing the item, we need a couple things\n        const content = item\n          // remove indents on trailing lines:\n          .replace(spaceRegex, '')\n          // remove the bullet:\n          .replace(LIST_ITEM_PREFIX_R, '')\n\n        // Handling \"loose\" lists, like:\n        //\n        //  * this is wrapped in a paragraph\n        //\n        //  * as is this\n        //\n        //  * as is this\n        const isLastItem = i === items.length - 1\n        const containsBlocks = content.indexOf('\\n\\n') !== -1\n\n        // Any element in a list is a block if it contains multiple\n        // newlines. The last element in the list can also be a block\n        // if the previous item in the list was a block (this is\n        // because non-last items in the list can end with \\n\\n, but\n        // the last item can't, so we just \"inherit\" this property\n        // from our previous element).\n        const thisItemIsAParagraph =\n          containsBlocks || (isLastItem && lastItemWasAParagraph)\n        lastItemWasAParagraph = thisItemIsAParagraph\n\n        // backup our state for restoration afterwards. We're going to\n        // want to set state.list to true, and state.inline depending\n        // on our list's looseness.\n        const oldStateInline = state.inline\n        const oldStateList = state.list\n        state.list = true\n\n        // Parse inline if we're in a tight list, or block if we're in\n        // a loose list.\n        let adjustedContent\n        if (thisItemIsAParagraph) {\n          state.inline = false\n          adjustedContent = content.replace(LIST_ITEM_END_R, '\\n\\n')\n        } else {\n          state.inline = true\n          adjustedContent = content.replace(LIST_ITEM_END_R, '')\n        }\n\n        const result = parse(adjustedContent, state)\n\n        // Restore our state before returning\n        state.inline = oldStateInline\n        state.list = oldStateList\n\n        return result\n      })\n\n      return {\n        items: itemContent,\n        ordered: ordered,\n        start: start,\n      }\n    },\n    render(node, output, state) {\n      const Tag = node.ordered ? 'ol' : 'ul'\n\n      return (\n        <Tag\n          key={state.key}\n          start={node.type === RuleType.orderedList ? node.start : undefined}\n        >\n          {node.items.map(function generateListItem(item, i) {\n            return <li key={i}>{output(item, state)}</li>\n          })}\n        </Tag>\n      )\n    },\n  }\n}\n\nconst LINK_INSIDE = '(?:\\\\[[^\\\\]]*\\\\]|[^\\\\[\\\\]]|\\\\](?=[^\\\\[]*\\\\]))*'\nconst LINK_HREF_AND_TITLE =\n  '\\\\s*<?((?:\\\\([^)]*\\\\)|[^\\\\s\\\\\\\\]|\\\\\\\\.)*?)>?(?:\\\\s+[\\'\"]([\\\\s\\\\S]*?)[\\'\"])?\\\\s*'\nconst LINK_R = new RegExp(\n  '^\\\\[(' + LINK_INSIDE + ')\\\\]\\\\(' + LINK_HREF_AND_TITLE + '\\\\)'\n)\nconst IMAGE_R = /^!\\[(.*?)\\]\\( *((?:\\([^)]*\\)|[^() ])*) *\"?([^)\"]*)?\"?\\)/\n\nconst NON_PARAGRAPH_BLOCK_SYNTAXES = [\n  BLOCKQUOTE_R,\n  CODE_BLOCK_FENCED_R,\n  CODE_BLOCK_R,\n  HEADING_R,\n  HEADING_SETEXT_R,\n  HEADING_ATX_COMPLIANT_R,\n  HTML_COMMENT_R,\n  NP_TABLE_R,\n  ORDERED_LIST_ITEM_R,\n  ORDERED_LIST_R,\n  UNORDERED_LIST_ITEM_R,\n  UNORDERED_LIST_R,\n]\n\nconst BLOCK_SYNTAXES = [\n  ...NON_PARAGRAPH_BLOCK_SYNTAXES,\n  PARAGRAPH_R,\n  HTML_BLOCK_ELEMENT_R,\n  HTML_SELF_CLOSING_ELEMENT_R,\n]\n\nfunction containsBlockSyntax(input: string) {\n  return BLOCK_SYNTAXES.some(r => r.test(input))\n}\n\n/** Remove symmetrical leading and trailing quotes */\nfunction unquote(str: string) {\n  const first = str[0]\n  if (\n    (first === '\"' || first === \"'\") &&\n    str.length >= 2 &&\n    str[str.length - 1] === first\n  ) {\n    return str.slice(1, -1)\n  }\n  return str\n}\n\n// based on https://stackoverflow.com/a/18123682/1141611\n// not complete, but probably good enough\nexport function slugify(str: string) {\n  return str\n    .replace(/[ÀÁÂÃÄÅàáâãäåæÆ]/g, 'a')\n    .replace(/[çÇ]/g, 'c')\n    .replace(/[ðÐ]/g, 'd')\n    .replace(/[ÈÉÊËéèêë]/g, 'e')\n    .replace(/[ÏïÎîÍíÌì]/g, 'i')\n    .replace(/[Ññ]/g, 'n')\n    .replace(/[øØœŒÕõÔôÓóÒò]/g, 'o')\n    .replace(/[ÜüÛûÚúÙù]/g, 'u')\n    .replace(/[ŸÿÝý]/g, 'y')\n    .replace(/[^a-z0-9- ]/gi, '')\n    .replace(/ /gi, '-')\n    .toLowerCase()\n}\n\nfunction parseTableAlignCapture(alignCapture: string) {\n  if (TABLE_RIGHT_ALIGN.test(alignCapture)) {\n    return 'right'\n  } else if (TABLE_CENTER_ALIGN.test(alignCapture)) {\n    return 'center'\n  } else if (TABLE_LEFT_ALIGN.test(alignCapture)) {\n    return 'left'\n  }\n\n  return null\n}\n\nfunction parseTableRow(\n  source: string,\n  parse: MarkdownToJSX.NestedParser,\n  state: MarkdownToJSX.State,\n  tableOutput: boolean\n): MarkdownToJSX.ParserResult[][] {\n  const prevInTable = state.inTable\n  state.inTable = true\n  let tableRow = source\n    .trim()\n    // isolate situations where a pipe should be ignored (inline code, HTML)\n    .split(/( *(?:`[^`]*`|<.*?>.*?<\\/.*?>(?!<\\/.*?>)|\\\\\\||\\|) *)/)\n    .reduce((nodes, fragment) => {\n      if (fragment.trim() === '|')\n        nodes.push(\n          tableOutput\n            ? { type: RuleType.tableSeparator }\n            : { type: RuleType.text, text: fragment }\n        )\n      else if (fragment !== '') nodes.push.apply(nodes, parse(fragment, state))\n      return nodes\n    }, [] as MarkdownToJSX.ParserResult[])\n  state.inTable = prevInTable\n\n  let cells = [[]]\n  tableRow.forEach(function (node, i) {\n    if (node.type === RuleType.tableSeparator) {\n      // Filter out empty table separators at the start/end:\n      if (i !== 0 && i !== tableRow.length - 1) {\n        // Split the current row:\n        cells.push([])\n      }\n    } else {\n      if (\n        node.type === RuleType.text &&\n        (tableRow[i + 1] == null ||\n          tableRow[i + 1].type === RuleType.tableSeparator)\n      ) {\n        node.text = node.text.trimEnd()\n      }\n      cells[cells.length - 1].push(node)\n    }\n  })\n  return cells\n}\n\nfunction parseTableAlign(source: string /*, parse, state*/) {\n  const alignText = source.replace(TABLE_TRIM_PIPES, '').split('|')\n\n  return alignText.map(parseTableAlignCapture)\n}\n\nfunction parseTableCells(\n  source: string,\n  parse: MarkdownToJSX.NestedParser,\n  state: MarkdownToJSX.State\n) {\n  const rowsText = source.trim().split('\\n')\n\n  return rowsText.map(function (rowText) {\n    return parseTableRow(rowText, parse, state, true)\n  })\n}\n\nfunction parseTable(\n  capture: RegExpMatchArray,\n  parse: MarkdownToJSX.NestedParser,\n  state: MarkdownToJSX.State\n) {\n  /**\n   * The table syntax makes some other parsing angry so as a bit of a hack even if alignment and/or cell rows are missing,\n   * we'll still run a detected first row through the parser and then just emit a paragraph.\n   */\n  state.inline = true\n  const align = capture[2] ? parseTableAlign(capture[2]) : []\n  const cells = capture[3] ? parseTableCells(capture[3], parse, state) : []\n  const header = parseTableRow(capture[1], parse, state, !!cells.length)\n  state.inline = false\n\n  return cells.length\n    ? {\n        align: align,\n        cells: cells,\n        header: header,\n        type: RuleType.table,\n      }\n    : {\n        children: header,\n        type: RuleType.paragraph,\n      }\n}\n\nfunction getTableStyle(node, colIndex) {\n  return node.align[colIndex] == null\n    ? {}\n    : {\n        textAlign: node.align[colIndex],\n      }\n}\n\n/** TODO: remove for react 16 */\nfunction normalizeAttributeKey(key) {\n  const hyphenIndex = key.indexOf('-')\n\n  if (hyphenIndex !== -1 && key.match(HTML_CUSTOM_ATTR_R) === null) {\n    key = key.replace(CAPTURE_LETTER_AFTER_HYPHEN, function (_, letter) {\n      return letter.toUpperCase()\n    })\n  }\n\n  return key\n}\n\nfunction attributeValueToJSXPropValue(\n  key: keyof React.AllHTMLAttributes<Element>,\n  value: string\n): any {\n  if (key === 'style') {\n    return value.split(/;\\s?/).reduce(function (styles, kvPair) {\n      const key = kvPair.slice(0, kvPair.indexOf(':'))\n\n      // snake-case to camelCase\n      // also handles PascalCasing vendor prefixes\n      const camelCasedKey = key\n        .trim()\n        .replace(/(-[a-z])/g, substr => substr[1].toUpperCase())\n\n      // key.length + 1 to skip over the colon\n      styles[camelCasedKey] = kvPair.slice(key.length + 1).trim()\n\n      return styles\n    }, {})\n  } else if (key === 'href' || key === 'src') {\n    return sanitizeUrl(value)\n  } else if (value.match(INTERPOLATION_R)) {\n    // return as a string and let the consumer decide what to do with it\n    value = value.slice(1, value.length - 1)\n  }\n\n  if (value === 'true') {\n    return true\n  } else if (value === 'false') {\n    return false\n  }\n\n  return value\n}\n\nfunction normalizeWhitespace(source: string): string {\n  return source\n    .replace(CR_NEWLINE_R, '\\n')\n    .replace(FORMFEED_R, '')\n    .replace(TAB_R, '    ')\n}\n\n/**\n * Creates a parser for a given set of rules, with the precedence\n * specified as a list of rules.\n *\n * @rules: an object containing\n * rule type -> {match, order, parse} objects\n * (lower order is higher precedence)\n * (Note: `order` is added to defaultRules after creation so that\n *  the `order` of defaultRules in the source matches the `order`\n *  of defaultRules in terms of `order` fields.)\n *\n * @returns The resulting parse function, with the following parameters:\n *   @source: the input source string to be parsed\n *   @state: an optional object to be threaded through parse\n *     calls. Allows clients to add stateful operations to\n *     parsing, such as keeping track of how many levels deep\n *     some nesting is. For an example use-case, see passage-ref\n *     parsing in src/widgets/passage/passage-markdown.jsx\n */\nfunction parserFor(\n  rules: MarkdownToJSX.Rules\n): (\n  source: string,\n  state: MarkdownToJSX.State\n) => ReturnType<MarkdownToJSX.NestedParser> {\n  // Sorts rules in order of increasing order, then\n  // ascending rule name in case of ties.\n  let ruleList = Object.keys(rules)\n\n  if (process.env.NODE_ENV !== 'production') {\n    ruleList.forEach(function (type) {\n      let order = rules[type].order\n      if (\n        process.env.NODE_ENV !== 'production' &&\n        (typeof order !== 'number' || !isFinite(order))\n      ) {\n        console.warn(\n          'markdown-to-jsx: Invalid order for rule `' + type + '`: ' + order\n        )\n      }\n    })\n  }\n\n  ruleList.sort(function (typeA, typeB) {\n    let orderA = rules[typeA].order\n    let orderB = rules[typeB].order\n\n    // Sort based on increasing order\n    if (orderA !== orderB) {\n      return orderA - orderB\n    } else if (typeA < typeB) {\n      return -1\n    }\n\n    return 1\n  })\n\n  function nestedParse(\n    source: string,\n    state: MarkdownToJSX.State\n  ): MarkdownToJSX.ParserResult[] {\n    let result = []\n\n    // We store the previous capture so that match functions can\n    // use some limited amount of lookbehind. Lists use this to\n    // ensure they don't match arbitrary '- ' or '* ' in inline\n    // text (see the list rule for more information).\n    let prevCapture = ''\n    while (source) {\n      let i = 0\n      while (i < ruleList.length) {\n        const ruleType = ruleList[i]\n        const rule = rules[ruleType]\n        const capture = rule.match(source, state, prevCapture)\n\n        if (capture) {\n          const currCaptureString = capture[0]\n          source = source.substring(currCaptureString.length)\n          const parsed = rule.parse(capture, nestedParse, state)\n\n          // We also let rules override the default type of\n          // their parsed node if they would like to, so that\n          // there can be a single output function for all links,\n          // even if there are several rules to parse them.\n          if (parsed.type == null) {\n            parsed.type = ruleType as unknown as RuleType\n          }\n\n          result.push(parsed)\n\n          prevCapture = currCaptureString\n          break\n        }\n\n        i++\n      }\n    }\n\n    return result\n  }\n\n  return function outerParse(source, state) {\n    return nestedParse(normalizeWhitespace(source), state)\n  }\n}\n\n// Creates a match function for an inline scoped or simple element from a regex\nfunction inlineRegex(regex: RegExp) {\n  return function match(source, state: MarkdownToJSX.State) {\n    if (state.inline) {\n      return regex.exec(source)\n    } else {\n      return null\n    }\n  }\n}\n\n// basically any inline element except links\nfunction simpleInlineRegex(regex: RegExp) {\n  return function match(source: string, state: MarkdownToJSX.State) {\n    if (state.inline || state.simple) {\n      return regex.exec(source)\n    } else {\n      return null\n    }\n  }\n}\n\n// Creates a match function for a block scoped element from a regex\nfunction blockRegex(regex: RegExp) {\n  return function match(source: string, state: MarkdownToJSX.State) {\n    if (state.inline || state.simple) {\n      return null\n    } else {\n      return regex.exec(source)\n    }\n  }\n}\n\n// Creates a match function from a regex, ignoring block/inline scope\nfunction anyScopeRegex(regex: RegExp) {\n  return function match(source: string /*, state*/) {\n    return regex.exec(source)\n  }\n}\n\nfunction matchParagraph(\n  source: string,\n  state: MarkdownToJSX.State,\n  prevCapturedString?: string\n) {\n  if (state.inline || state.simple) {\n    return null\n  }\n\n  if (prevCapturedString && !prevCapturedString.endsWith('\\n')) {\n    // don't match continuation of a line\n    return null\n  }\n\n  let match = ''\n\n  source.split('\\n').every(line => {\n    // bail out on first sign of non-paragraph block\n    if (NON_PARAGRAPH_BLOCK_SYNTAXES.some(regex => regex.test(line))) {\n      return false\n    }\n    match += line + '\\n'\n    return line.trim()\n  })\n\n  const captured = match.trimEnd()\n  if (captured == '') {\n    return null\n  }\n\n  return [match, captured]\n}\n\nfunction sanitizeUrl(url: string): string | undefined {\n  try {\n    const decoded = decodeURIComponent(url).replace(/[^A-Za-z0-9/:]/g, '')\n\n    if (decoded.match(/^\\s*(javascript|vbscript|data(?!:image)):/i)) {\n      if (process.env.NODE_ENV !== 'production') {\n        console.warn(\n          'Anchor URL contains an unsafe JavaScript/VBScript/data expression, it will not be rendered.',\n          decoded\n        )\n      }\n\n      return undefined\n    }\n  } catch (e) {\n    if (process.env.NODE_ENV !== 'production') {\n      console.warn(\n        'Anchor URL could not be decoded due to malformed syntax or characters, it will not be rendered.',\n        url\n      )\n    }\n\n    // decodeURIComponent sometimes throws a URIError\n    // See `decodeURIComponent('a%AFc');`\n    // http://stackoverflow.com/questions/9064536/javascript-decodeuricomponent-malformed-uri-exception\n    return null\n  }\n\n  return url\n}\n\nfunction unescapeUrl(rawUrlString: string): string {\n  return rawUrlString.replace(UNESCAPE_URL_R, '$1')\n}\n\n/**\n * Everything inline, including links.\n */\nfunction parseInline(\n  parse: MarkdownToJSX.NestedParser,\n  children: string,\n  state: MarkdownToJSX.State\n): MarkdownToJSX.ParserResult[] {\n  const isCurrentlyInline = state.inline || false\n  const isCurrentlySimple = state.simple || false\n  state.inline = true\n  state.simple = true\n  const result = parse(children, state)\n  state.inline = isCurrentlyInline\n  state.simple = isCurrentlySimple\n  return result\n}\n\n/**\n * Anything inline that isn't a link.\n */\nfunction parseSimpleInline(\n  parse: MarkdownToJSX.NestedParser,\n  children: string,\n  state: MarkdownToJSX.State\n): MarkdownToJSX.ParserResult[] {\n  const isCurrentlyInline = state.inline || false\n  const isCurrentlySimple = state.simple || false\n  state.inline = false\n  state.simple = true\n  const result = parse(children, state)\n  state.inline = isCurrentlyInline\n  state.simple = isCurrentlySimple\n  return result\n}\n\nfunction parseBlock(\n  parse,\n  children,\n  state: MarkdownToJSX.State\n): MarkdownToJSX.ParserResult[] {\n  const isCurrentlyInline = state.inline || false\n  state.inline = false\n  const result = parse(children, state)\n  state.inline = isCurrentlyInline\n  return result\n}\n\nconst parseCaptureInline: MarkdownToJSX.Parser<{\n  children: MarkdownToJSX.ParserResult[]\n}> = (capture, parse, state: MarkdownToJSX.State) => {\n  return {\n    children: parseInline(parse, capture[1], state),\n  }\n}\n\nfunction captureNothing() {\n  return {}\n}\n\nfunction renderNothing() {\n  return null\n}\n\nfunction reactFor(render) {\n  return function patchedRender(\n    ast: MarkdownToJSX.ParserResult | MarkdownToJSX.ParserResult[],\n    state: MarkdownToJSX.State = {}\n  ): React.ReactChild[] {\n    if (Array.isArray(ast)) {\n      const oldKey = state.key\n      const result = []\n\n      // map nestedOutput over the ast, except group any text\n      // nodes together into a single string output.\n      let lastWasString = false\n\n      for (let i = 0; i < ast.length; i++) {\n        state.key = i\n\n        const nodeOut = patchedRender(ast[i], state)\n        const isString = typeof nodeOut === 'string'\n\n        if (isString && lastWasString) {\n          result[result.length - 1] += nodeOut\n        } else if (nodeOut !== null) {\n          result.push(nodeOut)\n        }\n\n        lastWasString = isString\n      }\n\n      state.key = oldKey\n\n      return result\n    }\n\n    return render(ast, patchedRender, state)\n  }\n}\n\nfunction createRenderer(\n  rules: MarkdownToJSX.Rules,\n  userRender?: MarkdownToJSX.Options['renderRule']\n) {\n  return function renderRule(\n    ast: MarkdownToJSX.ParserResult,\n    render: MarkdownToJSX.RuleOutput,\n    state: MarkdownToJSX.State\n  ): React.ReactChild {\n    const renderer = rules[ast.type].render as MarkdownToJSX.Rule['render']\n\n    return userRender\n      ? userRender(() => renderer(ast, render, state), ast, render, state)\n      : renderer(ast, render, state)\n  }\n}\n\nfunction cx(...args) {\n  return args.filter(Boolean).join(' ')\n}\n\nfunction get(src: Object, path: string, fb?: any) {\n  let ptr = src\n  const frags = path.split('.')\n\n  while (frags.length) {\n    ptr = ptr[frags[0]]\n\n    if (ptr === undefined) break\n    else frags.shift()\n  }\n\n  return ptr || fb\n}\n\nfunction getTag(tag: string, overrides: MarkdownToJSX.Overrides) {\n  const override = get(overrides, tag)\n\n  if (!override) return tag\n\n  return typeof override === 'function' ||\n    (typeof override === 'object' && 'render' in override)\n    ? override\n    : get(overrides, `${tag}.component`, tag)\n}\n\nexport function compiler(\n  markdown: string = '',\n  options: MarkdownToJSX.Options = {}\n) {\n  options.overrides = options.overrides || {}\n  options.slugify = options.slugify || slugify\n  options.namedCodesToUnicode = options.namedCodesToUnicode\n    ? { ...namedCodesToUnicode, ...options.namedCodesToUnicode }\n    : namedCodesToUnicode\n\n  const createElementFn = options.createElement || React.createElement\n\n  // JSX custom pragma\n  // eslint-disable-next-line no-unused-vars\n  function h(\n    // locally we always will render a known string tag\n    tag: MarkdownToJSX.HTMLTags,\n    props: Parameters<MarkdownToJSX.CreateElement>[1] & {\n      className?: string\n      id?: string\n    },\n    ...children\n  ) {\n    const overrideProps = get(options.overrides, `${tag}.props`, {})\n\n    return createElementFn(\n      getTag(tag, options.overrides),\n      {\n        ...props,\n        ...overrideProps,\n        className: cx(props?.className, overrideProps.className) || undefined,\n      },\n      ...children\n    )\n  }\n\n  function compile(input: string): JSX.Element {\n    input = input.replace(FRONT_MATTER_R, '')\n\n    let inline = false\n\n    if (options.forceInline) {\n      inline = true\n    } else if (!options.forceBlock) {\n      /**\n       * should not contain any block-level markdown like newlines, lists, headings,\n       * thematic breaks, blockquotes, tables, etc\n       */\n      inline = SHOULD_RENDER_AS_BLOCK_R.test(input) === false\n    }\n\n    const arr = emitter(\n      parser(\n        inline\n          ? input\n          : `${input.trimEnd().replace(TRIM_STARTING_NEWLINES, '')}\\n\\n`,\n        {\n          inline,\n        }\n      )\n    )\n\n    while (\n      typeof arr[arr.length - 1] === 'string' &&\n      !arr[arr.length - 1].trim()\n    ) {\n      arr.pop()\n    }\n\n    if (options.wrapper === null) {\n      return arr\n    }\n\n    const wrapper = options.wrapper || (inline ? 'span' : 'div')\n    let jsx\n\n    if (arr.length > 1 || options.forceWrapper) {\n      jsx = arr\n    } else if (arr.length === 1) {\n      jsx = arr[0]\n\n      // TODO: remove this for React 16\n      if (typeof jsx === 'string') {\n        return <span key=\"outer\">{jsx}</span>\n      } else {\n        return jsx\n      }\n    } else {\n      // TODO: return null for React 16\n      jsx = null\n    }\n\n    return React.createElement(wrapper, { key: 'outer' }, jsx)\n  }\n\n  function attrStringToMap(str: string): JSX.IntrinsicAttributes {\n    const attributes = str.match(ATTR_EXTRACTOR_R)\n    if (!attributes) {\n      return null\n    }\n\n    return attributes.reduce(function (map, raw, index) {\n      const delimiterIdx = raw.indexOf('=')\n\n      if (delimiterIdx !== -1) {\n        const key = normalizeAttributeKey(raw.slice(0, delimiterIdx)).trim()\n        const value = unquote(raw.slice(delimiterIdx + 1).trim())\n\n        const mappedKey = ATTRIBUTE_TO_JSX_PROP_MAP[key] || key\n        const normalizedValue = (map[mappedKey] = attributeValueToJSXPropValue(\n          key,\n          value\n        ))\n\n        if (\n          typeof normalizedValue === 'string' &&\n          (HTML_BLOCK_ELEMENT_R.test(normalizedValue) ||\n            HTML_SELF_CLOSING_ELEMENT_R.test(normalizedValue))\n        ) {\n          map[mappedKey] = React.cloneElement(compile(normalizedValue.trim()), {\n            key: index,\n          })\n        }\n      } else if (raw !== 'style') {\n        map[ATTRIBUTE_TO_JSX_PROP_MAP[raw] || raw] = true\n      }\n\n      return map\n    }, {})\n  }\n\n  if (process.env.NODE_ENV !== 'production') {\n    if (typeof markdown !== 'string') {\n      throw new Error(`markdown-to-jsx: the first argument must be\n                             a string`)\n    }\n\n    if (\n      Object.prototype.toString.call(options.overrides) !== '[object Object]'\n    ) {\n      throw new Error(`markdown-to-jsx: options.overrides (second argument property) must be\n                             undefined or an object literal with shape:\n                             {\n                                htmltagname: {\n                                    component: string|ReactComponent(optional),\n                                    props: object(optional)\n                                }\n                             }`)\n    }\n  }\n\n  const footnotes: { footnote: string; identifier: string }[] = []\n  const refs: { [key: string]: { target: string; title: string } } = {}\n\n  /**\n   * each rule's react() output function goes through our custom\n   * h() JSX pragma; this allows the override functionality to be\n   * automatically applied\n   */\n  // @ts-ignore\n  const rules: MarkdownToJSX.Rules = {\n    [RuleType.blockQuote]: {\n      match: blockRegex(BLOCKQUOTE_R),\n      order: Priority.HIGH,\n      parse(capture, parse, state) {\n        return {\n          children: parse(\n            capture[0].replace(BLOCKQUOTE_TRIM_LEFT_MULTILINE_R, ''),\n            state\n          ),\n        }\n      },\n      render(node, output, state) {\n        return (\n          <blockquote key={state.key}>\n            {output(node.children, state)}\n          </blockquote>\n        )\n      },\n    },\n\n    [RuleType.breakLine]: {\n      match: anyScopeRegex(BREAK_LINE_R),\n      order: Priority.HIGH,\n      parse: captureNothing,\n      render(_, __, state) {\n        return <br key={state.key} />\n      },\n    },\n\n    [RuleType.breakThematic]: {\n      match: blockRegex(BREAK_THEMATIC_R),\n      order: Priority.HIGH,\n      parse: captureNothing,\n      render(_, __, state) {\n        return <hr key={state.key} />\n      },\n    },\n\n    [RuleType.codeBlock]: {\n      match: blockRegex(CODE_BLOCK_R),\n      order: Priority.MAX,\n      parse(capture /*, parse, state*/) {\n        return {\n          lang: undefined,\n          text: capture[0].replace(/^ {4}/gm, '').replace(/\\n+$/, ''),\n        }\n      },\n\n      render(node, output, state) {\n        return (\n          <pre key={state.key}>\n            <code\n              {...node.attrs}\n              className={node.lang ? `lang-${node.lang}` : ''}\n            >\n              {node.text}\n            </code>\n          </pre>\n        )\n      },\n    } as MarkdownToJSX.Rule<{\n      attrs?: ReturnType<typeof attrStringToMap>\n      lang?: string\n      text: string\n    }>,\n\n    [RuleType.codeFenced]: {\n      match: blockRegex(CODE_BLOCK_FENCED_R),\n      order: Priority.MAX,\n      parse(capture /*, parse, state*/) {\n        return {\n          // if capture[3] it's additional metadata\n          attrs: attrStringToMap(capture[3] || ''),\n          lang: capture[2] || undefined,\n          text: capture[4],\n          type: RuleType.codeBlock,\n        }\n      },\n    },\n\n    [RuleType.codeInline]: {\n      match: simpleInlineRegex(CODE_INLINE_R),\n      order: Priority.LOW,\n      parse(capture /*, parse, state*/) {\n        return {\n          text: capture[2],\n        }\n      },\n      render(node, output, state) {\n        return <code key={state.key}>{node.text}</code>\n      },\n    },\n\n    /**\n     * footnotes are emitted at the end of compilation in a special <footer> block\n     */\n    [RuleType.footnote]: {\n      match: blockRegex(FOOTNOTE_R),\n      order: Priority.MAX,\n      parse(capture /*, parse, state*/) {\n        footnotes.push({\n          footnote: capture[2],\n          identifier: capture[1],\n        })\n\n        return {}\n      },\n      render: renderNothing,\n    },\n\n    [RuleType.footnoteReference]: {\n      match: inlineRegex(FOOTNOTE_REFERENCE_R),\n      order: Priority.HIGH,\n      parse(capture /*, parse*/) {\n        return {\n          target: `#${options.slugify(capture[1])}`,\n          text: capture[1],\n        }\n      },\n      render(node, output, state) {\n        return (\n          <a key={state.key} href={sanitizeUrl(node.target)}>\n            <sup key={state.key}>{node.text}</sup>\n          </a>\n        )\n      },\n    } as MarkdownToJSX.Rule<{ target: string; text: string }>,\n\n    [RuleType.gfmTask]: {\n      match: inlineRegex(GFM_TASK_R),\n      order: Priority.HIGH,\n      parse(capture /*, parse, state*/) {\n        return {\n          completed: capture[1].toLowerCase() === 'x',\n        }\n      },\n      render(node, output, state) {\n        return (\n          <input\n            checked={node.completed}\n            key={state.key}\n            readOnly\n            type=\"checkbox\"\n          />\n        )\n      },\n    } as MarkdownToJSX.Rule<{ completed: boolean }>,\n\n    [RuleType.heading]: {\n      match: blockRegex(\n        options.enforceAtxHeadings ? HEADING_ATX_COMPLIANT_R : HEADING_R\n      ),\n      order: Priority.HIGH,\n      parse(capture, parse, state) {\n        return {\n          children: parseInline(parse, capture[2], state),\n          id: options.slugify(capture[2]),\n          level: capture[1].length as MarkdownToJSX.HeadingNode['level'],\n        }\n      },\n      render(node, output, state) {\n        return h(\n          `h${node.level}`,\n          { id: node.id, key: state.key },\n          output(node.children, state)\n        )\n      },\n    },\n\n    [RuleType.headingSetext]: {\n      match: blockRegex(HEADING_SETEXT_R),\n      order: Priority.MAX,\n      parse(capture, parse, state) {\n        return {\n          children: parseInline(parse, capture[1], state),\n          level: capture[2] === '=' ? 1 : 2,\n          type: RuleType.heading,\n        }\n      },\n    },\n\n    [RuleType.htmlBlock]: {\n      /**\n       * find the first matching end tag and process the interior\n       */\n      match: anyScopeRegex(HTML_BLOCK_ELEMENT_R),\n      order: Priority.HIGH,\n      parse(capture, parse, state) {\n        const [, whitespace] = capture[3].match(HTML_LEFT_TRIM_AMOUNT_R)\n\n        const trimmer = new RegExp(`^${whitespace}`, 'gm')\n        const trimmed = capture[3].replace(trimmer, '')\n\n        const parseFunc = containsBlockSyntax(trimmed)\n          ? parseBlock\n          : parseInline\n\n        const tagName = capture[1].toLowerCase() as MarkdownToJSX.HTMLTags\n        const noInnerParse =\n          DO_NOT_PROCESS_HTML_ELEMENTS.indexOf(tagName) !== -1\n\n        const ast = {\n          attrs: attrStringToMap(capture[2]),\n          noInnerParse: noInnerParse,\n          tag: (noInnerParse ? tagName : capture[1]).trim(),\n        } as {\n          attrs: ReturnType<typeof attrStringToMap>\n          children?: ReturnType<MarkdownToJSX.NestedParser> | undefined\n          noInnerParse: Boolean\n          tag: MarkdownToJSX.HTMLTags\n          text?: string | undefined\n        }\n\n        state.inAnchor = state.inAnchor || tagName === 'a'\n\n        if (noInnerParse) {\n          ast.text = capture[3]\n        } else {\n          ast.children = parseFunc(parse, trimmed, state)\n        }\n\n        /**\n         * if another html block is detected within, parse as block,\n         * otherwise parse as inline to pick up any further markdown\n         */\n        state.inAnchor = false\n\n        return ast\n      },\n      render(node, output, state) {\n        return (\n          <node.tag key={state.key} {...node.attrs}>\n            {node.text || output(node.children, state)}\n          </node.tag>\n        )\n      },\n    },\n\n    [RuleType.htmlSelfClosing]: {\n      /**\n       * find the first matching end tag and process the interior\n       */\n      match: anyScopeRegex(HTML_SELF_CLOSING_ELEMENT_R),\n      order: Priority.HIGH,\n      parse(capture /*, parse, state*/) {\n        return {\n          attrs: attrStringToMap(capture[2] || ''),\n          tag: capture[1].trim(),\n        }\n      },\n      render(node, output, state) {\n        return <node.tag {...node.attrs} key={state.key} />\n      },\n    },\n\n    [RuleType.htmlComment]: {\n      match: anyScopeRegex(HTML_COMMENT_R),\n      order: Priority.HIGH,\n      parse() {\n        return {}\n      },\n      render: renderNothing,\n    },\n\n    [RuleType.image]: {\n      match: simpleInlineRegex(IMAGE_R),\n      order: Priority.HIGH,\n      parse(capture /*, parse, state*/) {\n        return {\n          alt: capture[1],\n          target: unescapeUrl(capture[2]),\n          title: capture[3],\n        }\n      },\n      render(node, output, state) {\n        return (\n          <img\n            key={state.key}\n            alt={node.alt || undefined}\n            title={node.title || undefined}\n            src={sanitizeUrl(node.target)}\n          />\n        )\n      },\n    } as MarkdownToJSX.Rule<{\n      alt?: string\n      target: string\n      title?: string\n    }>,\n\n    [RuleType.link]: {\n      match: inlineRegex(LINK_R),\n      order: Priority.LOW,\n      parse(capture, parse, state) {\n        return {\n          children: parseSimpleInline(parse, capture[1], state),\n          target: unescapeUrl(capture[2]),\n          title: capture[3],\n        }\n      },\n      render(node, output, state) {\n        return (\n          <a key={state.key} href={sanitizeUrl(node.target)} title={node.title}>\n            {output(node.children, state)}\n          </a>\n        )\n      },\n    },\n\n    // https://daringfireball.net/projects/markdown/syntax#autolink\n    [RuleType.linkAngleBraceStyleDetector]: {\n      match: inlineRegex(LINK_AUTOLINK_R),\n      order: Priority.MAX,\n      parse(capture /*, parse, state*/) {\n        return {\n          children: [\n            {\n              text: capture[1],\n              type: RuleType.text,\n            },\n          ],\n          target: capture[1],\n          type: RuleType.link,\n        }\n      },\n    },\n\n    [RuleType.linkBareUrlDetector]: {\n      match: (source, state) => {\n        if (state.inAnchor) {\n          return null\n        }\n        return inlineRegex(LINK_AUTOLINK_BARE_URL_R)(source, state)\n      },\n      order: Priority.MAX,\n      parse(capture /*, parse, state*/) {\n        return {\n          children: [\n            {\n              text: capture[1],\n              type: RuleType.text,\n            },\n          ],\n          target: capture[1],\n          title: undefined,\n          type: RuleType.link,\n        }\n      },\n    },\n\n    [RuleType.linkMailtoDetector]: {\n      match: inlineRegex(LINK_AUTOLINK_MAILTO_R),\n      order: Priority.MAX,\n      parse(capture /*, parse, state*/) {\n        let address = capture[1]\n        let target = capture[1]\n\n        // Check for a `mailto:` already existing in the link:\n        if (!AUTOLINK_MAILTO_CHECK_R.test(target)) {\n          target = 'mailto:' + target\n        }\n\n        return {\n          children: [\n            {\n              text: address.replace('mailto:', ''),\n              type: RuleType.text,\n            },\n          ],\n          target: target,\n          type: RuleType.link,\n        }\n      },\n    },\n\n    [RuleType.orderedList]: generateListRule(\n      h,\n      ORDERED\n    ) as MarkdownToJSX.Rule<MarkdownToJSX.OrderedListNode>,\n\n    [RuleType.unorderedList]: generateListRule(\n      h,\n      UNORDERED\n    ) as MarkdownToJSX.Rule<MarkdownToJSX.UnorderedListNode>,\n\n    [RuleType.newlineCoalescer]: {\n      match: blockRegex(CONSECUTIVE_NEWLINE_R),\n      order: Priority.LOW,\n      parse: captureNothing,\n      render(/*node, output, state*/) {\n        return '\\n'\n      },\n    },\n\n    [RuleType.paragraph]: {\n      match: matchParagraph,\n      order: Priority.LOW,\n      parse: parseCaptureInline,\n      render(node, output, state) {\n        return <p key={state.key}>{output(node.children, state)}</p>\n      },\n    } as MarkdownToJSX.Rule<ReturnType<typeof parseCaptureInline>>,\n\n    [RuleType.ref]: {\n      match: inlineRegex(REFERENCE_IMAGE_OR_LINK),\n      order: Priority.MAX,\n      parse(capture /*, parse*/) {\n        refs[capture[1]] = {\n          target: capture[2],\n          title: capture[4],\n        }\n\n        return {}\n      },\n      render: renderNothing,\n    },\n\n    [RuleType.refImage]: {\n      match: simpleInlineRegex(REFERENCE_IMAGE_R),\n      order: Priority.MAX,\n      parse(capture) {\n        return {\n          alt: capture[1] || undefined,\n          ref: capture[2],\n        }\n      },\n      render(node, output, state) {\n        return refs[node.ref] ? (\n          <img\n            key={state.key}\n            alt={node.alt}\n            src={sanitizeUrl(refs[node.ref].target)}\n            title={refs[node.ref].title}\n          />\n        ) : null\n      },\n    } as MarkdownToJSX.Rule<{ alt?: string; ref: string }>,\n\n    [RuleType.refLink]: {\n      match: inlineRegex(REFERENCE_LINK_R),\n      order: Priority.MAX,\n      parse(capture, parse, state) {\n        return {\n          children: parse(capture[1], state),\n          fallbackChildren: parse(\n            capture[0].replace(SQUARE_BRACKETS_R, '\\\\$1'),\n            state\n          ),\n          ref: capture[2],\n        }\n      },\n      render(node, output, state) {\n        return refs[node.ref] ? (\n          <a\n            key={state.key}\n            href={sanitizeUrl(refs[node.ref].target)}\n            title={refs[node.ref].title}\n          >\n            {output(node.children, state)}\n          </a>\n        ) : (\n          <span key={state.key}>{output(node.fallbackChildren, state)}</span>\n        )\n      },\n    },\n\n    [RuleType.table]: {\n      match: blockRegex(NP_TABLE_R),\n      order: Priority.HIGH,\n      parse: parseTable,\n      render(node, output, state) {\n        const table = node as MarkdownToJSX.TableNode\n        return (\n          <table key={state.key}>\n            <thead>\n              <tr>\n                {table.header.map(function generateHeaderCell(content, i) {\n                  return (\n                    <th key={i} style={getTableStyle(table, i)}>\n                      {output(content, state)}\n                    </th>\n                  )\n                })}\n              </tr>\n            </thead>\n\n            <tbody>\n              {table.cells.map(function generateTableRow(row, i) {\n                return (\n                  <tr key={i}>\n                    {row.map(function generateTableCell(content, c) {\n                      return (\n                        <td key={c} style={getTableStyle(table, c)}>\n                          {output(content, state)}\n                        </td>\n                      )\n                    })}\n                  </tr>\n                )\n              })}\n            </tbody>\n          </table>\n        )\n      },\n    },\n\n    [RuleType.text]: {\n      // Here we look for anything followed by non-symbols,\n      // double newlines, or double-space-newlines\n      // We break on any symbol characters so that this grammar\n      // is easy to extend without needing to modify this regex\n      match: anyScopeRegex(TEXT_PLAIN_R),\n      order: Priority.MIN,\n      parse(capture /*, parse, state*/) {\n        return {\n          text: capture[0]\n            // nbsp -> unicode equivalent for named chars\n            .replace(HTML_CHAR_CODE_R, (full, inner) => {\n              return options.namedCodesToUnicode[inner]\n                ? options.namedCodesToUnicode[inner]\n                : full\n            }),\n        }\n      },\n      render(node /*, output, state*/) {\n        return node.text\n      },\n    },\n\n    [RuleType.textBolded]: {\n      match: simpleInlineRegex(TEXT_BOLD_R),\n      order: Priority.MED,\n      parse(capture, parse, state) {\n        return {\n          // capture[1] -> the syntax control character\n          // capture[2] -> inner content\n          children: parse(capture[2], state),\n        }\n      },\n      render(node, output, state) {\n        return <strong key={state.key}>{output(node.children, state)}</strong>\n      },\n    },\n\n    [RuleType.textEmphasized]: {\n      match: simpleInlineRegex(TEXT_EMPHASIZED_R),\n      order: Priority.LOW,\n      parse(capture, parse, state) {\n        return {\n          // capture[1] -> opening * or _\n          // capture[2] -> inner content\n          children: parse(capture[2], state),\n        }\n      },\n      render(node, output, state) {\n        return <em key={state.key}>{output(node.children, state)}</em>\n      },\n    },\n\n    [RuleType.textEscaped]: {\n      // We don't allow escaping numbers, letters, or spaces here so that\n      // backslashes used in plain text still get rendered. But allowing\n      // escaping anything else provides a very flexible escape mechanism,\n      // regardless of how this grammar is extended.\n      match: simpleInlineRegex(TEXT_ESCAPED_R),\n      order: Priority.HIGH,\n      parse(capture /*, parse, state*/) {\n        return {\n          text: capture[1],\n          type: RuleType.text,\n        }\n      },\n    },\n\n    [RuleType.textMarked]: {\n      match: simpleInlineRegex(TEXT_MARKED_R),\n      order: Priority.LOW,\n      parse: parseCaptureInline,\n      render(node, output, state) {\n        return <mark key={state.key}>{output(node.children, state)}</mark>\n      },\n    },\n\n    [RuleType.textStrikethroughed]: {\n      match: simpleInlineRegex(TEXT_STRIKETHROUGHED_R),\n      order: Priority.LOW,\n      parse: parseCaptureInline,\n      render(node, output, state) {\n        return <del key={state.key}>{output(node.children, state)}</del>\n      },\n    },\n  }\n\n  // Object.keys(rules).forEach(key => {\n  //   let { match: match, parse: parse } = rules[key]\n\n  //   rules[key].match = (...args) => {\n  //     const start = performance.now()\n  //     const result = match(...args)\n  //     const delta = performance.now() - start\n\n  //     if (delta > 5)\n  //       console.warn(\n  //         `Slow match for ${key}: ${delta.toFixed(3)}ms, input: ${args[0]}`\n  //       )\n\n  //     return result\n  //   }\n\n  //   rules[key].parse = (...args) => {\n  //     const start = performance.now()\n  //     const result = parse(...args)\n  //     const delta = performance.now() - start\n\n  //     if (delta > 5)\n  //       console.warn(`Slow parse for ${key}: ${delta.toFixed(3)}ms`)\n\n  //     console.log(`${key}:parse`, `${delta.toFixed(3)}ms`, args[0])\n\n  //     return result\n  //   }\n  // })\n\n  if (options.disableParsingRawHTML === true) {\n    delete rules[RuleType.htmlBlock]\n    delete rules[RuleType.htmlSelfClosing]\n  }\n\n  const parser = parserFor(rules)\n  const emitter: Function = reactFor(createRenderer(rules, options.renderRule))\n\n  const jsx = compile(markdown)\n\n  if (footnotes.length) {\n    return (\n      <div>\n        {jsx}\n        <footer key=\"footer\">\n          {footnotes.map(function createFootnote(def) {\n            return (\n              <div id={options.slugify(def.identifier)} key={def.identifier}>\n                {def.identifier}\n                {emitter(parser(def.footnote, { inline: true }))}\n              </div>\n            )\n          })}\n        </footer>\n      </div>\n    )\n  }\n\n  return jsx\n}\n\n/**\n * A simple HOC for easy React use. Feed the markdown content as a direct child\n * and the rest is taken care of automatically.\n */\nconst Markdown: React.FC<{\n  [key: string]: any\n  children: string\n  options?: MarkdownToJSX.Options\n}> = ({ children = '', options, ...props }) => {\n  if (process.env.NODE_ENV !== 'production' && typeof children !== 'string') {\n    console.error(\n      'markdown-to-jsx: <Markdown> component only accepts a single string as a child, received:',\n      children\n    )\n  }\n\n  return React.cloneElement(\n    compiler(children, options),\n    props as JSX.IntrinsicAttributes\n  )\n}\n\nexport namespace MarkdownToJSX {\n  /**\n   * RequireAtLeastOne<{ ... }> <- only requires at least one key\n   */\n  type RequireAtLeastOne<T, Keys extends keyof T = keyof T> = Pick<\n    T,\n    Exclude<keyof T, Keys>\n  > &\n    {\n      [K in Keys]-?: Required<Pick<T, K>> & Partial<Pick<T, Exclude<Keys, K>>>\n    }[Keys]\n\n  export type CreateElement = typeof React.createElement\n\n  export type HTMLTags = keyof JSX.IntrinsicElements\n\n  export type State = {\n    /** true if the current content is inside anchor link grammar */\n    inAnchor?: boolean\n    /** true if parsing in an inline context (subset of rules around formatting and links) */\n    inline?: boolean\n    /** true if in a table */\n    inTable?: boolean\n    /** use this for the `key` prop */\n    key?: React.Key\n    /** true if in a list */\n    list?: boolean\n    /** true if parsing in inline context w/o links */\n    simple?: boolean\n  }\n\n  export interface BlockQuoteNode {\n    children: MarkdownToJSX.ParserResult[]\n    type: RuleType.blockQuote\n  }\n\n  export interface BreakLineNode {\n    type: RuleType.breakLine\n  }\n\n  export interface BreakThematicNode {\n    type: RuleType.breakThematic\n  }\n\n  export interface CodeBlockNode {\n    type: RuleType.codeBlock\n    attrs?: JSX.IntrinsicAttributes\n    lang?: string\n    text: string\n  }\n\n  export interface CodeFencedNode {\n    type: RuleType.codeFenced\n  }\n\n  export interface CodeInlineNode {\n    type: RuleType.codeInline\n    text: string\n  }\n\n  export interface FootnoteNode {\n    type: RuleType.footnote\n  }\n\n  export interface FootnoteReferenceNode {\n    type: RuleType.footnoteReference\n    target: string\n    text: string\n  }\n\n  export interface GFMTaskNode {\n    type: RuleType.gfmTask\n    completed: boolean\n  }\n\n  export interface HeadingNode {\n    type: RuleType.heading\n    children: MarkdownToJSX.ParserResult[]\n    id: string\n    level: 1 | 2 | 3 | 4 | 5 | 6\n  }\n\n  export interface HeadingSetextNode {\n    type: RuleType.headingSetext\n  }\n\n  export interface HTMLCommentNode {\n    type: RuleType.htmlComment\n  }\n\n  export interface ImageNode {\n    type: RuleType.image\n    alt?: string\n    target: string\n    title?: string\n  }\n\n  export interface LinkNode {\n    type: RuleType.link\n    children: MarkdownToJSX.ParserResult[]\n    target: string\n    title?: string\n  }\n\n  export interface LinkAngleBraceNode {\n    type: RuleType.linkAngleBraceStyleDetector\n  }\n\n  export interface LinkBareURLNode {\n    type: RuleType.linkBareUrlDetector\n  }\n\n  export interface LinkMailtoNode {\n    type: RuleType.linkMailtoDetector\n  }\n\n  export interface OrderedListNode {\n    type: RuleType.orderedList\n    items: MarkdownToJSX.ParserResult[][]\n    ordered: true\n    start?: number\n  }\n\n  export interface UnorderedListNode {\n    type: RuleType.unorderedList\n    items: MarkdownToJSX.ParserResult[][]\n    ordered: false\n  }\n\n  export interface NewlineNode {\n    type: RuleType.newlineCoalescer\n  }\n\n  export interface ParagraphNode {\n    type: RuleType.paragraph\n    children: MarkdownToJSX.ParserResult[]\n  }\n\n  export interface ReferenceNode {\n    type: RuleType.ref\n  }\n\n  export interface ReferenceImageNode {\n    type: RuleType.refImage\n    alt?: string\n    ref: string\n  }\n\n  export interface ReferenceLinkNode {\n    type: RuleType.refLink\n    children: MarkdownToJSX.ParserResult[]\n    fallbackChildren: MarkdownToJSX.ParserResult[]\n    ref: string\n  }\n\n  export interface TableNode {\n    type: RuleType.table\n    /**\n     * alignment for each table column\n     */\n    align: ('left' | 'right' | 'center')[]\n    cells: MarkdownToJSX.ParserResult[][][]\n    header: MarkdownToJSX.ParserResult[][]\n  }\n\n  export interface TableSeparatorNode {\n    type: RuleType.tableSeparator\n  }\n\n  export interface TextNode {\n    type: RuleType.text\n    text: string\n  }\n\n  export interface BoldTextNode {\n    type: RuleType.textBolded\n    children: MarkdownToJSX.ParserResult[]\n  }\n\n  export interface ItalicTextNode {\n    type: RuleType.textEmphasized\n    children: MarkdownToJSX.ParserResult[]\n  }\n\n  export interface EscapedTextNode {\n    type: RuleType.textEscaped\n  }\n\n  export interface MarkedTextNode {\n    type: RuleType.textMarked\n    children: MarkdownToJSX.ParserResult[]\n  }\n\n  export interface StrikethroughTextNode {\n    type: RuleType.textStrikethroughed\n    children: MarkdownToJSX.ParserResult[]\n  }\n\n  export interface HTMLNode {\n    type: RuleType.htmlBlock\n    attrs: JSX.IntrinsicAttributes\n    children?: ReturnType<MarkdownToJSX.NestedParser> | undefined\n    noInnerParse: Boolean\n    tag: MarkdownToJSX.HTMLTags\n    text?: string | undefined\n  }\n\n  export interface HTMLSelfClosingNode {\n    type: RuleType.htmlSelfClosing\n    attrs: JSX.IntrinsicAttributes\n    tag: string\n  }\n\n  export type ParserResult =\n    | BlockQuoteNode\n    | BreakLineNode\n    | BreakThematicNode\n    | CodeBlockNode\n    | CodeFencedNode\n    | CodeInlineNode\n    | FootnoteNode\n    | FootnoteReferenceNode\n    | GFMTaskNode\n    | HeadingNode\n    | HeadingSetextNode\n    | HTMLCommentNode\n    | ImageNode\n    | LinkNode\n    | LinkAngleBraceNode\n    | LinkBareURLNode\n    | LinkMailtoNode\n    | OrderedListNode\n    | UnorderedListNode\n    | NewlineNode\n    | ParagraphNode\n    | ReferenceNode\n    | ReferenceImageNode\n    | ReferenceLinkNode\n    | TableNode\n    | TableSeparatorNode\n    | TextNode\n    | BoldTextNode\n    | ItalicTextNode\n    | EscapedTextNode\n    | MarkedTextNode\n    | StrikethroughTextNode\n    | HTMLNode\n    | HTMLSelfClosingNode\n\n  export type NestedParser = (\n    input: string,\n    state?: MarkdownToJSX.State\n  ) => MarkdownToJSX.ParserResult[]\n\n  export type Parser<ParserOutput> = (\n    capture: RegExpMatchArray,\n    nestedParse: NestedParser,\n    state?: MarkdownToJSX.State\n  ) => ParserOutput\n\n  export type RuleOutput = (\n    ast: MarkdownToJSX.ParserResult | MarkdownToJSX.ParserResult[],\n    state: MarkdownToJSX.State\n  ) => JSX.Element\n\n  export type Rule<ParserOutput = MarkdownToJSX.ParserResult> = {\n    match: (\n      source: string,\n      state: MarkdownToJSX.State,\n      prevCapturedString?: string\n    ) => RegExpMatchArray\n    order: Priority\n    parse: MarkdownToJSX.Parser<Omit<ParserOutput, 'type'>>\n    render?: (\n      node: ParserOutput,\n      /**\n       * Continue rendering AST nodes if applicable.\n       */\n      render: RuleOutput,\n      state?: MarkdownToJSX.State\n    ) => React.ReactChild\n  }\n\n  export type Rules = {\n    [K in ParserResult['type']]: K extends RuleType.table\n      ? Rule<Extract<ParserResult, { type: K | RuleType.paragraph }>>\n      : Rule<Extract<ParserResult, { type: K }>>\n  }\n\n  export type Override =\n    | RequireAtLeastOne<{\n        component: React.ElementType\n        props: Object\n      }>\n    | React.ElementType\n\n  export type Overrides = {\n    [tag in HTMLTags]?: Override\n  } & {\n    [customComponent: string]: Override\n  }\n\n  export type Options = Partial<{\n    /**\n     * Ultimate control over the output of all rendered JSX.\n     */\n    createElement: (\n      tag: Parameters<CreateElement>[0],\n      props: JSX.IntrinsicAttributes,\n      ...children: React.ReactChild[]\n    ) => React.ReactChild\n\n    /**\n     * Disable the compiler's best-effort transcription of provided raw HTML\n     * into JSX-equivalent. This is the functionality that prevents the need to\n     * use `dangerouslySetInnerHTML` in React.\n     */\n    disableParsingRawHTML: boolean\n\n    /**\n     * Forces the compiler to have space between hash sign and the header text which\n     * is explicitly stated in the most of the markdown specs.\n     * https://github.github.com/gfm/#atx-heading\n     * `The opening sequence of # characters must be followed by a space or by the end of line.`\n     */\n    enforceAtxHeadings: boolean\n\n    /**\n     * Forces the compiler to always output content with a block-level wrapper\n     * (`<p>` or any block-level syntax your markdown already contains.)\n     */\n    forceBlock: boolean\n\n    /**\n     * Forces the compiler to always output content with an inline wrapper (`<span>`)\n     */\n    forceInline: boolean\n\n    /**\n     * Forces the compiler to wrap results, even if there is only a single\n     * child or no children.\n     */\n    forceWrapper: boolean\n\n    /**\n     * Supply additional HTML entity: unicode replacement mappings.\n     *\n     * Pass only the inner part of the entity as the key,\n     * e.g. `&le;` -> `{ \"le\": \"\\u2264\" }`\n     *\n     * By default\n     * the following entities are replaced with their unicode equivalents:\n     *\n     * ```\n     * &amp;\n     * &apos;\n     * &gt;\n     * &lt;\n     * &nbsp;\n     * &quot;\n     * ```\n     */\n    namedCodesToUnicode: {\n      [key: string]: string\n    }\n\n    /**\n     * Selectively control the output of particular HTML tags as they would be\n     * emitted by the compiler.\n     */\n    overrides: Overrides\n\n    /**\n     * Allows for full control over rendering of particular rules.\n     * For example, to implement a LaTeX renderer such as `react-katex`:\n     *\n     * ```\n     * renderRule(next, node, renderChildren, state) {\n     *   if (node.type === RuleType.codeBlock && node.lang === 'latex') {\n     *     return (\n     *       <TeX as=\"div\" key={state.key}>\n     *         {String.raw`${node.text}`}\n     *       </TeX>\n     *     )\n     *   }\n     *\n     *   return next();\n     * }\n     * ```\n     *\n     * Thar be dragons obviously, but you can do a lot with this\n     * (have fun!) To see how things work internally, check the `render`\n     * method in source for a particular rule.\n     */\n    renderRule: (\n      /** Resume normal processing, call this function as a fallback if you are not returning custom JSX. */\n      next: () => React.ReactChild,\n      /** the current AST node, use `RuleType` against `node.type` for identification */\n      node: ParserResult,\n      /** use as `renderChildren(node.children)` for block nodes */\n      renderChildren: RuleOutput,\n      /** contains `key` which should be supplied to the topmost JSX element */\n      state: State\n    ) => React.ReactChild\n\n    /**\n     * Override normalization of non-URI-safe characters for use in generating\n     * HTML IDs for anchor linking purposes.\n     */\n    slugify: (source: string) => string\n\n    /**\n     * Declare the type of the wrapper to be used when there are multiple\n     * children to render. Set to `null` to get an array of children back\n     * without any wrapper, or use `React.Fragment` to get a React element\n     * that won't show up in the DOM.\n     */\n    wrapper: React.ElementType | null\n  }>\n}\n\nexport default Markdown\n"]},"metadata":{},"sourceType":"module"}