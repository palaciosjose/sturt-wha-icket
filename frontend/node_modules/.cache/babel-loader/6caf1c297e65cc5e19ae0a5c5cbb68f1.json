{"ast":null,"code":"import React,{useEffect,useState,useRef}from\"react\";import{Box,Dialog,DialogContent,DialogTitle,IconButton,Paper,InputBase}from\"@material-ui/core\";import CloseIcon from'@material-ui/icons/Close';import CheckCircleIcon from\"@material-ui/icons/CheckCircle\";import whatsBackground from\"../../assets/wa-background.png\";import{makeStyles}from\"@material-ui/core\";import MarkdownWrapper from\"../MarkdownWrapper\";import api from\"../../services/api\";import whatsBackgroundDark from\"../../assets/wa-background-dark.png\";const useStyles=makeStyles(theme=>({messagesList:{backgroundSize:\"370px\",backgroundImage:theme.mode==='light'?`url(${whatsBackground})`:`url(${whatsBackgroundDark})`,//DARK MODE PLW DESIGN//\ndisplay:\"flex\",justifyContent:\"center\",flexGrow:1,padding:\"20px 20px 20px 20px\",overflowY:\"scroll\",\"@media (max-width: 600px)\":{paddingBottom:\"90px\"},...theme.scrollbarStyles,minHeight:\"150px\",minWidth:\"500px\"},textContentItem:{overflowWrap:\"break-word\",padding:\"3px 80px 6px 6px\"},messageRight:{fontSize:\"13px\",marginLeft:20,marginTop:2,minWidth:100,maxWidth:510,height:\"auto\",display:\"block\",position:\"relative\",whiteSpace:\"pre-wrap\",alignSelf:\"flex-end\",borderRadius:8,paddingLeft:5,paddingRight:5,paddingTop:5,paddingBottom:0},inputmsg:{backgroundColor:theme.mode==='light'?'#FFF':'#1c1c1c',display:\"flex\",width:\"100%\",margin:\"10px 0px 10px 20px\",borderRadius:\"10px\"},timestamp:{fontSize:11,position:\"absolute\",bottom:0,right:5,color:\"#999\"},titleBackground:{color:'#ffff',backgroundColor:\"#1e3a8a\",// Cor de fundo desejada\nmarginLeft:'3px'},emojiBox:{position:\"absolute\",bottom:63,width:40,borderTop:\"1px solid #e8e8e8\",zIndex:1}}));// const EmojiOptions = React.forwardRef((props, ref) => {\n//   const { disabled, showEmoji, setShowEmoji, handleAddEmoji } = props;\n//   const classes = useStyles();\n//   return (\n//     <>\n//       <IconButton\n//         aria-label=\"emojiPicker\"\n//         component=\"span\"\n//         disabled={disabled}\n//         onClick={(e) => setShowEmoji((prevState) => !prevState)}\n//       >\n//         <MoodIcon className={classes.sendMessageIcons} />\n//       </IconButton>\n//       {showEmoji ? (\n//         <div ref={ref} className={classes.emojiBox}>\n//           <EmojiPicker\n//             height={700}\n//             width={400}\n//           />\n//         </div>\n//       ) : null}\n//     </>\n//   );\n// });\nconst EditMessageModal=_ref=>{let{open,onClose,onSave,message}=_ref;const classes=useStyles();const[editedMessage,setEditedMessage]=useState(null);const emojiOptionsRef=useRef(null);const modalRef=useRef(null);useEffect(()=>{if(open){setEditedMessage(message===null||message===void 0?void 0:message.body);}},[open,message]);const handleSave=async editedMessage=>{if(editedMessage){try{const messages={read:1,fromMe:true,mediaUrl:\"\",body:editedMessage,quotedMsg:null};await api.post(`/messages/edit/${message.id}`,messages);onClose(false);}catch(err){}}};useEffect(()=>{if(open){// Calculate the position for EmojiOptions inside the modal\nif(open&&modalRef.current&&emojiOptionsRef.current){const modalRect=modalRef.current.getBoundingClientRect();const emojiOptionsRect=emojiOptionsRef.current.getBoundingClientRect();const desiredPosition={top:emojiOptionsRect.height>modalRect.height?0:modalRect.height-emojiOptionsRect.height,left:modalRect.width-emojiOptionsRect.width};emojiOptionsRef.current.style.top=`${desiredPosition.top}px`;emojiOptionsRef.current.style.left=`${desiredPosition.left}px`;}};},[open]);return/*#__PURE__*/React.createElement(Dialog,{open:open,onClose:()=>onClose(false),\"aria-labelledby\":\"edit-message-dialog\",PaperProps:{style:{zIndex:1// Defina um valor alto de zIndex para garantir que o modal sobreponha outros elementos\n}},ref:modalRef},/*#__PURE__*/React.createElement(DialogTitle,{id:\"edit-message-dialog\",className:classes.titleBackground},/*#__PURE__*/React.createElement(IconButton,{edge:\"start\",color:\"inherit\",onClick:()=>onClose(false),\"aria-label\":\"close\"},/*#__PURE__*/React.createElement(CloseIcon,null)),\"Editar Mensagem\"),/*#__PURE__*/React.createElement(DialogContent,{style:{padding:\"0px\"}},/*#__PURE__*/React.createElement(Box,null,/*#__PURE__*/React.createElement(Box,{className:classes.messagesList},/*#__PURE__*/React.createElement(Box,{component:\"div\",className:`${classes.messageRight}`,style:{fontStyle:\"italic\",backgroundColor:\"#d9fdd3\"}},/*#__PURE__*/React.createElement(Box,{className:classes.textContentItem},/*#__PURE__*/React.createElement(Box,{component:\"div\",style:{color:\"#212B36\"}},/*#__PURE__*/React.createElement(MarkdownWrapper,null,message===null||message===void 0?void 0:message.body))))),/*#__PURE__*/React.createElement(Paper,{component:\"form\",style:{p:\"2px 4px\",display:\"flex\",alignItems:\"center\",borderRadius:\"0px\",backgroundColor:\"#f0f2f5\"}},/*#__PURE__*/React.createElement(Box,{className:`${classes.inputmsg}`},/*#__PURE__*/React.createElement(InputBase,{style:{padding:\"15px 0px 15px 15px\",flex:1},multiline:true,maxRows:6,placeholder:\"Search Google Maps\",value:editedMessage,onChange:e=>setEditedMessage(e.target.value),inputProps:{\"aria-label\":\"search google maps\"}})),/*#__PURE__*/React.createElement(IconButton,{color:\"primary\",\"aria-label\":\"directions\",onClick:()=>handleSave(editedMessage)},/*#__PURE__*/React.createElement(CheckCircleIcon,{style:{width:\"35px\",height:\"35px\",color:'#00A884'}}))))));};export default EditMessageModal;","map":null,"metadata":{},"sourceType":"module"}