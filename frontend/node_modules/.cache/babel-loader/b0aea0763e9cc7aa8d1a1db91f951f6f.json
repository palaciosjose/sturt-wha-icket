{"ast":null,"code":"import axios from \"axios\";\nimport { clearAuthData, validateAndCleanAuth } from \"../utils/clearAuthData\";\nconst api = axios.create({\n  baseURL: process.env.REACT_APP_BACKEND_URL,\n  withCredentials: true\n});\n\n// ‚úÖ INTERCEPTOR MEJORADO PARA MANEJO AUTOM√ÅTICO DE TOKENS\napi.interceptors.request.use(config => {\n  // Solo verificar token si NO es una ruta de autenticaci√≥n\n  if (!config.url.includes('/auth/') && !config.url.includes('/login')) {\n    // Verificar token antes de cada request\n    if (!validateAndCleanAuth()) {\n      // Si el token es inv√°lido, cancelar el request\n      return Promise.reject(new Error(\"Token inv√°lido - redirigiendo al login\"));\n    }\n  }\n  return config;\n}, error => {\n  return Promise.reject(error);\n});\n\n// Interceptor para manejar errores de autenticaci√≥n\napi.interceptors.response.use(response => response, error => {\n  if (error.response && (error.response.status === 401 || error.response.status === 403)) {\n    console.log(\"üîÑ Error de autenticaci√≥n detectado - limpieza autom√°tica\");\n\n    // ‚úÖ LIMPIEZA AUTOM√ÅTICA COMPLETA\n    clearAuthData();\n    return Promise.reject(error);\n  }\n  return Promise.reject(error);\n});\nexport const openApi = axios.create({\n  baseURL: process.env.REACT_APP_BACKEND_URL\n});\nexport default api;","map":{"version":3,"names":["axios","clearAuthData","validateAndCleanAuth","api","create","baseURL","process","env","REACT_APP_BACKEND_URL","withCredentials","interceptors","request","use","config","url","includes","Promise","reject","Error","error","response","status","console","log","openApi"],"sources":["C:/laragon/www/whaticket03/waticketsaas/frontend/src/services/api.js"],"sourcesContent":["import axios from \"axios\";\nimport { clearAuthData, validateAndCleanAuth } from \"../utils/clearAuthData\";\n\nconst api = axios.create({\n\tbaseURL: process.env.REACT_APP_BACKEND_URL,\n\twithCredentials: true,\n});\n\n// ‚úÖ INTERCEPTOR MEJORADO PARA MANEJO AUTOM√ÅTICO DE TOKENS\napi.interceptors.request.use(\n  (config) => {\n    // Solo verificar token si NO es una ruta de autenticaci√≥n\n    if (!config.url.includes('/auth/') && !config.url.includes('/login')) {\n      // Verificar token antes de cada request\n      if (!validateAndCleanAuth()) {\n        // Si el token es inv√°lido, cancelar el request\n        return Promise.reject(new Error(\"Token inv√°lido - redirigiendo al login\"));\n      }\n    }\n    return config;\n  },\n  (error) => {\n    return Promise.reject(error);\n  }\n);\n\n// Interceptor para manejar errores de autenticaci√≥n\napi.interceptors.response.use(\n  (response) => response,\n  (error) => {\n    if (error.response && (error.response.status === 401 || error.response.status === 403)) {\n      console.log(\"üîÑ Error de autenticaci√≥n detectado - limpieza autom√°tica\");\n      \n      // ‚úÖ LIMPIEZA AUTOM√ÅTICA COMPLETA\n      clearAuthData();\n      return Promise.reject(error);\n    }\n    return Promise.reject(error);\n  }\n);\n\nexport const openApi = axios.create({\n\tbaseURL: process.env.REACT_APP_BACKEND_URL\n});\n\nexport default api;\n"],"mappings":"AAAA,OAAOA,KAAK,MAAM,OAAO;AACzB,SAASC,aAAa,EAAEC,oBAAoB,QAAQ,wBAAwB;AAE5E,MAAMC,GAAG,GAAGH,KAAK,CAACI,MAAM,CAAC;EACxBC,OAAO,EAAEC,OAAO,CAACC,GAAG,CAACC,qBAAqB;EAC1CC,eAAe,EAAE;AAClB,CAAC,CAAC;;AAEF;AACAN,GAAG,CAACO,YAAY,CAACC,OAAO,CAACC,GAAG,CACzBC,MAAM,IAAK;EACV;EACA,IAAI,CAACA,MAAM,CAACC,GAAG,CAACC,QAAQ,CAAC,QAAQ,CAAC,IAAI,CAACF,MAAM,CAACC,GAAG,CAACC,QAAQ,CAAC,QAAQ,CAAC,EAAE;IACpE;IACA,IAAI,CAACb,oBAAoB,CAAC,CAAC,EAAE;MAC3B;MACA,OAAOc,OAAO,CAACC,MAAM,CAAC,IAAIC,KAAK,CAAC,wCAAwC,CAAC,CAAC;IAC5E;EACF;EACA,OAAOL,MAAM;AACf,CAAC,EACAM,KAAK,IAAK;EACT,OAAOH,OAAO,CAACC,MAAM,CAACE,KAAK,CAAC;AAC9B,CACF,CAAC;;AAED;AACAhB,GAAG,CAACO,YAAY,CAACU,QAAQ,CAACR,GAAG,CAC1BQ,QAAQ,IAAKA,QAAQ,EACrBD,KAAK,IAAK;EACT,IAAIA,KAAK,CAACC,QAAQ,KAAKD,KAAK,CAACC,QAAQ,CAACC,MAAM,KAAK,GAAG,IAAIF,KAAK,CAACC,QAAQ,CAACC,MAAM,KAAK,GAAG,CAAC,EAAE;IACtFC,OAAO,CAACC,GAAG,CAAC,2DAA2D,CAAC;;IAExE;IACAtB,aAAa,CAAC,CAAC;IACf,OAAOe,OAAO,CAACC,MAAM,CAACE,KAAK,CAAC;EAC9B;EACA,OAAOH,OAAO,CAACC,MAAM,CAACE,KAAK,CAAC;AAC9B,CACF,CAAC;AAED,OAAO,MAAMK,OAAO,GAAGxB,KAAK,CAACI,MAAM,CAAC;EACnCC,OAAO,EAAEC,OAAO,CAACC,GAAG,CAACC;AACtB,CAAC,CAAC;AAEF,eAAeL,GAAG","ignoreList":[]},"metadata":{},"sourceType":"module"}