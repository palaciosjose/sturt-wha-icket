{"ast":null,"code":"import{useRef,useEffect,useCallback}from'react';/**\r\n * Hook personalizado para manejar el foco en modales\r\n * Evita problemas de aria-hidden y asegura accesibilidad correcta\r\n */const useModalFocus=open=>{const modalRef=useRef(null);const previousActiveElement=useRef(null);// Guardar el elemento activo antes de abrir el modal\nuseEffect(()=>{if(open){previousActiveElement.current=document.activeElement;}},[open]);// Función para liberar completamente el foco\nconst releaseFocus=useCallback(()=>{// 1. Liberar foco del modal si existe\nif(modalRef.current){const activeElement=modalRef.current.querySelector(':focus');if(activeElement){activeElement.blur();}}// 2. Liberar cualquier foco activo en el documento\nif(document.activeElement&&document.activeElement.blur){document.activeElement.blur();}// 3. Forzar la liberación del foco del body\ndocument.body.focus();document.body.blur();},[]);// Restaurar el foco al cerrar el modal\nconst handleClose=useCallback(()=>{// Liberar el foco inmediatamente\nreleaseFocus();// Pequeño delay para asegurar que el foco se libere completamente\nsetTimeout(()=>{// Restaurar el foco al elemento anterior si existe y es válido\nif(previousActiveElement.current&&previousActiveElement.current.focus&&document.contains(previousActiveElement.current)&&!previousActiveElement.current.hasAttribute('aria-hidden')){previousActiveElement.current.focus();}else{// Si no hay elemento anterior válido, liberar el foco completamente\nreleaseFocus();}},50);},[releaseFocus]);// Manejar el evento onExited del Dialog\nconst handleExited=useCallback(()=>{// Asegurar que el foco se libere completamente al cerrar\nreleaseFocus();// Limpiar la referencia del elemento anterior\npreviousActiveElement.current=null;},[releaseFocus]);// Función para manejar el cierre con prevención de aria-hidden\nconst handleCloseWithFocusFix=useCallback(event=>{// Prevenir que el botón mantenga el foco\nif(event&&event.target){event.target.blur();}// Liberar foco inmediatamente\nreleaseFocus();// Llamar al handleClose después de un pequeño delay\nsetTimeout(()=>{handleClose();},0);},[handleClose,releaseFocus]);return{modalRef,handleClose:handleCloseWithFocusFix,handleExited};};export default useModalFocus;","map":null,"metadata":{},"sourceType":"module"}