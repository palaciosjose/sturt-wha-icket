{"ast":null,"code":"// colorGenerator.js\n// Function to hash a string to a number\nfunction hashStringToNumber(str){if(!str){return 0x7F7F7F;// 50% of all colors\n}let hash=0;for(let i=0;i<str.length;i++){const char=str.charCodeAt(i);hash=(hash<<5)-hash+char;hash|=0;// Convert to 32bit integer\n}return hash;}// Function to generate a color from a hash\nfunction generateColorFromHash(hash){// Normalize the hash value\nconst normalizedHash=Math.abs(hash)%16777215;// 16777215 is 0xFFFFFF\nconst r=(normalizedHash&0xFF0000)>>16;const g=(normalizedHash&0x00FF00)>>8;const b=normalizedHash&0x0000FF;return{r,g,b};}// Function to get the luminance of a color\nfunction getLuminance(r,g,b){return 0.299*r+0.587*g+0.114*b;}// Function to adjust color for contrast\nfunction adjustColorForContrast(r,g,b){const luminance=getLuminance(r,g,b);const thresholdLow=50;// Luminance threshold for dark colors\nconst thresholdHigh=200;// Luminance threshold for bright colors\nif(luminance<thresholdLow){// Lighten the color if too dark\nr=Math.min(255,r+50);g=Math.min(255,g+50);b=Math.min(255,b+50);}else if(luminance>thresholdHigh){// Darken the color if too bright\nr=Math.max(0,r-50);g=Math.max(0,g-50);b=Math.max(0,b-50);}return`rgb(${r}, ${g}, ${b})`;}// Main function to generate color from user identifier\nfunction generateColor(identifier){const hash=hashStringToNumber(identifier);const{r,g,b}=generateColorFromHash(hash);const luminance=getLuminance(r,g,b);const thresholdLow=50;// Luminance threshold for dark colors\nconst thresholdHigh=200;// Luminance threshold for bright colors\nif(luminance<thresholdLow||luminance>thresholdHigh){return adjustColorForContrast(r,g,b);}return`rgb(${r}, ${g}, ${b})`;}// Export the function\nexport{generateColor};","map":null,"metadata":{},"sourceType":"module"}