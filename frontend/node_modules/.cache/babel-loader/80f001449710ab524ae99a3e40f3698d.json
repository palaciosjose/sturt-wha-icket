{"ast":null,"code":"import React,{useState,useEffect,useContext,useCallback}from\"react\";import{makeStyles}from\"@material-ui/core/styles\";import api from\"../../services/api\";import{AuthContext}from\"../../context/Auth/AuthContext\";import{toast}from\"react-toastify\";import{useHistory}from'react-router-dom';import KanbanBoard from\"../../components/KanbanBoard\";import logger from\"../../utils/logger\";const useStyles=makeStyles(theme=>({root:{display:\"flex\",alignItems:\"center\",padding:theme.spacing(1),height:\"100%\"},button:{background:\"#10a110\",border:\"none\",padding:\"10px\",color:\"white\",fontWeight:\"bold\",borderRadius:\"5px\"}}));const Kanban=()=>{const classes=useStyles();const history=useHistory();const[tags,setTags]=useState([]);const[tickets,setTickets]=useState([]);const[isLoading,setIsLoading]=useState(false);const{user}=useContext(AuthContext);const jsonString=user.queues.map(queue=>queue.UserQueue.queueId);const fetchTags=useCallback(async function(){let retryCount=arguments.length>0&&arguments[0]!==undefined?arguments[0]:0;if(isLoading)return;// Evitar requests múltiples\ntry{setIsLoading(true);logger.dashboard.debug(\"🔄 Cargando tags de Kanban...\");const response=await api.get(\"/tags/kanban\");const fetchedTags=response.data.lista||[];setTags(fetchedTags);logger.dashboard.debug(\"✅ Tags cargados:\",fetchedTags.length);// Fetch tickets after fetching tags\nawait fetchTickets(jsonString);}catch(error){var _error$message;// ✅ MANEJO SILENCIOSO DE ERRORES DE AUTENTICACIÓN\nif(error.response&&(error.response.status===401||error.response.status===403)){logger.dashboard.debug(\"🔄 Error de autenticación silenciado:\",error.response.status);// No mostrar error en consola para evitar spam\nreturn;}// Solo mostrar errores que no sean de autenticación\nlogger.dashboard.error(\"❌ Error cargando tags:\",error);// Retry con backoff exponencial para errores de red\nif(retryCount<3&&(error.code==='ERR_INSUFFICIENT_RESOURCES'||((_error$message=error.message)===null||_error$message===void 0?void 0:_error$message.includes('ERR_INSUFFICIENT_RESOURCES')))){const delay=Math.pow(2,retryCount)*1000;// 1s, 2s, 4s\nlogger.dashboard.warn(`🔄 Reintentando en ${delay}ms (intento ${retryCount+1}/3)`);setTimeout(()=>{fetchTags(retryCount+1);},delay);return;}// Continuar sin tags si hay error después de retries\nlogger.dashboard.warn(\"⚠️ Continuando sin tags después de errores\");await fetchTickets(jsonString);}finally{setIsLoading(false);}},[jsonString,isLoading]);useEffect(()=>{// Agregar delay para evitar requests simultáneos\nconst timer=setTimeout(()=>{fetchTags();},1000);return()=>clearTimeout(timer);},[fetchTags]);const fetchTickets=async jsonString=>{try{var _data$tickets;logger.dashboard.debug(\"🔄 Cargando tickets de Kanban...\");const{data}=await api.get(\"/ticket/kanban\",{params:{queueIds:JSON.stringify(jsonString),teste:true}});setTickets(data.tickets);logger.dashboard.debug(\"✅ Tickets cargados:\",((_data$tickets=data.tickets)===null||_data$tickets===void 0?void 0:_data$tickets.length)||0);}catch(err){logger.dashboard.error(\"❌ Error cargando tickets:\",err);// Si es error de autenticación, no hacer nada (ya manejado por interceptor)\nif(err.response&&(err.response.status===401||err.response.status===403)){logger.dashboard.warn(\"🔄 Error de autenticación, manejado por interceptor\");return;}setTickets([]);}};const handleCardMove=async(cardId,sourceLaneId,targetLaneId)=>{try{logger.dashboard.debug(\"🔄 Moviendo ticket:\",{cardId,sourceLaneId,targetLaneId});// ✅ MANEJAR CASO ESPECIAL: ABIERTOS (sin etiquetas)\nif(targetLaneId==='abiertos'){// Solo eliminar etiquetas existentes para mover a ABIERTOS\nif(sourceLaneId&&sourceLaneId!==targetLaneId){try{const sourceTag=tags.find(tag=>{if(sourceLaneId==='atencion')return tag.name==='Atención';if(sourceLaneId==='cerrado')return tag.name==='Cerrado';return false;});if(sourceTag){await api.delete(`/ticket-tags/${cardId}`);logger.dashboard.debug(\"✅ Etiqueta eliminada para mover a ABIERTOS\");}}catch(deleteErr){var _deleteErr$response;logger.dashboard.debug(\"ℹ️ Etiqueta no existía en origen:\",(_deleteErr$response=deleteErr.response)===null||_deleteErr$response===void 0?void 0:_deleteErr$response.status);}}toast.success('Ticket movido a ABIERTOS exitosamente!');logger.dashboard.debug(\"✅ Ticket movido a ABIERTOS\");// Recargar datos después del movimiento\nsetTimeout(()=>{fetchTags();},500);return;}// ✅ MANEJAR ETIQUETAS NORMALES (ATENCIÓN, CERRADO)\nconst targetTag=tags.find(tag=>{if(targetLaneId==='atencion')return tag.name==='Atención';if(targetLaneId==='cerrado')return tag.name==='Cerrado';return false;});if(!targetTag){logger.dashboard.error(\"❌ Tag no encontrado para:\",targetLaneId);toast.error('Error: Tag no encontrado');return;}// Solo eliminar el tag si existe en el origen\nif(sourceLaneId&&sourceLaneId!==targetLaneId){try{// Encontrar el tag del origen\nconst sourceTag=tags.find(tag=>{if(sourceLaneId==='atencion')return tag.name==='Atención';if(sourceLaneId==='cerrado')return tag.name==='Cerrado';return false;});if(sourceTag){await api.delete(`/ticket-tags/${cardId}`);logger.dashboard.debug(\"✅ Tag eliminado del origen\");}}catch(deleteErr){var _deleteErr$response2;// Si el tag no existe, no es un error\nlogger.dashboard.debug(\"ℹ️ Tag no existía en origen:\",(_deleteErr$response2=deleteErr.response)===null||_deleteErr$response2===void 0?void 0:_deleteErr$response2.status);}}// Agregar el tag al destino\nif(targetTag){await api.put(`/ticket-tags/${cardId}/${targetTag.id}`);logger.dashboard.debug(\"✅ Tag agregado al destino\");toast.success('Ticket movido exitosamente!');}logger.dashboard.debug(\"✅ Ticket movido exitosamente\");// Recargar datos después del movimiento\nsetTimeout(()=>{fetchTags();},500);}catch(err){logger.dashboard.error(\"❌ Error moviendo ticket:\",err);toast.error('Error al mover el ticket');}};const handleCardClick=ticket=>{history.push('/tickets/'+ticket.uuid);};return/*#__PURE__*/React.createElement(\"div\",{className:classes.root},/*#__PURE__*/React.createElement(KanbanBoard,{tickets:tickets,tags:tags,onCardMove:handleCardMove,onCardClick:handleCardClick}));};export default Kanban;","map":null,"metadata":{},"sourceType":"module"}