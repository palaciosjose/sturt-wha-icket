{"ast":null,"code":"import React,{useState,useRef,useEffect,useContext}from\"react\";import{useHistory}from\"react-router-dom\";import{format}from\"date-fns\";import{SocketContext}from\"../../context/Socket/SocketContext\";import useSound from\"use-sound\";import Popover from\"@material-ui/core/Popover\";import IconButton from\"@material-ui/core/IconButton\";import List from\"@material-ui/core/List\";import ListItem from\"@material-ui/core/ListItem\";import ListItemText from\"@material-ui/core/ListItemText\";import{makeStyles}from\"@material-ui/core/styles\";import Badge from\"@material-ui/core/Badge\";import ChatIcon from\"@material-ui/icons/Chat\";import TicketListItem from\"../TicketListItemCustom\";import useTickets from\"../../hooks/useTickets\";import alertSound from\"../../assets/sound.mp3\";import{AuthContext}from\"../../context/Auth/AuthContext\";import{i18n}from\"../../translate/i18n\";import toastError from\"../../errors/toastError\";const useStyles=makeStyles(theme=>({tabContainer:{overflowY:\"auto\",maxHeight:350,...theme.scrollbarStyles},popoverPaper:{width:\"100%\",maxWidth:350,marginLeft:theme.spacing(2),marginRight:theme.spacing(1),[theme.breakpoints.down(\"sm\")]:{maxWidth:270}},noShadow:{boxShadow:\"none !important\"}}));const NotificationsPopOver=volume=>{const classes=useStyles();const history=useHistory();const{user}=useContext(AuthContext);const ticketIdUrl=+history.location.pathname.split(\"/\")[2];const ticketIdRef=useRef(ticketIdUrl);const anchorEl=useRef();const[isOpen,setIsOpen]=useState(false);const[notifications,setNotifications]=useState([]);const[showPendingTickets,setShowPendingTickets]=useState(false);const[,setDesktopNotifications]=useState([]);const{tickets}=useTickets({withUnreadMessages:\"true\"});const[play]=useSound(alertSound,volume);const soundAlertRef=useRef();const historyRef=useRef(history);const socketManager=useContext(SocketContext);useEffect(()=>{const fetchSettings=async()=>{try{if(user.allTicket===\"enable\"){setShowPendingTickets(true);}}catch(err){toastError(err);}};fetchSettings();},[user.allTicket]);useEffect(()=>{soundAlertRef.current=play;if(!(\"Notification\"in window)){console.log(\"This browser doesn't support notifications\");}else{Notification.requestPermission();}},[play]);useEffect(()=>{const processNotifications=()=>{if(showPendingTickets){setNotifications(tickets);}else{const newNotifications=tickets.filter(ticket=>ticket.status!==\"pending\");setNotifications(newNotifications);}};processNotifications();},[showPendingTickets,tickets]);useEffect(()=>{ticketIdRef.current=ticketIdUrl;},[ticketIdUrl]);useEffect(()=>{const socket=socketManager.getSocket(user.companyId);socket.on(\"ready\",()=>socket.emit(\"joinNotification\"));socket.on(`company-${user.companyId}-ticket`,data=>{if(data.action===\"updateUnread\"||data.action===\"delete\"){setNotifications(prevState=>{const ticketIndex=prevState.findIndex(t=>t.id===data.ticketId);if(ticketIndex!==-1){prevState.splice(ticketIndex,1);return[...prevState];}return prevState;});setDesktopNotifications(prevState=>{const notfiticationIndex=prevState.findIndex(n=>n.tag===String(data.ticketId));if(notfiticationIndex!==-1){prevState[notfiticationIndex].close();prevState.splice(notfiticationIndex,1);return[...prevState];}return prevState;});}});socket.on(`company-${user.companyId}-appMessage`,data=>{var _user$queues;if(data.action===\"create\"&&!data.message.fromMe&&data.ticket.status!==\"pending\"&&(!data.message.read||data.ticket.status===\"pending\")&&(data.ticket.userId===(user===null||user===void 0?void 0:user.id)||!data.ticket.userId)&&((user===null||user===void 0?void 0:(_user$queues=user.queues)===null||_user$queues===void 0?void 0:_user$queues.some(queue=>queue.id===data.ticket.queueId))||!data.ticket.queueId)){setNotifications(prevState=>{const ticketIndex=prevState.findIndex(t=>t.id===data.ticket.id);if(ticketIndex!==-1){prevState[ticketIndex]=data.ticket;return[...prevState];}return[data.ticket,...prevState];});const shouldNotNotificate=data.message.ticketId===ticketIdRef.current&&document.visibilityState===\"visible\"||data.ticket.userId&&data.ticket.userId!==(user===null||user===void 0?void 0:user.id)||data.ticket.isGroup;if(shouldNotNotificate)return;handleNotifications(data);}});return()=>{socket.disconnect();};},[user,showPendingTickets,socketManager]);const handleNotifications=data=>{const{message,contact,ticket}=data;const options={body:`${message.body} - ${format(new Date(),\"HH:mm\")}`,icon:contact.urlPicture,tag:ticket.id,renotify:true};const notification=new Notification(`${i18n.t(\"tickets.notification.message\")} ${contact.name}`,options);notification.onclick=e=>{e.preventDefault();window.focus();historyRef.current.push(`/tickets/${ticket.uuid}`);// handleChangeTab(null, ticket.isGroup? \"group\" : \"open\");\n};setDesktopNotifications(prevState=>{const notfiticationIndex=prevState.findIndex(n=>n.tag===notification.tag);if(notfiticationIndex!==-1){prevState[notfiticationIndex]=notification;return[...prevState];}return[notification,...prevState];});soundAlertRef.current();};const handleClick=()=>{setIsOpen(prevState=>!prevState);};const handleClickAway=()=>{setIsOpen(false);};const NotificationTicket=_ref=>{let{children}=_ref;return/*#__PURE__*/React.createElement(\"div\",{onClick:handleClickAway},children);};return/*#__PURE__*/React.createElement(React.Fragment,null,/*#__PURE__*/React.createElement(IconButton,{onClick:handleClick,ref:anchorEl,\"aria-label\":\"Open Notifications\",color:\"inherit\",style:{color:\"white\"}},/*#__PURE__*/React.createElement(Badge,{overlap:\"rectangular\",badgeContent:notifications.length,color:\"secondary\"},/*#__PURE__*/React.createElement(ChatIcon,null))),/*#__PURE__*/React.createElement(Popover,{disableScrollLock:true,open:isOpen,anchorEl:anchorEl.current,anchorOrigin:{vertical:\"bottom\",horizontal:\"right\"},transformOrigin:{vertical:\"top\",horizontal:\"right\"},classes:{paper:classes.popoverPaper},onClose:handleClickAway},/*#__PURE__*/React.createElement(List,{dense:true,className:classes.tabContainer},notifications.length===0?/*#__PURE__*/React.createElement(ListItem,null,/*#__PURE__*/React.createElement(ListItemText,null,i18n.t(\"notifications.noTickets\"))):notifications.map(ticket=>/*#__PURE__*/React.createElement(NotificationTicket,{key:ticket.id},/*#__PURE__*/React.createElement(TicketListItem,{ticket:ticket}))))));};export default NotificationsPopOver;","map":null,"metadata":{},"sourceType":"module"}