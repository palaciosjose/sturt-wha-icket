{"ast":null,"code":"import React__default, { useEffect } from 'react';\nfunction _extends() {\n  _extends = Object.assign || function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n    return target;\n  };\n  return _extends.apply(this, arguments);\n}\nfunction _objectWithoutPropertiesLoose(source, excluded) {\n  if (source == null) return {};\n  var target = {};\n  var sourceKeys = Object.keys(source);\n  var key, i;\n  for (i = 0; i < sourceKeys.length; i++) {\n    key = sourceKeys[i];\n    if (excluded.indexOf(key) >= 0) continue;\n    target[key] = source[key];\n  }\n  return target;\n}\nfunction useOnMount(callback) {\n  useEffect(callback, []);\n}\nfunction useSound(src, _ref) {\n  if (_ref === void 0) {\n    _ref = {};\n  }\n  var _ref2 = _ref,\n    _ref2$volume = _ref2.volume,\n    volume = _ref2$volume === void 0 ? 1 : _ref2$volume,\n    _ref2$playbackRate = _ref2.playbackRate,\n    playbackRate = _ref2$playbackRate === void 0 ? 1 : _ref2$playbackRate,\n    _ref2$soundEnabled = _ref2.soundEnabled,\n    soundEnabled = _ref2$soundEnabled === void 0 ? true : _ref2$soundEnabled,\n    _ref2$interrupt = _ref2.interrupt,\n    interrupt = _ref2$interrupt === void 0 ? false : _ref2$interrupt,\n    onload = _ref2.onload,\n    delegated = _objectWithoutPropertiesLoose(_ref2, [\"volume\", \"playbackRate\", \"soundEnabled\", \"interrupt\", \"onload\"]);\n  var HowlConstructor = React__default.useRef(null);\n  var isMounted = React__default.useRef(false);\n  var _React$useState = React__default.useState(false),\n    isPlaying = _React$useState[0],\n    setIsPlaying = _React$useState[1];\n  var _React$useState2 = React__default.useState(null),\n    duration = _React$useState2[0],\n    setDuration = _React$useState2[1];\n  var _React$useState3 = React__default.useState(null),\n    sound = _React$useState3[0],\n    setSound = _React$useState3[1];\n  var handleLoad = function handleLoad() {\n    if (typeof onload === 'function') {\n      // @ts-ignore\n      onload.call(this);\n    }\n    if (isMounted.current) {\n      // @ts-ignore\n      setDuration(this.duration() * 1000);\n    }\n  }; // We want to lazy-load Howler, since sounds can't play on load anyway.\n\n  useOnMount(function () {\n    import('howler').then(function (mod) {\n      if (!isMounted.current) {\n        HowlConstructor.current = mod.Howl;\n        isMounted.current = true;\n        var _sound = new HowlConstructor.current(_extends({\n          src: Array.isArray(src) ? src : [src],\n          volume: volume,\n          rate: playbackRate,\n          onload: handleLoad\n        }, delegated));\n        setSound(_sound);\n      }\n    });\n    return function () {\n      isMounted.current = false;\n    };\n  }); // When the `src` changes, we have to do a whole thing where we recreate\n  // the Howl instance. This is because Howler doesn't expose a way to\n  // tweak the sound\n\n  React__default.useEffect(function () {\n    if (HowlConstructor.current && sound) {\n      setSound(new HowlConstructor.current(_extends({\n        src: Array.isArray(src) ? src : [src],\n        volume: volume,\n        onload: handleLoad\n      }, delegated)));\n    } // The linter wants to run this effect whenever ANYTHING changes,\n    // but very specifically I only want to recreate the Howl instance\n    // when the `src` changes. Other changes should have no effect.\n    // Passing array to the useEffect dependencies list will result in\n    // ifinite loop so we need to stringify it, for more details check\n    // https://github.com/facebook/react/issues/14476#issuecomment-471199055\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [JSON.stringify(src)]); // Whenever volume/playbackRate are changed, change those properties\n  // on the sound instance.\n\n  React__default.useEffect(function () {\n    if (sound) {\n      sound.volume(volume);\n      sound.rate(playbackRate);\n    } // A weird bug means that including the `sound` here can trigger an\n    // error on unmount, where the state loses track of the sprites??\n    // No idea, but anyway I don't need to re-run this if only the `sound`\n    // changes.\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [volume, playbackRate]);\n  var play = React__default.useCallback(function (options) {\n    if (typeof options === 'undefined') {\n      options = {};\n    }\n    if (!sound || !soundEnabled && !options.forceSoundEnabled) {\n      return;\n    }\n    if (interrupt) {\n      sound.stop();\n    }\n    if (options.playbackRate) {\n      sound.rate(options.playbackRate);\n    }\n    sound.play(options.id);\n    if (isMounted.current) {\n      sound.once('end', function () {\n        // If sound is not looping\n        if (!sound.playing()) {\n          setIsPlaying(false);\n        }\n      });\n    }\n    if (isMounted.current) {\n      setIsPlaying(true);\n    }\n  }, [sound, soundEnabled, interrupt]);\n  var stop = React__default.useCallback(function (id) {\n    if (!sound) {\n      return;\n    }\n    sound.stop(id);\n    if (isMounted.current) {\n      setIsPlaying(false);\n    }\n  }, [sound]);\n  var pause = React__default.useCallback(function (id) {\n    if (!sound) {\n      return;\n    }\n    sound.pause(id);\n    if (isMounted.current) {\n      setIsPlaying(false);\n    }\n  }, [sound]);\n  var returnedValue = [play, {\n    sound: sound,\n    stop: stop,\n    pause: pause,\n    isPlaying: isPlaying,\n    duration: duration\n  }];\n  return returnedValue;\n}\nexport default useSound;\nexport { useSound };","map":{"version":3,"sources":["../src/use-on-mount.ts","../src/index.ts"],"names":["useOnMount","callback","React","useSound","src","volume","playbackRate","soundEnabled","interrupt","onload","delegated","HowlConstructor","useRef","isMounted","isPlaying","setIsPlaying","useState","duration","setDuration","sound","setSound","handleLoad","call","current","then","mod","Howl","Array","isArray","rate","useEffect","JSON","stringify","play","useCallback","options","forceSoundEnabled","stop","id","once","playing","pause","returnedValue"],"mappings":"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","sourcesContent":["import * as React from 'react';\n\nexport default function useOnMount(callback: React.EffectCallback) {\n  React.useEffect(callback, []);\n}\n","import React from 'react';\n\nimport useOnMount from './use-on-mount';\n\nimport { HookOptions, PlayOptions, PlayFunction, ReturnedValue } from './types';\n\nexport default function useSound<T = any>(\n  src: string | string[],\n  {\n    volume = 1,\n    playbackRate = 1,\n    soundEnabled = true,\n    interrupt = false,\n    onload,\n    ...delegated\n  }: HookOptions<T> = {} as HookOptions\n) {\n  const HowlConstructor = React.useRef<HowlStatic | null>(null);\n  const isMounted = React.useRef(false);\n\n  const [isPlaying, setIsPlaying] = React.useState(false);\n  const [duration, setDuration] = React.useState<number | null>(null);\n\n  const [sound, setSound] = React.useState<Howl | null>(null);\n\n  const handleLoad = function() {\n    if (typeof onload === 'function') {\n      // @ts-ignore\n      onload.call(this);\n    }\n\n    if (isMounted.current) {\n      // @ts-ignore\n      setDuration(this.duration() * 1000);\n    }\n  };\n\n  // We want to lazy-load Howler, since sounds can't play on load anyway.\n  useOnMount(() => {\n    import('howler').then(mod => {\n      if (!isMounted.current) {\n        HowlConstructor.current = mod.Howl;\n        isMounted.current = true;\n\n        const sound = new HowlConstructor.current({\n          src: Array.isArray(src) ? src : [src],\n          volume,\n          rate: playbackRate,\n          onload: handleLoad,\n          ...delegated,\n        });\n\n        setSound(sound);\n      }\n    });\n\n    return () => {\n      isMounted.current = false;\n    };\n  });\n\n  // When the `src` changes, we have to do a whole thing where we recreate\n  // the Howl instance. This is because Howler doesn't expose a way to\n  // tweak the sound\n  React.useEffect(() => {\n    if (HowlConstructor.current && sound) {\n      setSound(\n        new HowlConstructor.current({\n          src: Array.isArray(src) ? src : [src],\n          volume,\n          onload: handleLoad,\n          ...delegated,\n        })\n      );\n    }\n    // The linter wants to run this effect whenever ANYTHING changes,\n    // but very specifically I only want to recreate the Howl instance\n    // when the `src` changes. Other changes should have no effect.\n    // Passing array to the useEffect dependencies list will result in\n    // ifinite loop so we need to stringify it, for more details check\n    // https://github.com/facebook/react/issues/14476#issuecomment-471199055\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [JSON.stringify(src)]);\n\n  // Whenever volume/playbackRate are changed, change those properties\n  // on the sound instance.\n  React.useEffect(() => {\n    if (sound) {\n      sound.volume(volume);\n      sound.rate(playbackRate);\n    }\n    // A weird bug means that including the `sound` here can trigger an\n    // error on unmount, where the state loses track of the sprites??\n    // No idea, but anyway I don't need to re-run this if only the `sound`\n    // changes.\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [volume, playbackRate]);\n\n  const play: PlayFunction = React.useCallback(\n    (options?: PlayOptions) => {\n      if (typeof options === 'undefined') {\n        options = {};\n      }\n\n      if (!sound || (!soundEnabled && !options.forceSoundEnabled)) {\n        return;\n      }\n\n      if (interrupt) {\n        sound.stop();\n      }\n\n      if (options.playbackRate) {\n        sound.rate(options.playbackRate);\n      }\n\n      sound.play(options.id);\n\n      if (isMounted.current) {\n        sound.once('end', () => {\n          // If sound is not looping\n          if (!sound.playing()) {\n            setIsPlaying(false);\n          }\n        });\n      }\n\n      if (isMounted.current) {\n        setIsPlaying(true);\n      }\n    },\n    [sound, soundEnabled, interrupt]\n  );\n\n  const stop = React.useCallback(\n    id => {\n      if (!sound) {\n        return;\n      }\n      sound.stop(id);\n\n      if (isMounted.current) {\n        setIsPlaying(false);\n      }\n    },\n    [sound]\n  );\n\n  const pause = React.useCallback(\n    id => {\n      if (!sound) {\n        return;\n      }\n      sound.pause(id);\n\n      if (isMounted.current) {\n        setIsPlaying(false);\n      }\n    },\n    [sound]\n  );\n\n  const returnedValue: ReturnedValue = [\n    play,\n    {\n      sound,\n      stop,\n      pause,\n      isPlaying,\n      duration,\n    },\n  ];\n\n  return returnedValue;\n}\n\nexport { useSound };\n"]},"metadata":{},"sourceType":"module"}