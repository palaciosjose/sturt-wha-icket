{"ast":null,"code":"import{createContext}from\"react\";import openSocket from\"socket.io-client\";import{isExpired}from\"react-jwt\";class ManagedSocket{constructor(socketManager){this.socketManager=socketManager;this.rawSocket=socketManager.currentSocket;this.callbacks=[];this.joins=[];this.rawSocket.on(\"connect\",()=>{var _this$rawSocket$io$op;if(((_this$rawSocket$io$op=this.rawSocket.io.opts.query)===null||_this$rawSocket$io$op===void 0?void 0:_this$rawSocket$io$op.r)&&!this.rawSocket.recovered){const refreshJoinsOnReady=()=>{for(const j of this.joins){console.debug(\"refreshing join\",j);this.rawSocket.emit(`join${j.event}`,...j.params);}this.rawSocket.off(\"ready\",refreshJoinsOnReady);};for(const j of this.callbacks){this.rawSocket.off(j.event,j.callback);this.rawSocket.on(j.event,j.callback);}this.rawSocket.on(\"ready\",refreshJoinsOnReady);}});}on(event,callback){if(event===\"ready\"||event===\"connect\"){return this.socketManager.onReady(callback);}this.callbacks.push({event,callback});return this.rawSocket.on(event,callback);}off(event,callback){const i=this.callbacks.findIndex(c=>c.event===event&&c.callback===callback);this.callbacks.splice(i,1);return this.rawSocket.off(event,callback);}emit(event){for(var _len=arguments.length,params=new Array(_len>1?_len-1:0),_key=1;_key<_len;_key++){params[_key-1]=arguments[_key];}if(event.startsWith(\"join\")){this.joins.push({event:event.substring(4),params});// Log solo en desarrollo y con logger controlado\nif(process.env.NODE_ENV==='development'){const logger=require('../../utils/logger').default;logger.socket.debug(\"Joining\",{event:event.substring(4),params});}}return this.rawSocket.emit(event,...params);}disconnect(){for(const j of this.joins){this.rawSocket.emit(`leave${j.event}`,...j.params);}this.joins=[];for(const c of this.callbacks){this.rawSocket.off(c.event,c.callback);}this.callbacks=[];}}class DummySocket{on(){}off(){}emit(){}disconnect(){}}const SocketManager={currentCompanyId:-1,currentUserId:-1,currentSocket:null,socketReady:false,getSocket:function(companyId){var _this=this;let userId=null;if(localStorage.getItem(\"userId\")){userId=localStorage.getItem(\"userId\");}if(!companyId&&!this.currentSocket){return new DummySocket();}if(companyId&&typeof companyId!==\"string\"){companyId=`${companyId}`;}if(companyId!==this.currentCompanyId||userId!==this.currentUserId){if(this.currentSocket){console.warn(\"closing old socket - company or user changed\");this.currentSocket.removeAllListeners();this.currentSocket.disconnect();this.currentSocket=null;this.currentCompanyId=null;this.currentUserId=null;}let token=localStorage.getItem(\"token\");if(!token){console.warn(\"No token found, returning dummy socket\");return new DummySocket();}if(isExpired(token)){console.warn(\"Expired token, reload after refresh\");setTimeout(()=>{window.location.reload();},1000);return new DummySocket();}this.currentCompanyId=companyId;this.currentUserId=userId;this.currentSocket=openSocket(process.env.REACT_APP_BACKEND_URL,{transports:[\"websocket\"],pingTimeout:18000,pingInterval:18000,query:{token}});this.currentSocket.io.on(\"reconnect_attempt\",()=>{this.currentSocket.io.opts.query.r=1;token=localStorage.getItem(\"token\");if(isExpired(token)){console.warn(\"Token expirado - redirigiendo al login\");localStorage.removeItem(\"token\");window.location.href=\"/login\";}else{console.warn(\"Reconectando socket...\");}});this.currentSocket.on(\"disconnect\",reason=>{console.warn(`socket disconnected because: ${reason}`);if(reason.startsWith(\"io server disconnect\")){console.warn(\"Socket desconectado por el servidor\");token=localStorage.getItem(\"token\");if(isExpired(token)){console.warn(\"Token expirado - redirigiendo al login\");localStorage.removeItem(\"token\");window.location.href=\"/login\";return;}console.warn(\"Intentando reconectar socket...\");return;}});this.currentSocket.on(\"connect\",function(){for(var _len2=arguments.length,params=new Array(_len2),_key2=0;_key2<_len2;_key2++){params[_key2]=arguments[_key2];}console.debug(\"socket connected\",params);});this.currentSocket.onAny(function(event){for(var _len3=arguments.length,args=new Array(_len3>1?_len3-1:0),_key3=1;_key3<_len3;_key3++){args[_key3-1]=arguments[_key3];}console.debug(\"Event: \",{socket:_this.currentSocket,event,args});});this.onReady(()=>{this.socketReady=true;});}return new ManagedSocket(this);},onReady:function(callbackReady){if(this.socketReady){callbackReady();return;}this.currentSocket.once(\"ready\",()=>{callbackReady();});},onConnect:function(callbackReady){this.onReady(callbackReady);}};const SocketContext=createContext();export{SocketContext,SocketManager};","map":null,"metadata":{},"sourceType":"module"}