{"ast":null,"code":"import { useState as e, useEffect as r } from \"react\";\nfor (var n = \"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/\", t = new Map(), o = 0; o < n.length; o++) {\n  var a = o.toString(2);\n  a = \"0\".repeat(6 - a.length) + a, t.set(n.charCodeAt(o), a);\n}\nfunction l(e) {\n  try {\n    if (\"string\" != typeof e || 3 !== e.split(\".\").length) return null;\n    var r = function (e) {\n      for (var r, n = \"\", t = e.length, o = 0; o < t; o++) r = e[o], n += String.fromCodePoint(r > 251 && r < 254 && o + 5 < t ? 1073741824 * (r - 252) + (e[++o] - 128 << 24) + (e[++o] - 128 << 18) + (e[++o] - 128 << 12) + (e[++o] - 128 << 6) + e[++o] - 128 : r > 247 && r < 252 && o + 4 < t ? (r - 248 << 24) + (e[++o] - 128 << 18) + (e[++o] - 128 << 12) + (e[++o] - 128 << 6) + e[++o] - 128 : r > 239 && r < 248 && o + 3 < t ? (r - 240 << 18) + (e[++o] - 128 << 12) + (e[++o] - 128 << 6) + e[++o] - 128 : r > 223 && r < 240 && o + 2 < t ? (r - 224 << 12) + (e[++o] - 128 << 6) + e[++o] - 128 : r > 191 && r < 224 && o + 1 < t ? (r - 192 << 6) + e[++o] - 128 : r);\n      return n;\n    }(function (e) {\n      for (var r = \"\", n = 0; n < e.length; n++) r += t.get(e.charCodeAt(n));\n      r = r.slice(0, r.length - r.length % 8);\n      for (var o = [], a = 0; a < r.length / 8; a++) o.push(r.slice(8 * a, 8 * a + 8));\n      return o;\n    }(e.split(\".\")[1].replaceAll(\"=\", \"\").replaceAll(\"-\", \"+\").replaceAll(\"_\", \"/\")).map(function (e) {\n      return parseInt(e, 2);\n    }));\n    return JSON.parse(r);\n  } catch (e) {\n    return console.error(\"There was an error decoding token: \", e), null;\n  }\n}\nfunction i(e) {\n  var r = l(e),\n    n = !0;\n  if (r && r.exp) {\n    var t = new Date(0);\n    t.setUTCSeconds(r.exp), n = t.valueOf() < new Date().valueOf();\n  }\n  return n;\n}\nfunction u(n) {\n  var t = e(!1),\n    o = t[0],\n    a = t[1],\n    u = e(null),\n    c = u[0],\n    f = u[1];\n  r(function () {\n    p(n);\n  }, [n]);\n  var p = function (e) {\n    f(l(e)), a(i(e));\n  };\n  return {\n    isExpired: o,\n    decodedToken: c,\n    reEvaluateToken: p\n  };\n}\nexport { l as decodeToken, i as isExpired, u as useJwt };","map":{"version":3,"sources":["../src/helpers/base64.ts","../src/jwt/index.ts","../src/hooks/index.tsx"],"names":["i","map","length","toString","bits","repeat","reverseMap","set","charCodeAt","base64Str","get","slice","bytesArray","push","replaceAll","toByteArray","code","bytes","arrayLength","nPart","decoded","String","fromCodePoint","token","split","UTF8ArrToStr","parse","jsonPayload","error","console","decodeToken","decodedToken","exp","expirationDate","setUTCSeconds","result","valueOf","userJwt","isExpired","setIsExpired","useState","setDecodedToken","useEffect","evaluateToken","isTokenExpired","reEvaluateToken"],"mappings":"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","sourcesContent":["const map = \"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/\";\nconst reverseMap = new Map();\n\nfor (let i = 0; i < map.length; i++) {\n  let bits: string = i.toString(2);\n  const padding: number = 6 - bits.length;\n  bits = \"0\".repeat(padding) + bits;\n\n  reverseMap.set(map.charCodeAt(i), bits);\n}\n\n/**\n * Convert base64 string to an array of bytes\n * @param base64Str - Base64 string\n * @returns Array of 1-byte elements\n */\nfunction toByteArray(base64Str: string): string[] {\n  let bits: string = \"\";\n\n  // convert base64 string to bits\n  for (let i = 0; i < base64Str.length; i++) {\n    bits += reverseMap.get(base64Str.charCodeAt(i));\n  }\n\n  // Remove padding (\"=\" characters)\n  bits = bits.slice(0, bits.length - (bits.length % 8));\n\n  const bytesArray = [];\n\n  // Separate string by 8-bit groups\n  for (let i = 0; i < bits.length / 8; i++) {\n    bytesArray.push(bits.slice(i * 8, i * 8 + 8));\n  }\n\n  return bytesArray;\n}\n\n/**\n * Convert a base64 string to an UTF-8 array\n * @param base64Str - Base64 string\n * @returns UTF-8 array\n */\nexport function base64DecToArray(base64Str: string): number[] {\n  // Replace - _ and remove padding\n  base64Str = base64Str.replaceAll(\"=\", \"\");\n  base64Str = base64Str.replaceAll(\"-\", \"+\");\n  base64Str = base64Str.replaceAll(\"_\", \"/\");\n\n  const charCodes: string[] = toByteArray(base64Str);\n\n  return charCodes.map((code) => parseInt(code, 2));\n}\n\n/**\n * Convert a UTF-8 array to string\n * @param bytes\n * @returns Decoded string\n */\nexport function UTF8ArrToStr(bytes: number[]): string {\n  let decoded: string = \"\"; // Decoded string\n  let nPart: number;\n  const arrayLength: number = bytes.length;\n\n  for (let i = 0; i < arrayLength; i++) {\n    nPart = bytes[i];\n    decoded += String.fromCodePoint(\n      nPart > 251 && nPart < 254 && i + 5 < arrayLength /* six bytes */\n        ? /* (nPart - 252 << 30) may be not so safe in ECMAScript! So... */\n          (nPart - 252) * 1073741824 +\n            ((bytes[++i] - 128) << 24) +\n            ((bytes[++i] - 128) << 18) +\n            ((bytes[++i] - 128) << 12) +\n            ((bytes[++i] - 128) << 6) +\n            bytes[++i] -\n            128\n        : nPart > 247 && nPart < 252 && i + 4 < arrayLength /* five bytes */\n        ? ((nPart - 248) << 24) +\n          ((bytes[++i] - 128) << 18) +\n          ((bytes[++i] - 128) << 12) +\n          ((bytes[++i] - 128) << 6) +\n          bytes[++i] -\n          128\n        : nPart > 239 && nPart < 248 && i + 3 < arrayLength /* four bytes */\n        ? ((nPart - 240) << 18) +\n          ((bytes[++i] - 128) << 12) +\n          ((bytes[++i] - 128) << 6) +\n          bytes[++i] -\n          128\n        : nPart > 223 && nPart < 240 && i + 2 < arrayLength /* three bytes */\n        ? ((nPart - 224) << 12) + ((bytes[++i] - 128) << 6) + bytes[++i] - 128\n        : nPart > 191 && nPart < 224 && i + 1 < arrayLength /* two bytes */\n        ? ((nPart - 192) << 6) + bytes[++i] - 128 /* nPart < 127 ? */\n        : /* one byte */\n          nPart\n    );\n  }\n\n  return decoded;\n}\n","import { base64DecToArray, UTF8ArrToStr } from \"../helpers/base64\";\n\n/**\n * Try to decode a JWT. If the token is valid you'll get an object otherwise you'll get null\n * @param token - The JWT that you want to decode\n * @returns Decoded token\n */\nexport function decodeToken<T>(token: string): T | null;\nexport function decodeToken(token: string): Object | null;\nexport function decodeToken<T = Object>(token: string): T | null {\n  try {\n    // if the token has more or less than 3 parts or is not a string\n    // then is not a valid token\n    if (typeof token !== \"string\" || token.split(\".\").length !== 3) {\n      return null;\n    }\n\n    // payload ( index 1 ) has the data stored and\n    // data about the expiration time\n    const payload: string = token.split(\".\")[1];\n\n    const base64Bytes: number[] = base64DecToArray(payload);\n    // Convert utf-8 array to string\n    const jsonPayload: string = UTF8ArrToStr(base64Bytes);\n    // Parse JSON\n    return JSON.parse(jsonPayload);\n  } catch (error) {\n    console.error(\"There was an error decoding token: \", error);\n    // Return null if something goes wrong\n    return null;\n  }\n}\n\n/**\n * Verify if the token is expired or not\n * @param token - Your JWT\n * @returns boolean\n */\nexport function isTokenExpired(token: string): boolean {\n  const decodedToken: any = decodeToken(token);\n  let result: boolean = true;\n\n  if (decodedToken && decodedToken.exp) {\n    const expirationDate: Date = new Date(0);\n    expirationDate.setUTCSeconds(decodedToken.exp); // sets the expiration seconds\n    // compare the expiration time and the current time\n    result = expirationDate.valueOf() < new Date().valueOf();\n  }\n\n  return result;\n}\n","import { useState, useEffect } from \"react\";\nimport { decodeToken, isTokenExpired } from \"../jwt\";\n\n/**\n * This function will help you to decode a JWT and know if it's expired or not\n * @param userJwt - Your JWT\n * @returns An object containing the properties isExpired, decodedToken and reEvaluateToken\n */\nexport function useJwt<T>(userJwt: string): IUseJwt<T>;\nexport function useJwt(userJwt: string): IUseJwt;\nexport function useJwt<T>(userJwt: string): IUseJwt<T> {\n  const [isExpired, setIsExpired] = useState<boolean>(false);\n  const [decodedToken, setDecodedToken] = useState<T | null>(null);\n\n  useEffect(() => {\n    evaluateToken(userJwt);\n  }, [userJwt]);\n\n  const evaluateToken = (token: string) => {\n    setDecodedToken(decodeToken<T>(token));\n    setIsExpired(isTokenExpired(token));\n  };\n\n  return { isExpired, decodedToken, reEvaluateToken: evaluateToken };\n}\n\ninterface IUseJwt<T = Object> {\n  isExpired: boolean;\n  decodedToken: T | null;\n  reEvaluateToken: (token: string) => void;\n}\n"]},"metadata":{},"sourceType":"module"}