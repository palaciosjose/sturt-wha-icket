{"ast":null,"code":"/**\n * Utilidad para limpiar datos de autenticaci√≥n\n * Se ejecuta autom√°ticamente cuando se detectan errores de token\n */\n\nexport const clearAuthData = () => {\n  try {\n    // Limpiar todos los datos de autenticaci√≥n\n    localStorage.removeItem(\"token\");\n    localStorage.removeItem(\"userId\");\n    localStorage.removeItem(\"companyId\");\n    localStorage.removeItem(\"user\");\n    localStorage.removeItem(\"cshow\");\n\n    // Limpiar cookies relacionadas\n    document.cookie.split(\";\").forEach(c => {\n      document.cookie = c.replace(/^ +/, \"\").replace(/=.*/, \"=;expires=\" + new Date().toUTCString() + \";path=/\");\n    });\n    console.log(\"üßπ Datos de autenticaci√≥n limpiados autom√°ticamente\");\n\n    // Redirigir al login\n    window.location.href = \"/login\";\n  } catch (error) {\n    console.error(\"Error limpiando datos de autenticaci√≥n:\", error);\n  }\n};\n\n/**\n * Verificar si el token es v√°lido\n */\nexport const isTokenValid = token => {\n  if (!token) return false;\n  try {\n    // Verificar si el token tiene el formato correcto (JWT)\n    const parts = token.split('.');\n    if (parts.length !== 3) return false;\n\n    // Verificar si no est√° expirado (timestamp b√°sico)\n    const payload = JSON.parse(atob(parts[1]));\n    const currentTime = Date.now() / 1000;\n    if (payload.exp && payload.exp < currentTime) {\n      console.log(\"‚è∞ Token expirado autom√°ticamente\");\n      return false;\n    }\n    return true;\n  } catch (error) {\n    console.log(\"‚ùå Token inv√°lido detectado autom√°ticamente\");\n    return false;\n  }\n};\n\n/**\n * Verificar y limpiar autom√°ticamente si es necesario\n */\nexport const validateAndCleanAuth = () => {\n  const token = localStorage.getItem(\"token\");\n\n  // Verificar si estamos en una ruta que no requiere autenticaci√≥n\n  const publicRoutes = ['/login', '/forget-password', '/signup'];\n  const currentPath = window.location.pathname;\n  if (publicRoutes.includes(currentPath)) {\n    return true; // Permitir acceso a rutas p√∫blicas\n  }\n  if (!token) {\n    console.log(\"üîÑ No hay token - redirigiendo al login\");\n    clearAuthData();\n    return false;\n  }\n  if (!isTokenValid(token)) {\n    console.log(\"üîÑ Token inv√°lido detectado - limpieza autom√°tica\");\n    clearAuthData();\n    return false;\n  }\n  return true;\n};","map":{"version":3,"names":["clearAuthData","localStorage","removeItem","document","cookie","split","forEach","c","replace","Date","toUTCString","console","log","window","location","href","error","isTokenValid","token","parts","length","payload","JSON","parse","atob","currentTime","now","exp","validateAndCleanAuth","getItem","publicRoutes","currentPath","pathname","includes"],"sources":["C:/laragon/www/whaticket03/waticketsaas/frontend/src/utils/clearAuthData.js"],"sourcesContent":["/**\n * Utilidad para limpiar datos de autenticaci√≥n\n * Se ejecuta autom√°ticamente cuando se detectan errores de token\n */\n\nexport const clearAuthData = () => {\n  try {\n    // Limpiar todos los datos de autenticaci√≥n\n    localStorage.removeItem(\"token\");\n    localStorage.removeItem(\"userId\");\n    localStorage.removeItem(\"companyId\");\n    localStorage.removeItem(\"user\");\n    localStorage.removeItem(\"cshow\");\n    \n    // Limpiar cookies relacionadas\n    document.cookie.split(\";\").forEach((c) => {\n      document.cookie = c\n        .replace(/^ +/, \"\")\n        .replace(/=.*/, \"=;expires=\" + new Date().toUTCString() + \";path=/\");\n    });\n    \n    console.log(\"üßπ Datos de autenticaci√≥n limpiados autom√°ticamente\");\n    \n    // Redirigir al login\n    window.location.href = \"/login\";\n  } catch (error) {\n    console.error(\"Error limpiando datos de autenticaci√≥n:\", error);\n  }\n};\n\n/**\n * Verificar si el token es v√°lido\n */\nexport const isTokenValid = (token) => {\n  if (!token) return false;\n  \n  try {\n    // Verificar si el token tiene el formato correcto (JWT)\n    const parts = token.split('.');\n    if (parts.length !== 3) return false;\n    \n    // Verificar si no est√° expirado (timestamp b√°sico)\n    const payload = JSON.parse(atob(parts[1]));\n    const currentTime = Date.now() / 1000;\n    \n    if (payload.exp && payload.exp < currentTime) {\n      console.log(\"‚è∞ Token expirado autom√°ticamente\");\n      return false;\n    }\n    \n    return true;\n  } catch (error) {\n    console.log(\"‚ùå Token inv√°lido detectado autom√°ticamente\");\n    return false;\n  }\n};\n\n/**\n * Verificar y limpiar autom√°ticamente si es necesario\n */\nexport const validateAndCleanAuth = () => {\n  const token = localStorage.getItem(\"token\");\n  \n  // Verificar si estamos en una ruta que no requiere autenticaci√≥n\n  const publicRoutes = ['/login', '/forget-password', '/signup'];\n  const currentPath = window.location.pathname;\n  \n  if (publicRoutes.includes(currentPath)) {\n    return true; // Permitir acceso a rutas p√∫blicas\n  }\n  \n  if (!token) {\n    console.log(\"üîÑ No hay token - redirigiendo al login\");\n    clearAuthData();\n    return false;\n  }\n  \n  if (!isTokenValid(token)) {\n    console.log(\"üîÑ Token inv√°lido detectado - limpieza autom√°tica\");\n    clearAuthData();\n    return false;\n  }\n  \n  return true;\n}; "],"mappings":"AAAA;AACA;AACA;AACA;;AAEA,OAAO,MAAMA,aAAa,GAAGA,CAAA,KAAM;EACjC,IAAI;IACF;IACAC,YAAY,CAACC,UAAU,CAAC,OAAO,CAAC;IAChCD,YAAY,CAACC,UAAU,CAAC,QAAQ,CAAC;IACjCD,YAAY,CAACC,UAAU,CAAC,WAAW,CAAC;IACpCD,YAAY,CAACC,UAAU,CAAC,MAAM,CAAC;IAC/BD,YAAY,CAACC,UAAU,CAAC,OAAO,CAAC;;IAEhC;IACAC,QAAQ,CAACC,MAAM,CAACC,KAAK,CAAC,GAAG,CAAC,CAACC,OAAO,CAAEC,CAAC,IAAK;MACxCJ,QAAQ,CAACC,MAAM,GAAGG,CAAC,CAChBC,OAAO,CAAC,KAAK,EAAE,EAAE,CAAC,CAClBA,OAAO,CAAC,KAAK,EAAE,YAAY,GAAG,IAAIC,IAAI,CAAC,CAAC,CAACC,WAAW,CAAC,CAAC,GAAG,SAAS,CAAC;IACxE,CAAC,CAAC;IAEFC,OAAO,CAACC,GAAG,CAAC,qDAAqD,CAAC;;IAElE;IACAC,MAAM,CAACC,QAAQ,CAACC,IAAI,GAAG,QAAQ;EACjC,CAAC,CAAC,OAAOC,KAAK,EAAE;IACdL,OAAO,CAACK,KAAK,CAAC,yCAAyC,EAAEA,KAAK,CAAC;EACjE;AACF,CAAC;;AAED;AACA;AACA;AACA,OAAO,MAAMC,YAAY,GAAIC,KAAK,IAAK;EACrC,IAAI,CAACA,KAAK,EAAE,OAAO,KAAK;EAExB,IAAI;IACF;IACA,MAAMC,KAAK,GAAGD,KAAK,CAACb,KAAK,CAAC,GAAG,CAAC;IAC9B,IAAIc,KAAK,CAACC,MAAM,KAAK,CAAC,EAAE,OAAO,KAAK;;IAEpC;IACA,MAAMC,OAAO,GAAGC,IAAI,CAACC,KAAK,CAACC,IAAI,CAACL,KAAK,CAAC,CAAC,CAAC,CAAC,CAAC;IAC1C,MAAMM,WAAW,GAAGhB,IAAI,CAACiB,GAAG,CAAC,CAAC,GAAG,IAAI;IAErC,IAAIL,OAAO,CAACM,GAAG,IAAIN,OAAO,CAACM,GAAG,GAAGF,WAAW,EAAE;MAC5Cd,OAAO,CAACC,GAAG,CAAC,kCAAkC,CAAC;MAC/C,OAAO,KAAK;IACd;IAEA,OAAO,IAAI;EACb,CAAC,CAAC,OAAOI,KAAK,EAAE;IACdL,OAAO,CAACC,GAAG,CAAC,4CAA4C,CAAC;IACzD,OAAO,KAAK;EACd;AACF,CAAC;;AAED;AACA;AACA;AACA,OAAO,MAAMgB,oBAAoB,GAAGA,CAAA,KAAM;EACxC,MAAMV,KAAK,GAAGjB,YAAY,CAAC4B,OAAO,CAAC,OAAO,CAAC;;EAE3C;EACA,MAAMC,YAAY,GAAG,CAAC,QAAQ,EAAE,kBAAkB,EAAE,SAAS,CAAC;EAC9D,MAAMC,WAAW,GAAGlB,MAAM,CAACC,QAAQ,CAACkB,QAAQ;EAE5C,IAAIF,YAAY,CAACG,QAAQ,CAACF,WAAW,CAAC,EAAE;IACtC,OAAO,IAAI,CAAC,CAAC;EACf;EAEA,IAAI,CAACb,KAAK,EAAE;IACVP,OAAO,CAACC,GAAG,CAAC,yCAAyC,CAAC;IACtDZ,aAAa,CAAC,CAAC;IACf,OAAO,KAAK;EACd;EAEA,IAAI,CAACiB,YAAY,CAACC,KAAK,CAAC,EAAE;IACxBP,OAAO,CAACC,GAAG,CAAC,mDAAmD,CAAC;IAChEZ,aAAa,CAAC,CAAC;IACf,OAAO,KAAK;EACd;EAEA,OAAO,IAAI;AACb,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module"}